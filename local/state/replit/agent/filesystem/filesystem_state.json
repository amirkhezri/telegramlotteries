{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Telegram Mini App called \"دنیای قرعه‌کشی\" (World of Raffles) with a role-based access control system supporting three user groups: (1) Bot administrators with the ability to set levels and approve/reject raffles, (2) Regular users who can view and participate in raffles based on their access level and various filters, (3) Channel administrators who can submit raffle information forms.\n\n## Recent Changes (August 13, 2025)\n\n### ✅ **CHANNEL URL NAVIGATION SYSTEM COMPLETED**:\n- **Fixed Channel URL Usage**: All channel navigation now uses channelUrl field from database instead of constructing from channelId\n- **Enhanced Form Validation**: Added strict URL validation for sponsor channel forms requiring https://t.me/ format\n- **Database Cleanup**: Fixed invalid channelUrl entries in existing sponsor channels\n- **RaffleCard Integration**: Required channels buttons now properly navigate using stored channelUrl values\n- **MembershipCard Consistency**: All membership join buttons use channelUrl for proper navigation\n- **Removed Fallbacks**: Eliminated channelId-based URL construction to prevent navigation errors\n- **Validation Rules**: channelUrl field now enforces proper Telegram channel URL format with validation\n\n### ✅ **TELEGRAM MEMBERSHIP VERIFICATION SYSTEM COMPLETED**:\n- **Complete Database Schema**: userSponsorMemberships table with all required fields implemented\n- **TelegramBotService Integration**: Comprehensive bot service for real-time membership checking via Telegram API\n- **Automated Scheduler**: 15-minute interval membership verification system with selective channel access checking\n- **React Components**: MembershipCard and MembershipPage fully integrated with error handling and point tracking\n- **API Endpoints**: Complete REST API for membership checking, point rewards, and user membership management\n- **Real-time Updates**: Query invalidation system for immediate UI updates after membership changes\n- **Security Features**: Protected endpoints with proper authentication and anti-fraud measures\n- **Persian UI**: Fully localized interface with RTL support and Telegram-themed design\n- **Error Resolution**: All TypeScript/LSP errors resolved, system ready for production deployment\n\n### Testing Guide Created:\n- **MEMBERSHIP_TESTING_GUIDE.md**: Comprehensive 10-step testing protocol for complete system validation\n- **Bot Configuration**: Step-by-step guide for proper Telegram bot setup with channel admin access\n- **API Testing**: Direct endpoint testing procedures for all membership-related functionality\n- **Security Validation**: Testing procedures for authentication and anti-fraud measures\n- **Troubleshooting**: Common issues and solutions for bot access and membership verification\n- ✅ **Major Architecture Simplification**: Merged channel_admin and regular user roles into single unified user type\n- ✅ **User Role Restructure**: Now only 2 main user types:\n  - `bot_admin` (Level 1: Full access, Level 2: Limited access to Messages + Profile only)\n  - `regular` (All users including raffle submission capabilities)\n- ✅ **Database Schema Updates**: Removed channel_admin enum, updated user types\n- ✅ **Frontend Consolidation**: Removed separate channel-admin page, integrated all features into UserTabsMainPage\n- ✅ **API Simplification**: Unified routing logic, removed channel_admin specific endpoints\n- ✅ **Role-Based UI**: Regular users now see all features including raffle submission forms\n- ✅ **Database Integrity Enhancement**: Fixed raffle deletion to properly clean up related data:\n  - Individual and bulk delete now remove participants and seen records first\n  - Prevents orphaned data accumulation in database\n  - Maintains referential integrity across all related tables\n- ✅ **Admin Hierarchy System**: Implemented 3-tier admin access control:\n  - **King 👑 (Level 0)**: Centralized King Admin ID management\n  - **Level 1 Admin**: Full access except admin management (cannot create/remove admins)\n  - **Level 2 Admin**: Limited access - cannot delete raffles or manage sponsors/admins\n- ✅ **CENTRALIZED KING ADMIN MANAGEMENT**: Complete centralization of King Admin configuration:\n  - **Central Constant**: `KING_ADMIN_TELEGRAM_ID` in shared/schema.ts for single point of change\n  - **Helper Functions**: `isKingAdmin()` and `getKingAdminId()` for consistent usage across codebase\n  - **Future-Proof**: All hardcoded IDs (9 instances) replaced with helper function calls\n  - **Multi-Layer Security**: Application, Database, and API layers all use helper functions\n  - **Database Trigger**: Automatically updates with King Admin changes via helper functions\n  - **Documentation**: Complete guides for King Admin management (see King Admin Management section below)\n- ✅ **ADMIN MANAGEMENT FULLY FUNCTIONAL**: Complete admin panel functionality implemented:\n  - **Admin List Display**: Fixed API endpoint mismatch (/api/admin/users?type=bot_admin)\n  - **Admin Creation**: Working POST /api/admins endpoint for adding new administrators\n  - **Admin Removal**: Fixed DELETE /api/admins/:telegramId endpoint with direct database bypass\n  - **Security Protection**: King Admin cannot be removed, admin removal converts to regular user\n  - **Frontend Integration**: Query invalidation and error handling for seamless UX\n- ✅ **TAB STATE PRESERVATION**: Fixed mutations to preserve current tab state instead of resetting to default:\n  - **Removed Page Reloads**: Eliminated window.location.reload() from all admin panel mutations\n  - **Query Invalidation**: All mutations now use queryClient.invalidateQueries() for updates\n  - **Tab Persistence**: Tabs remain active after mutations (add admin, sponsor channels, approve/reject raffles)\n  - **Default Tab Logic**: Default tabs only apply on initial app entry, not after mutations\n- ✅ **SMART RAFFLE ORDERING**: Implemented context-aware sorting for optimal admin workflow:\n  - **Pending Tab**: Oldest submissions first (FIFO - fair review queue based on createdAt ASC)\n  - **Approved/Rejected Tabs**: Newest admin decisions first (recent activity based on updatedAt DESC)\n  - **Backend Logic**: Dynamic ORDER BY clause in getRafflesByStatus() based on status parameter\n  - **Admin Efficiency**: Admins see oldest pending work first, latest completed work at top\n- ✅ **DRAG-AND-DROP SPONSOR CHANNELS**: Complete sortable sponsor channel system:\n  - **Frontend Implementation**: SortableChannelItem with @dnd-kit packages for smooth drag-and-drop\n  - **Backend API**: /api/sponsor-channels-reorder endpoint for real-time reordering\n  - **Database Integration**: displayOrder field with synchronized ordering for admins and users\n  - **Visual Feedback**: Drag handle, visual states, and immediate UI updates\n  - **Query Invalidation**: Real-time cache updates after reordering mutations\n- ✅ **ADMIN LIST ORDERING**: Newest administrators displayed first in admin management tab:\n  - **Database Ordering**: getUsersByType() modified to show bot_admin users by createdAt DESC\n  - **User Experience**: Recently added administrators appear at top of admin list\n  - **Consistent Ordering**: Admin panel shows most recent additions for better management workflow\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Telegram-themed design tokens and RTL support\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Design System**: Custom Telegram-inspired design with Persian fonts and animations\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **API Design**: RESTful API with structured route handlers\n- **Storage Layer**: Abstracted storage interface with in-memory implementation (can be extended to database)\n- **Validation**: Zod schemas for request/response validation\n- **Development**: Hot reloading with Vite integration in development mode\n\n## Data Storage Architecture\n- **Database**: PostgreSQL with Drizzle ORM for schema management and migrations\n- **Connection**: Neon Database serverless PostgreSQL connection\n- **Schema Design**: Normalized relational design with tables for users, raffles, participants, and sponsor channels\n- **Session Management**: PostgreSQL session storage using connect-pg-simple\n\n## Authentication & Authorization\n- **Multi-Method Authentication**: Supports Telegram Web App SDK and Gmail authentication\n- **Role-Based Access Control**: Three distinct user roles with different capabilities:\n  - `bot_admin`: Bot administrators with full system access and raffle approval rights\n  - `channel_admin`: Channel administrators who can submit raffle forms for approval\n  - `regular`: Regular users who view and participate in approved raffles\n- **Level-Based Content Access**: Users can only see raffles matching their level or below\n- **Session Management**: Server-side sessions with PostgreSQL storage\n\n## Key Features Architecture\n- **Role-Based User Experience**: Dynamic UI and navigation based on user roles\n- **Level-Based Filtering**: Advanced filtering system for raffles (today, seen, joined, favorites, ended)\n- **Admin Workflow**: Complete raffle approval workflow with level assignment\n- **Channel Admin Interface**: Dedicated form submission system for channel administrators\n- **Multi-language Support**: RTL layout with Persian/Farsi localization\n- **Progressive Web App**: Mobile-first design optimized for Telegram's Web App environment\n- **Real-time Updates**: Query invalidation for live data updates\n- **Responsive Design**: Mobile-optimized UI with bottom navigation\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **Drizzle ORM**: Type-safe database ORM with migration support\n\n## Telegram Platform\n- **Telegram Web App SDK**: Official Telegram SDK for mini app integration\n- **Telegram Bot API**: For potential bot interactions and notifications\n\n## UI/UX Libraries\n- **Radix UI**: Headless UI components for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Embla Carousel**: Carousel component for content display\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n## Validation & Forms\n- **Zod**: Runtime type validation for API requests and forms\n- **React Hook Form**: Form state management and validation\n- **Drizzle Zod**: Integration between Drizzle schemas and Zod validation\n\n## Fonts & Internationalization\n- **Google Fonts**: Inter font family for modern typography\n- **Font Awesome**: Icon fonts for additional iconography\n- **RTL Support**: Built-in right-to-left layout support for Persian language\n\n# King Admin Management System\n\n## 👑 How to Change King Admin\n\n### Simple Method (One Line Change)\nTo change the King Admin, modify only this line in `shared/schema.ts`:\n\n```typescript\n// Line 10 in shared/schema.ts\nexport const KING_ADMIN_TELEGRAM_ID = \"128787773\";  // Current ID\n\n// Change to:\nexport const KING_ADMIN_TELEGRAM_ID = \"NEW_TELEGRAM_ID\";\n```\n\n### Why This Works\nThe entire system uses helper functions instead of hardcoded values:\n- `isKingAdmin(telegramId)` - Check if user is King Admin\n- `getKingAdminId()` - Get current King Admin ID\n\nAll 9 previously hardcoded locations now automatically update when the constant changes.\n\n### Automatic Updates Include:\n- ✅ All security checks in server/storage.ts\n- ✅ Authentication logic in server/routes.ts  \n- ✅ Database triggers for data protection\n- ✅ Any future code using helper functions\n\n## 📋 Development Guidelines for King Admin\n\n### For Future Code Development\n\n**✅ CORRECT Usage:**\n```typescript\nimport { isKingAdmin, getKingAdminId } from \"@shared/schema\";\n\n// Check if user is King Admin\nif (isKingAdmin(userTelegramId)) {\n  // King admin logic\n}\n\n// Get King Admin ID\nconst kingId = getKingAdminId();\n```\n\n**❌ WRONG Usage (Never Do This):**\n```typescript\n// Never hardcode IDs\nif (userTelegramId === \"128787773\") { ... }\nif (userTelegramId === KING_ADMIN_TELEGRAM_ID) { ... }\n```\n\n### Security Features (Bypass Prevention)\n- **Application Layer**: All business logic uses helper functions, environment variables disabled\n- **Database Layer**: Multiple PostgreSQL triggers prevent King Admin bypass and duplication\n- **API Layer**: Authentication endpoints use centralized functions only\n- **Environment Override**: ADMIN_TELEGRAM_IDS environment variable bypassing disabled\n- **Database Protection**: Cannot manually create second King Admin (security exception)\n- **Future-Proof**: New code using helper functions automatically inherits all protections\n\n### The ONLY Way to Change King Admin\n1. Modify `KING_ADMIN_TELEGRAM_ID` constant in `shared/schema.ts`\n2. That's it - no other method works (all bypasses are blocked)\n\n## 📚 Detailed Documentation Files\n\n### King Admin Management Guides:\n- **`KING_ADMIN_CHANGE_GUIDE.md`**: Complete step-by-step guide for changing King Admin safely\n- **`FUTURE_KING_ADMIN_USAGE.md`**: Development rules and best practices for future code\n\n### Key Benefits:\n1. **Single Point of Change**: Only `shared/schema.ts` needs modification\n2. **Automatic Synchronization**: All system components update automatically\n3. **Security Guaranteed**: Multi-layer protection remains intact\n4. **Developer Friendly**: Clear guidelines prevent mistakes\n5. **Maintainable**: Centralized management reduces complexity","size_bytes":13955},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n        'telegram': '0.75rem',\n        'telegram-sm': '0.5rem',\n        'telegram-lg': '1rem',\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Telegram-specific colors\n        telegram: {\n          DEFAULT: \"var(--telegram)\",\n          light: \"var(--telegram-light)\",\n          dark: \"var(--telegram-dark)\",\n          bg: \"var(--telegram-bg)\",\n          surface: \"var(--telegram-surface)\",\n          secondary: \"var(--telegram-secondary)\",\n          success: \"var(--telegram-success)\",\n          warning: \"var(--telegram-warning)\",\n          error: \"var(--telegram-error)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        telegram: [\"var(--font-telegram)\"],\n      },\n      boxShadow: {\n        'telegram': 'var(--shadow-telegram)',\n        'telegram-lg': 'var(--shadow-telegram-lg)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"telegram-bounce\": {\n          \"0%\": { transform: \"scale(0.95)\", opacity: \"0.8\" },\n          \"50%\": { transform: \"scale(1.02)\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n        \"telegram-slide-up\": {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"telegram-bounce\": \"telegram-bounce 0.3s ease-out\",\n        \"telegram-slide-up\": \"telegram-slide-up 0.4s cubic-bezier(0.4, 0, 0.2, 1)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4003},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite } from \"./vite\";\n// Dynamically import scheduler to avoid issues during startup\n// import MembershipScheduler from './services/membershipScheduler';\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.static(\"dist\"));\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Setup Vite\n  await setupVite(app, server);\n\n  // Initialize membership scheduler if bot token is available\n  if (process.env.BOT_TOKEN) {\n    try {\n      const { default: MembershipScheduler } = await import('./services/membershipScheduler');\n      const scheduler = new MembershipScheduler(process.env.BOT_TOKEN);\n      scheduler.start();\n      console.log('✅ Membership scheduler started successfully');\n    } catch (error) {\n      console.error('❌ Failed to start membership scheduler:', error);\n    }\n  } else {\n    console.warn('⚠️ BOT_TOKEN not configured - Membership checking disabled');\n  }\n\n  const port = Number(process.env.PORT) || 5000;\n  server.listen(port, \"0.0.0.0\", () => {\n    console.log(`🚀 Server running on port ${port}`);\n  });\n})();","size_bytes":1159},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, upsertUserSchema, insertRaffleSchema, insertSponsorChannelSchema, insertBotConfigSchema, users, KING_ADMIN_TELEGRAM_ID, isKingAdmin, getKingAdminId } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = userData.telegramId ? await storage.getUserByTelegramId(userData.telegramId) : null;\n      \n      if (existingUser) {\n        // Update existing user\n        const updatedUser = await storage.updateUser(existingUser.id, userData);\n        res.json(updatedUser);\n      } else {\n        // Create new user\n        const user = await storage.createUser(userData);\n        res.json(user);\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\", error });\n    }\n  });\n\n  app.get(\"/api/users/telegram/:telegramId\", async (req, res) => {\n    try {\n      const user = await storage.getUserByTelegramId(req.params.telegramId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.put(\"/api/users/:id/type\", async (req, res) => {\n    try {\n      const { userType } = req.body;\n      const user = await storage.updateUser(req.params.id, { userType });\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Raffle routes with role-based access control\n  app.get(\"/api/raffles\", async (req, res) => {\n    try {\n      const { status, level, submitterId, filter, userId } = req.query;\n      \n      // Get user to check role and level\n      const user = userId ? await storage.getUser(userId as string) : null;\n      const userLevel = user?.level || 1;\n      const userRole = user?.userType || \"regular\";\n      \n      let raffles;\n      \n      if (userRole === \"bot_admin\") {\n        // Bot admins see raffles filtered by status\n        if (status && status !== \"all\") {\n          raffles = await storage.getRafflesByStatus(status as string);\n        } else if (submitterId) {\n          raffles = await storage.getRafflesBySubmitter(submitterId as string);\n        } else {\n          // Default to pending for admin panel\n          raffles = await storage.getRafflesByStatus(\"pending\");\n        }\n      } else {\n        // Regular users see approved raffles within their level\n        if (filter === \"today\") {\n          raffles = await storage.getTodaysRaffles(userLevel);\n        } else if (filter === \"ended\") {\n          raffles = await storage.getEndedRaffles(userLevel);\n        } else {\n          raffles = await storage.getRafflesByLevelAndStatus(userLevel, \"approved\");\n        }\n      }\n      \n      res.json(raffles);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.post(\"/api/raffles\", async (req, res) => {\n    try {\n      const raffleData = insertRaffleSchema.parse(req.body);\n      \n      // Check for duplicate raffle (same channel + message ID)\n      const existingRaffles = await storage.getRafflesByStatus(\"pending\");\n      const approvedRaffles = await storage.getRafflesByStatus(\"approved\");\n      const allRaffles = [...existingRaffles, ...approvedRaffles];\n      \n      const duplicate = allRaffles.find(r => \n        r.channelId === raffleData.channelId && r.messageId === raffleData.messageId\n      );\n      \n      if (duplicate) {\n        return res.status(400).json({ message: \"Raffle with this channel and message already exists\" });\n      }\n      \n      const raffle = await storage.createRaffle(raffleData);\n      res.json(raffle);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid raffle data\", error });\n    }\n  });\n\n  app.put(\"/api/raffles/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const raffle = await storage.updateRaffle(req.params.id, updates);\n      if (!raffle) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json(raffle);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Admin route for approving raffles with level assignment\n  app.patch(\"/api/raffles/:id/approve\", async (req, res) => {\n    try {\n      const { levelRequired, adminUserId, status } = req.body;\n      \n      // Check if user is bot admin\n      const admin = await storage.getUser(adminUserId);\n      if (!admin || admin.userType !== \"bot_admin\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const raffle = await storage.approveRaffleWithLevel(req.params.id, levelRequired, adminUserId);\n      if (!raffle) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json(raffle);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.patch(\"/api/raffles/:id/reject\", async (req, res) => {\n    try {\n      const { adminUserId, reason, restriction } = req.body;\n      \n      // Check if user is bot admin\n      const admin = await storage.getUser(adminUserId);\n      if (!admin || admin.userType !== \"bot_admin\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const raffle = await storage.rejectRaffle(req.params.id, reason, restriction || { type: \"none\" }, adminUserId);\n      if (!raffle) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json(raffle);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Bulk delete raffles by status (MUST be before individual delete route)\n  app.delete(\"/api/raffles/bulk-delete\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      if (!status || (status !== 'approved' && status !== 'rejected')) {\n        return res.status(400).json({ message: \"Invalid status. Must be 'approved' or 'rejected'\" });\n      }\n      \n      console.log(`Bulk deleting raffles with status: ${status}`);\n      const deletedCount = await storage.bulkDeleteRafflesByStatus(status as string);\n      console.log(`Deleted ${deletedCount} raffles`);\n      \n      res.json({ \n        message: `Successfully deleted ${deletedCount} ${status} raffles`, \n        deletedCount \n      });\n    } catch (error) {\n      console.error(\"Bulk delete raffles error:\", error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Delete individual raffle\n  app.delete(\"/api/raffles/:id\", async (req, res) => {\n    try {\n      const raffleId = req.params.id;\n      const deleted = await storage.deleteRaffle(raffleId);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json({ message: \"Raffle deleted successfully\", id: raffleId });\n    } catch (error) {\n      console.error(\"Delete raffle error:\", error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.post(\"/api/raffles/:id/join\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const hasJoined = await storage.hasUserJoinedRaffle(userId, req.params.id);\n      \n      if (hasJoined) {\n        return res.status(400).json({ message: \"User already joined this raffle\" });\n      }\n      \n      await storage.joinRaffle(userId, req.params.id);\n      await storage.markRaffleSeen(userId, req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.post(\"/api/raffles/:id/seen\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n      \n      await storage.markRaffleSeen(userId, req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Approve raffle\n  app.post(\"/api/raffles/:id/approve\", async (req, res) => {\n    try {\n      const { level } = req.body;\n      const raffleId = req.params.id;\n      \n      if (!level) {\n        return res.status(400).json({ message: \"Level is required\" });\n      }\n      \n      const result = await storage.approveRaffleWithLevel(raffleId, level, 'system');\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error approving raffle:\", error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Reject raffle\n  app.post(\"/api/raffles/:id/reject\", async (req, res) => {\n    try {\n      const { reason } = req.body;\n      const raffleId = req.params.id;\n      \n      const result = await storage.rejectRaffle(raffleId, reason, null, 'system');\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error rejecting raffle:\", error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Get users list with filtering (for admin)\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const { userType } = req.query;\n      // Set no-cache headers\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n      \n      if (userType) {\n        const userTypes = (userType as string).split(',');\n        const allUsers = [];\n        for (const type of userTypes) {\n          // Direct database query to bypass any caching\n          const dbUsers = await db.select().from(users).where(eq(users.userType, type.trim() as any));\n          console.log(`DB query for type \"${type}\":`, dbUsers.map(u => ({ id: u.id, telegramId: u.telegramId, userType: u.userType })));\n          allUsers.push(...dbUsers);\n        }\n        console.log(`Final result for types ${userTypes}:`, allUsers.map(u => ({ id: u.id, telegramId: u.telegramId, userType: u.userType })));\n        res.json(allUsers);\n      } else {\n        res.json([]);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Get user's seen raffles  \n  app.get(\"/api/user/seen-raffles/:userId\", async (req, res) => {\n    try {\n      const seenRaffleIds = await storage.getUserSeenRaffles(req.params.userId);\n      res.json(seenRaffleIds);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Get user's joined raffles\n  app.get(\"/api/user/joined-raffles/:userId\", async (req, res) => {\n    try {\n      const joinedRaffles = await storage.getUserJoinedRaffles(req.params.userId);\n      res.json(joinedRaffles);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Check if user has joined raffle\n  app.get(\"/api/raffles/:raffleId/joined/:userId\", async (req, res) => {\n    try {\n      const { raffleId, userId } = req.params;\n      const hasJoined = await storage.hasUserJoinedRaffle(userId, raffleId);\n      res.json({ hasJoined });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Sponsor channel routes\n  app.get(\"/api/sponsor-channels\", async (req, res) => {\n    try {\n      const channels = await storage.getSponsorChannels();\n      res.json(channels);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.post(\"/api/sponsor-channels\", async (req, res) => {\n    try {\n      console.log(\"Received sponsor channel data:\", req.body);\n      const channelData = insertSponsorChannelSchema.parse(req.body);\n      console.log(\"Validated sponsor channel data:\", channelData);\n      const channel = await storage.createSponsorChannel(channelData);\n      res.json(channel);\n    } catch (error: any) {\n      console.error(\"Sponsor channel creation error:\", error);\n      res.status(400).json({ message: \"Invalid channel data\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/sponsor-channels/:id\", async (req, res) => {\n    try {\n      await storage.deleteSponsorChannel(req.params.id);\n      res.json({ message: \"Sponsor channel deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Sponsor channel deletion error:\", error);\n      res.status(500).json({ message: \"Server error\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/sponsor-channels/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const updatedChannel = await storage.updateSponsorChannel(req.params.id, updates);\n      if (!updatedChannel) {\n        return res.status(404).json({ message: \"Sponsor channel not found\" });\n      }\n      res.json(updatedChannel);\n    } catch (error: any) {\n      console.error(\"Sponsor channel update error:\", error);\n      res.status(500).json({ message: \"Server error\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/sponsor-channels-reorder\", async (req, res) => {\n    try {\n      const { channelOrders } = req.body;\n      \n      // Validate the request body\n      const reorderSchema = z.object({\n        channelOrders: z.array(z.object({\n          id: z.string(),\n          displayOrder: z.number()\n        }))\n      });\n      \n      const validatedData = reorderSchema.parse({ channelOrders });\n      await storage.reorderSponsorChannels(validatedData.channelOrders);\n      \n      res.json({ message: \"Sponsor channels reordered successfully\" });\n    } catch (error: any) {\n      console.error(\"Sponsor channel reorder error:\", error);\n      res.status(400).json({ message: \"Invalid reorder data\", error: error.message });\n    }\n  });\n\n  // Telegram membership verification endpoints\n  app.get(\"/api/user/:userId/sponsor-memberships\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const memberships = await storage.getUserSponsorMemberships(userId);\n      res.json(memberships);\n    } catch (error: any) {\n      console.error(\"Error fetching user memberships:\", error);\n      res.status(500).json({ message: \"Server error\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/user/:userId/check-membership/:channelId\", async (req, res) => {\n    try {\n      const { userId, channelId } = req.params;\n      \n      if (!process.env.BOT_TOKEN) {\n        return res.status(500).json({ message: \"Bot token not configured\" });\n      }\n\n      const TelegramBotService = (await import('./services/telegramBot')).default;\n      const telegramBot = new TelegramBotService(process.env.BOT_TOKEN);\n      \n      const result = await telegramBot.updateUserMembership(userId, channelId);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error checking membership:\", error);\n      res.status(500).json({ message: error.message || \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/user/:userId/available-channels\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const channels = await storage.getAvailableSponsorChannelsForUser(userId);\n      res.json(channels);\n    } catch (error: any) {\n      console.error(\"Error fetching available channels:\", error);\n      res.status(500).json({ message: \"Server error\", error: error.message });\n    }\n  });\n\n  // Admin endpoints for membership management\n  app.post(\"/api/admin/check-all-memberships/:channelId\", async (req, res) => {\n    try {\n      if (!process.env.BOT_TOKEN) {\n        return res.status(500).json({ message: \"Bot token not configured\" });\n      }\n\n      const { channelId } = req.params;\n      const TelegramBotService = (await import('./services/telegramBot')).default;\n      const telegramBot = new TelegramBotService(process.env.BOT_TOKEN);\n      \n      const updatedCount = await telegramBot.checkAllUsersInChannel(channelId);\n      res.json({ \n        message: `Successfully checked ${updatedCount} memberships`,\n        updatedCount \n      });\n    } catch (error: any) {\n      console.error(\"Error checking all memberships:\", error);\n      res.status(500).json({ message: error.message || \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/check-bot-access\", async (req, res) => {\n    try {\n      if (!process.env.BOT_TOKEN) {\n        return res.status(500).json({ message: \"Bot token not configured\" });\n      }\n\n      const TelegramBotService = (await import('./services/telegramBot')).default;\n      const telegramBot = new TelegramBotService(process.env.BOT_TOKEN);\n      \n      const result = await telegramBot.checkAllChannelsAccess();\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error checking bot access:\", error);\n      res.status(500).json({ message: error.message || \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/update-channel-access/:channelId\", async (req, res) => {\n    try {\n      if (!process.env.BOT_TOKEN) {\n        return res.status(500).json({ message: \"Bot token not configured\" });\n      }\n\n      const { channelId } = req.params;\n      const TelegramBotService = (await import('./services/telegramBot')).default;\n      const telegramBot = new TelegramBotService(process.env.BOT_TOKEN);\n      \n      const hasAccess = await telegramBot.updateChannelBotAccess(channelId);\n      res.json({ \n        channelId,\n        hasAccess,\n        message: hasAccess ? \"Bot has access to channel\" : \"Bot does not have access to channel\"\n      });\n    } catch (error: any) {\n      console.error(\"Error updating channel access:\", error);\n      res.status(500).json({ message: error.message || \"Server error\" });\n    }\n  });\n\n  // Points and referral routes\n  app.post(\"/api/users/:id/points\", async (req, res) => {\n    try {\n      const { points } = req.body;\n      await storage.addPoints(req.params.id, points);\n      const user = await storage.getUser(req.params.id);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Get submitted raffles by user\n  app.get(\"/api/raffles/submitted/:userId\", async (req, res) => {\n    try {\n      const submittedRaffles = await storage.getRafflesBySubmitter(req.params.userId);\n      res.json(submittedRaffles);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/raffles/pending\", async (req, res) => {\n    try {\n      const pendingRaffles = await storage.getRafflesByStatus(\"pending\");\n      res.json(pendingRaffles);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const { type } = req.query;\n      console.log(`DB query for type \"${type}\":`, type ? await storage.getUsersByType(type as string) : []);\n      const users = type ? await storage.getUsersByType(type as string) : [];\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching admin users:', error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/telegram\", async (req, res) => {\n    try {\n      const authData = upsertUserSchema.parse(req.body);\n      \n      // Check if user already exists in database\n      const existingUser = authData.telegramId ? await storage.getUserByTelegramId(authData.telegramId) : null;\n      \n      const userData = {\n        ...authData,\n        authMethod: \"telegram\" as const,\n        // Preserve existing user type and adminLevel if user exists, otherwise determine from admin status\n        userType: existingUser ? existingUser.userType : \n          (authData.telegramId && await storage.isUserAdmin(authData.telegramId) ? \"bot_admin\" as const : \"regular\" as const),\n        adminLevel: existingUser ? existingUser.adminLevel : \n          // CRITICAL SECURITY: King Admin gets level 0 (hardcoded)\n          (isKingAdmin(authData.telegramId || \"\") ? 0 : \n           // Other admins get level 1 by default\n           (authData.telegramId && await storage.isUserAdmin(authData.telegramId) ? 1 : 2)),\n      };\n      \n      const user = await storage.upsertUser(userData);\n      \n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid authentication data\", error });\n    }\n  });\n\n  app.post(\"/api/auth/gmail\", async (req, res) => {\n    try {\n      const authData = upsertUserSchema.parse(req.body);\n      \n      const user = await storage.upsertUser({\n        ...authData,\n        authMethod: \"gmail\",\n      });\n      \n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid authentication data\", error });\n    }\n  });\n\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const { telegramId, email } = req.query;\n      \n      let user;\n      if (telegramId) {\n        user = await storage.getUserByTelegramId(telegramId as string);\n      } else if (email) {\n        user = await storage.getUserByEmail(email as string);\n      }\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Add admin level information\n      let adminLevel = null;\n      if (user.telegramId) {\n        adminLevel = await storage.getAdminLevel(user.telegramId);\n      }\n      \n      res.json({ ...user, currentAdminLevel: adminLevel });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Bot configuration routes\n  app.post(\"/api/bot/config\", async (req, res) => {\n    try {\n      const configData = insertBotConfigSchema.parse(req.body);\n      const config = await storage.setBotConfig(configData);\n      res.json(config);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid bot configuration\", error });\n    }\n  });\n\n  app.get(\"/api/bot/config\", async (req, res) => {\n    try {\n      const config = await storage.getBotConfig();\n      if (!config) {\n        return res.status(404).json({ message: \"Bot configuration not found\" });\n      }\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // User stats and referral routes\n  app.get(\"/api/users/:id/stats\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const stats = {\n        referralCount: 0, // This would be calculated from referrals\n        levelProgress: ((user.points % 100) / 100) * 100, // Simple level progress calculation\n        nextLevelPoints: Math.ceil((user.level + 1) * 100), // Next level points needed\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.get(\"/api/users/:id/referral\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const referralData = {\n        referralLink: user.referralCode ? `https://t.me/YourBotName?start=${user.referralCode}` : null,\n        referredCount: 0, // Would be calculated from database\n        referralPoints: user.points || 0,\n        referredUsers: [], // Would be fetched from database\n      };\n      \n      res.json(referralData);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.post(\"/api/users/:id/generate-referral\", async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Generate unique referral code if doesn't exist\n      if (!user.referralCode) {\n        const referralCode = `ref_${userId}_${Date.now()}`;\n        await storage.updateUser(userId, { referralCode });\n      }\n      \n      const updatedUser = await storage.getUser(userId);\n      const referralLink = `https://t.me/YourBotName?start=${updatedUser?.referralCode}`;\n      \n      res.json({ referralLink });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Admin management routes\n  app.post(\"/api/admins\", async (req, res) => {\n    try {\n      const { telegramId, userType, adminLevel } = req.body;\n      \n      // Check if user exists, if not create them as admin\n      let user = await storage.getUserByTelegramId(telegramId);\n      if (!user) {\n        user = await storage.createUser({\n          telegramId,\n          userType,\n          adminLevel: adminLevel || 2,\n          authMethod: \"telegram\"\n        });\n      } else {\n        user = await storage.updateUser(user.id, { \n          userType, \n          adminLevel: adminLevel || 2 \n        });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // Remove admin (convert to regular user)\n  app.delete(\"/api/admins/:telegramId\", async (req, res) => {\n    try {\n      const { telegramId } = req.params;\n      \n      // SECURITY: Prevent removing King Admin\n      if (isKingAdmin(telegramId)) {\n        return res.status(403).json({ \n          message: \"Cannot remove King Admin\",\n          error: \"Security violation: King Admin cannot be removed\"\n        });\n      }\n      \n      const user = await storage.getUserByTelegramId(telegramId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // For admin removal, bypass normal security and directly update\n      // This is a system operation for demoting admins to regular users\n      const [updatedUser] = await db\n        .update(users)\n        .set({ \n          userType: \"regular\",\n          adminLevel: 2, // Regular user level\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, user.id))\n        .returning();\n      \n      console.log(`Admin removed: ${telegramId} converted to regular user`);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Error removing admin:', error);\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n\n\n  // Enhanced raffle management routes\n  app.patch(\"/api/raffles/:id/approve\", async (req, res) => {\n    try {\n      const { levelRequired, adminUserId, reason } = req.body;\n      const raffle = await storage.approveRaffleWithLevel(req.params.id, levelRequired, adminUserId);\n      if (!raffle) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json(raffle);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  app.patch(\"/api/raffles/:id/reject\", async (req, res) => {\n    try {\n      const { reason, restriction, adminUserId } = req.body;\n      const raffle = await storage.rejectRaffle(req.params.id, reason, restriction, adminUserId);\n      if (!raffle) {\n        return res.status(404).json({ message: \"Raffle not found\" });\n      }\n      res.json(raffle);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\", error });\n    }\n  });\n\n  // SECURITY ENDPOINT: Only King Admin can change admin levels\n  app.patch(\"/api/admin/users/:userId/admin-level\", async (req, res) => {\n    // Note: Authentication will be handled differently in production\n    const currentUserTelegramId = getKingAdminId(); // For demo purposes\n    const currentUser = await storage.getUserByTelegramId(currentUserTelegramId);\n    if (!currentUser) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n\n    const { userId } = req.params;\n    const { adminLevel } = req.body;\n\n    // CRITICAL SECURITY: Only King Admin (level 0) can change admin levels\n    if (currentUser.adminLevel !== 0) {\n      console.warn(`SECURITY ALERT: Unauthorized admin level change attempt by ${currentUser.telegramId}`);\n      return res.status(403).json({ \n        error: \"Forbidden: Only King Admin can manage admin levels\",\n        userLevel: currentUser.adminLevel \n      });\n    }\n\n    // Validate input\n    if (typeof adminLevel !== 'number' || adminLevel < 0 || adminLevel > 2) {\n      return res.status(400).json({ error: \"Invalid admin level. Must be 0, 1, or 2\" });\n    }\n\n    try {\n      const updatedUser = await storage.secureAdminLevelChange(\n        currentUser.telegramId!, \n        userId, \n        adminLevel\n      );\n\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found or operation denied\" });\n      }\n\n      res.json({ \n        success: true, \n        user: updatedUser,\n        message: `Admin level changed to ${adminLevel}` \n      });\n    } catch (error) {\n      console.error(\"Error changing admin level:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29281},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type UpsertUser,\n  type Raffle, \n  type InsertRaffle,\n  type SponsorChannel,\n  type InsertSponsorChannel,\n  type UserSeenRaffle,\n  type RaffleParticipant,\n  type BotConfig,\n  type InsertBotConfig,\n  users,\n  raffles,\n  sponsorChannels,\n  userSeenRaffles,\n  raffleParticipants,\n  userSponsorMemberships,\n  botConfig,\n  KING_ADMIN_TELEGRAM_ID,\n  isKingAdmin,\n  getKingAdminId\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, lte, inArray, asc, desc, max, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByTelegramId(telegramId: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getUsersByType(userType: string): Promise<User[]>;\n  updateUserRole(userId: string, newRole: string): Promise<User | undefined>;\n  updateUserLevel(userId: string, newLevel: number): Promise<User | undefined>;\n  isUserAdmin(telegramId: string): Promise<boolean>;\n  \n  // Raffle operations\n  getRaffle(id: string): Promise<Raffle | undefined>;\n  getAllRaffles(): Promise<Raffle[]>;\n  getRafflesByStatus(status: string): Promise<Raffle[]>;\n  getRafflesByLevelAndStatus(maxLevel: number, status: string): Promise<Raffle[]>;\n  createRaffle(raffle: InsertRaffle): Promise<Raffle>;\n  updateRaffle(id: string, updates: Partial<Raffle>): Promise<Raffle | undefined>;\n  getRafflesBySubmitter(submitterId: string): Promise<Raffle[]>;\n  approveRaffleWithLevel(id: string, levelRequired: number, adminUserId: string): Promise<Raffle | undefined>;\n  rejectRaffle(id: string, reason: string, restriction: any, adminUserId: string): Promise<Raffle | undefined>;\n  getTodaysRaffles(userLevel: number): Promise<Raffle[]>;\n  getEndedRaffles(userLevel: number): Promise<Raffle[]>;\n  deleteRaffle(id: string): Promise<boolean>;\n  bulkDeleteRafflesByStatus(status: string): Promise<number>;\n  \n  // Sponsor channel operations\n  getSponsorChannels(): Promise<SponsorChannel[]>;\n  createSponsorChannel(channel: InsertSponsorChannel): Promise<SponsorChannel>;\n  deleteSponsorChannel(id: string): Promise<void>;\n  updateSponsorChannel(id: string, updates: Partial<SponsorChannel>): Promise<SponsorChannel | undefined>;\n  reorderSponsorChannels(channelOrders: { id: string; displayOrder: number }[]): Promise<void>;\n  joinSponsorChannel(userId: string, channelId: string): Promise<{ pointsEarned: number }>;\n  \n  // User interactions\n  markRaffleSeen(userId: string, raffleId: string): Promise<void>;\n  joinRaffle(userId: string, raffleId: string): Promise<void>;\n  hasUserJoinedRaffle(userId: string, raffleId: string): Promise<boolean>;\n  getUserSeenRaffles(userId: string): Promise<string[]>;\n  getUserJoinedRaffles(userId: string): Promise<string[]>;\n  \n  // Admin operations\n  getAdminUsers(): Promise<User[]>;\n  getAdminStats(): Promise<{\n    pendingRaffles: number;\n    approvedRaffles: number;\n    rejectedRaffles: number;\n    totalUsers: number;\n  }>;\n  \n  // User stats\n  getUserStats(userId: string): Promise<{\n    referralCount: number;\n    totalPoints: number;\n    levelProgress: number;\n    nextLevelPoints: number;\n  }>;\n  \n  // Points and referrals\n  addPoints(userId: string, points: number): Promise<void>;\n  updateUserLevelByPoints(userId: string): Promise<void>;\n  \n  // Bot configuration\n  getBotConfig(): Promise<BotConfig | undefined>;\n  setBotConfig(config: InsertBotConfig): Promise<BotConfig>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize sample data if needed in development\n    if (process.env.NODE_ENV === \"development\") {\n      this.initializeSampleData();\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByTelegramId(telegramId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.telegramId, telegramId));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // SECURITY: Admin level protection layer\n    if (userData.telegramId) {\n      const existingUser = await this.getUserByTelegramId(userData.telegramId);\n      \n      // If user exists, protect admin levels from unauthorized changes\n      if (existingUser && existingUser.userType === 'bot_admin') {\n        // CRITICAL SECURITY: King Admin must ALWAYS remain level 0\n        if (isKingAdmin(userData.telegramId)) {\n          userData.adminLevel = 0; // Force King level - NEVER change this\n          userData.userType = \"bot_admin\"; // Force bot_admin type\n        }\n        // Other admins: preserve their existing admin level unless explicitly authorized\n        else if (existingUser.adminLevel !== undefined) {\n          userData.adminLevel = existingUser.adminLevel; // Preserve existing admin level\n        }\n      }\n    }\n    \n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: userData.telegramId ? users.telegramId : users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    // SECURITY: Admin level protection - prevent unauthorized admin level changes\n    const existingUser = await this.getUser(id);\n    if (existingUser && existingUser.userType === 'bot_admin') {\n      // CRITICAL SECURITY: King Admin protection\n      if (existingUser.telegramId && isKingAdmin(existingUser.telegramId)) {\n        // King Admin CANNOT have their admin level or user type changed\n        delete updates.adminLevel;\n        delete updates.userType;\n        // Log security attempt for monitoring\n        console.warn(`SECURITY ALERT: Attempt to modify King Admin ${existingUser.telegramId} blocked`);\n      }\n      // Other bot_admin protection - only allow authorized changes\n      else if ('adminLevel' in updates || 'userType' in updates) {\n        // Only allow admin level changes through specific authorized methods\n        console.warn(`SECURITY ALERT: Attempt to modify admin levels for ${existingUser.telegramId} blocked`);\n        delete updates.adminLevel;\n        delete updates.userType;\n      }\n    }\n    \n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getUsersByType(userType: string): Promise<User[]> {\n    // For bot_admin users, order by createdAt DESC to show newest admins first\n    if (userType === 'bot_admin') {\n      return await db\n        .select()\n        .from(users)\n        .where(eq(users.userType, userType as any))\n        .orderBy(desc(users.createdAt));\n    }\n    \n    // For other user types, keep default ordering\n    return await db.select().from(users).where(eq(users.userType, userType as any));\n  }\n\n  // Raffle operations\n  async getRaffle(id: string): Promise<Raffle | undefined> {\n    const [raffle] = await db.select().from(raffles).where(eq(raffles.id, id));\n    return raffle || undefined;\n  }\n\n  async getAllRaffles(): Promise<any[]> {\n    return await db.select({\n      id: raffles.id,\n      channelId: raffles.channelId,\n      messageId: raffles.messageId,\n      forwardedMessageId: raffles.forwardedMessageId,\n      requestNumber: raffles.requestNumber,\n      prizeType: raffles.prizeType,\n      prizeValue: raffles.prizeValue,\n      requiredChannels: raffles.requiredChannels,\n      raffleDateTime: raffles.raffleDateTime,\n      levelRequired: raffles.levelRequired,\n      submitterId: raffles.submitterId,\n      reviewerId: raffles.reviewerId,\n      status: raffles.status,\n      rejectionReason: raffles.rejectionReason,\n      createdAt: raffles.createdAt,\n      updatedAt: raffles.updatedAt,\n      submitter: {\n        id: users.id,\n        telegramId: users.telegramId,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n      },\n    })\n    .from(raffles)\n    .leftJoin(users, eq(raffles.submitterId, users.id));\n  }\n\n  async getRafflesByStatus(status: string): Promise<any[]> {\n    const query = db.select({\n      id: raffles.id,\n      channelId: raffles.channelId,\n      messageId: raffles.messageId,\n      forwardedMessageId: raffles.forwardedMessageId,\n      requestNumber: raffles.requestNumber,\n      prizeType: raffles.prizeType,\n      prizeValue: raffles.prizeValue,\n      requiredChannels: raffles.requiredChannels,\n      raffleDateTime: raffles.raffleDateTime,\n      levelRequired: raffles.levelRequired,\n      submitterId: raffles.submitterId,\n      reviewerId: raffles.reviewerId,\n      status: raffles.status,\n      rejectionReason: raffles.rejectionReason,\n      createdAt: raffles.createdAt,\n      updatedAt: raffles.updatedAt,\n      submitter: {\n        id: users.id,\n        telegramId: users.telegramId,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n      },\n    })\n    .from(raffles)\n    .leftJoin(users, eq(raffles.submitterId, users.id))\n    .where(eq(raffles.status, status as any));\n\n    // Apply different ordering based on status\n    if (status === 'pending') {\n      // For pending: oldest submissions first (FIFO for fair review)\n      return await query.orderBy(asc(raffles.createdAt));\n    } else if (status === 'approved' || status === 'rejected') {\n      // For approved/rejected: newest decisions first (recent admin actions first)\n      return await query.orderBy(desc(raffles.updatedAt));\n    } else {\n      // Default ordering for any other status\n      return await query.orderBy(desc(raffles.createdAt));\n    }\n  }\n\n  async getRafflesByLevelAndStatus(maxLevel: number, status: string): Promise<Raffle[]> {\n    return await db.select().from(raffles).where(\n      and(\n        lte(raffles.levelRequired, maxLevel),\n        eq(raffles.status, status as any)\n      )\n    );\n  }\n\n  async updateUserRole(userId: string, newRole: string): Promise<User | undefined> {\n    // SECURITY: Only allow role changes through proper admin authorization\n    const existingUser = await this.getUser(userId);\n    \n    if (existingUser && existingUser.telegramId && isKingAdmin(existingUser.telegramId)) {\n      console.warn(`SECURITY ALERT: Attempt to modify King Admin role blocked`);\n      return existingUser; // Return unchanged - King can never change role\n    }\n    \n    // Log all role change attempts for security monitoring\n    console.log(`Admin role change: ${existingUser?.telegramId} -> ${newRole}`);\n    \n    return await this.updateUser(userId, { userType: newRole as any });\n  }\n\n  async updateUserLevel(userId: string, newLevel: number): Promise<User | undefined> {\n    // SECURITY NOTE: This is for user progression levels, NOT admin levels\n    // Admin levels (adminLevel) are protected separately\n    return await this.updateUser(userId, { level: newLevel });\n  }\n\n  async approveRaffleWithLevel(id: string, levelRequired: number, adminUserId: string): Promise<Raffle | undefined> {\n    return await this.updateRaffle(id, { \n      status: \"approved\" as any, \n      levelRequired,\n      reviewerId: adminUserId\n    });\n  }\n\n  async rejectRaffle(id: string, reason: string, restriction: any, adminUserId: string): Promise<Raffle | undefined> {\n    const updates: any = { \n      status: \"rejected\" as any, \n      rejectionReason: reason,\n      reviewerId: adminUserId\n    };\n\n    // Handle user restriction if specified\n    if (restriction.type !== \"none\") {\n      const raffle = await this.getRaffle(id);\n      if (raffle?.submitterId) {\n        const userUpdates: any = { isRestricted: true, restrictionReason: reason };\n        \n        if (restriction.type === \"temporary\" && restriction.endDate) {\n          userUpdates.restrictionStart = new Date();\n          userUpdates.restrictionEnd = new Date(restriction.endDate);\n        } else if (restriction.type === \"permanent\") {\n          userUpdates.restrictionStart = new Date();\n          userUpdates.restrictionEnd = null;\n        }\n        \n        await this.updateUser(raffle.submitterId, userUpdates);\n      }\n    }\n\n    return await this.updateRaffle(id, updates);\n  }\n\n  async getTodaysRaffles(userLevel: number): Promise<Raffle[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return await db.select().from(raffles).where(\n      and(\n        lte(raffles.levelRequired, userLevel),\n        eq(raffles.status, \"approved\" as any),\n        lte(raffles.raffleDateTime, tomorrow)\n      )\n    );\n  }\n\n  async getEndedRaffles(userLevel: number): Promise<Raffle[]> {\n    const now = new Date();\n    \n    return await db.select().from(raffles).where(\n      and(\n        lte(raffles.levelRequired, userLevel),\n        eq(raffles.status, \"approved\" as any),\n        lte(raffles.raffleDateTime, now)\n      )\n    );\n  }\n\n  async createRaffle(raffle: InsertRaffle): Promise<Raffle> {\n    // محاسبه شماره درخواست بعدی برای کل سیستم\n    const allRaffles = await db.select({ requestNumber: raffles.requestNumber })\n      .from(raffles)\n      .orderBy(raffles.requestNumber);\n    \n    const nextRequestNumber = allRaffles.length > 0 \n      ? Math.max(...allRaffles.map(r => r.requestNumber)) + 1 \n      : 1;\n\n    const raffleWithRequestNumber = {\n      ...raffle,\n      requestNumber: nextRequestNumber\n    };\n\n    const [newRaffle] = await db.insert(raffles).values(raffleWithRequestNumber).returning();\n    return newRaffle;\n  }\n\n  async updateRaffle(id: string, updates: Partial<Raffle>): Promise<Raffle | undefined> {\n    const [raffle] = await db\n      .update(raffles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(raffles.id, id))\n      .returning();\n    return raffle || undefined;\n  }\n\n  async getRafflesBySubmitter(submitterId: string): Promise<any[]> {\n    return await db.select({\n      id: raffles.id,\n      channelId: raffles.channelId,\n      messageId: raffles.messageId,\n      forwardedMessageId: raffles.forwardedMessageId,\n      requestNumber: raffles.requestNumber,\n      prizeType: raffles.prizeType,\n      prizeValue: raffles.prizeValue,\n      requiredChannels: raffles.requiredChannels,\n      raffleDateTime: raffles.raffleDateTime,\n      levelRequired: raffles.levelRequired,\n      submitterId: raffles.submitterId,\n      reviewerId: raffles.reviewerId,\n      status: raffles.status,\n      rejectionReason: raffles.rejectionReason,\n      createdAt: raffles.createdAt,\n      updatedAt: raffles.updatedAt,\n      submitter: {\n        id: users.id,\n        telegramId: users.telegramId,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        username: users.username,\n      },\n    })\n    .from(raffles)\n    .leftJoin(users, eq(raffles.submitterId, users.id))\n    .where(eq(raffles.submitterId, submitterId));\n  }\n\n  // Sponsor channel operations\n  async getSponsorChannels(): Promise<SponsorChannel[]> {\n    // Order by displayOrder first (for custom admin ordering), then by newest first (createdAt DESC)\n    return await db.select()\n      .from(sponsorChannels)\n      .where(eq(sponsorChannels.isActive, true))\n      .orderBy(desc(sponsorChannels.displayOrder), desc(sponsorChannels.createdAt));\n  }\n\n  async createSponsorChannel(channel: InsertSponsorChannel): Promise<SponsorChannel> {\n    // Get the highest displayOrder and increment it for new channels\n    const maxOrderResult = await db.select({ maxOrder: max(sponsorChannels.displayOrder) })\n      .from(sponsorChannels)\n      .where(eq(sponsorChannels.isActive, true));\n    \n    const nextOrder = (maxOrderResult[0]?.maxOrder || 0) + 1;\n    \n    const [newChannel] = await db.insert(sponsorChannels).values({\n      channelId: channel.channelId!,\n      channelUsername: channel.channelUsername,\n      channelName: channel.channelName,\n      channelUrl: channel.channelUrl,\n      description: channel.description,\n      pointsReward: channel.pointsReward,\n      isSpecial: channel.isSpecial,\n      displayOrder: nextOrder\n    }).returning();\n    return newChannel;\n  }\n\n  async deleteSponsorChannel(id: string): Promise<void> {\n    await db.update(sponsorChannels)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(sponsorChannels.id, id));\n  }\n\n  async updateSponsorChannel(id: string, updates: Partial<SponsorChannel>): Promise<SponsorChannel | undefined> {\n    const [updatedChannel] = await db\n      .update(sponsorChannels)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(sponsorChannels.id, id))\n      .returning();\n    return updatedChannel;\n  }\n\n  async reorderSponsorChannels(channelOrders: { id: string; displayOrder: number }[]): Promise<void> {\n    // Batch update the display order for multiple channels (for drag & drop)\n    for (const { id, displayOrder } of channelOrders) {\n      await db.update(sponsorChannels)\n        .set({ displayOrder, updatedAt: new Date() })\n        .where(eq(sponsorChannels.id, id));\n    }\n  }\n\n  // User interactions\n  async markRaffleSeen(userId: string, raffleId: string): Promise<void> {\n    await db.insert(userSeenRaffles).values({\n      userId,\n      raffleId,\n      seenAt: new Date()\n    }).onConflictDoNothing();\n  }\n\n  async joinRaffle(userId: string, raffleId: string): Promise<void> {\n    await db.insert(raffleParticipants).values({\n      userId,\n      raffleId,\n      joinedAt: new Date()\n    }).onConflictDoNothing();\n  }\n\n  async hasUserJoinedRaffle(userId: string, raffleId: string): Promise<boolean> {\n    const [participant] = await db\n      .select()\n      .from(raffleParticipants)\n      .where(and(\n        eq(raffleParticipants.userId, userId),\n        eq(raffleParticipants.raffleId, raffleId)\n      ));\n    return !!participant;\n  }\n\n  async getUserSeenRaffles(userId: string): Promise<string[]> {\n    const seen = await db\n      .select({ raffleId: userSeenRaffles.raffleId })\n      .from(userSeenRaffles)\n      .where(eq(userSeenRaffles.userId, userId));\n    return seen.map(s => s.raffleId);\n  }\n\n  async getUserJoinedRaffles(userId: string): Promise<string[]> {\n    const joined = await db\n      .select({ raffleId: raffleParticipants.raffleId })\n      .from(raffleParticipants)\n      .where(eq(raffleParticipants.userId, userId));\n    return joined.map(j => j.raffleId);\n  }\n\n  // Points and referrals\n  async addPoints(userId: string, points: number): Promise<void> {\n    const user = await this.getUser(userId);\n    if (user) {\n      await this.updateUser(userId, { points: user.points + points });\n      await this.updateUserLevelByPoints(userId);\n    }\n  }\n\n  async updateUserLevelByPoints(userId: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (user) {\n      // Level calculation: 1000 points per level\n      const newLevel = Math.floor(user.points / 1000) + 1;\n      if (newLevel !== user.level) {\n        await this.updateUser(userId, { level: newLevel });\n      }\n    }\n  }\n\n  // Missing methods implementation\n  async joinSponsorChannel(userId: string, channelId: string): Promise<{ pointsEarned: number }> {\n    // Check if already joined\n    const existing = await db\n      .select()\n      .from(userSponsorMemberships)\n      .where(and(\n        eq(userSponsorMemberships.userId, userId),\n        eq(userSponsorMemberships.channelId, channelId)\n      ));\n    \n    if (existing.length > 0) {\n      return { pointsEarned: 0 };\n    }\n    \n    // Get channel info for points\n    const channel = await this.getSponsorChannels();\n    const targetChannel = channel.find(c => c.id === channelId);\n    const pointsEarned = targetChannel?.pointsReward || 100;\n    \n    // Add membership and points\n    await db.insert(userSponsorMemberships).values({\n      userId,\n      channelId,\n      pointsEarned\n    });\n    \n    await this.addPoints(userId, pointsEarned);\n    \n    return { pointsEarned };\n  }\n\n  async getAdminUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.userType, 'bot_admin'));\n  }\n\n  async getAdminStats(): Promise<{\n    pendingRaffles: number;\n    approvedRaffles: number;\n    rejectedRaffles: number;\n    totalUsers: number;\n  }> {\n    const [pending, approved, rejected, total] = await Promise.all([\n      db.select().from(raffles).where(eq(raffles.status, 'pending')),\n      db.select().from(raffles).where(eq(raffles.status, 'approved')), \n      db.select().from(raffles).where(eq(raffles.status, 'rejected')),\n      db.select().from(users)\n    ]);\n    \n    return {\n      pendingRaffles: pending.length,\n      approvedRaffles: approved.length,\n      rejectedRaffles: rejected.length,\n      totalUsers: total.length\n    };\n  }\n\n  async getUserStats(userId: string): Promise<{\n    referralCount: number;\n    totalPoints: number;\n    levelProgress: number;\n    nextLevelPoints: number;\n  }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return {\n        referralCount: 0,\n        totalPoints: 0,\n        levelProgress: 0,\n        nextLevelPoints: 100\n      };\n    }\n    \n    const referrals = await db.select().from(users).where(eq(users.referrerId, userId));\n    \n    // Calculate next level points\n    const currentPoints = user.points;\n    const currentLevel = user.level;\n    let nextLevelPoints = 100;\n    \n    if (currentLevel === 1) nextLevelPoints = 100;\n    else if (currentLevel === 2) nextLevelPoints = 200;\n    else if (currentLevel === 3) nextLevelPoints = 500;\n    else if (currentLevel === 4) nextLevelPoints = 1000;\n    else nextLevelPoints = 2000;\n    \n    const progress = Math.min(100, (currentPoints / nextLevelPoints) * 100);\n    \n    return {\n      referralCount: referrals.length,\n      totalPoints: currentPoints,\n      levelProgress: progress,\n      nextLevelPoints: nextLevelPoints - currentPoints\n    };\n  }\n\n  // Bot configuration\n  async getBotConfig(): Promise<BotConfig | undefined> {\n    const [config] = await db.select().from(botConfig).where(eq(botConfig.isActive, true));\n    return config || undefined;\n  }\n\n  async setBotConfig(config: InsertBotConfig): Promise<BotConfig> {\n    // Deactivate all existing configs\n    await db.update(botConfig).set({ isActive: false });\n    \n    // Insert new config\n    const [newConfig] = await db.insert(botConfig).values({\n      ...config,\n      isActive: true\n    }).returning();\n    return newConfig;\n  }\n\n  // User sponsor membership methods\n  async getUserSponsorMemberships(userId: string): Promise<any[]> {\n    return await db\n      .select({\n        channelId: userSponsorMemberships.channelId,\n        isMember: userSponsorMemberships.isMember,\n        pointsEarned: userSponsorMemberships.pointsEarned,\n        joinedAt: userSponsorMemberships.joinedAt,\n        leftAt: userSponsorMemberships.leftAt,\n        lastChecked: userSponsorMemberships.lastChecked,\n        channelName: sponsorChannels.channelName,\n        channelUrl: sponsorChannels.channelUrl,\n        pointsReward: sponsorChannels.pointsReward\n      })\n      .from(userSponsorMemberships)\n      .leftJoin(sponsorChannels, eq(userSponsorMemberships.channelId, sponsorChannels.channelId))\n      .where(eq(userSponsorMemberships.userId, userId));\n  }\n\n  async getAvailableSponsorChannelsForUser(userId: string): Promise<any[]> {\n    const allChannels = await this.getSponsorChannels();\n    const userMemberships = await this.getUserSponsorMemberships(userId);\n    \n    const membershipMap = new Map(\n      userMemberships.map(m => [m.channelId, m])\n    );\n\n    return allChannels.map(channel => ({\n      ...channel,\n      membership: membershipMap.get(channel.channelId) || null,\n      isMember: membershipMap.get(channel.channelId)?.isMember || false\n    }));\n  }\n\n  // Admin level management (keeping only one version)\n  async secureAdminLevelChangeV1(currentUserTelegramId: string, targetUserId: string, newAdminLevel: number): Promise<any> {\n    if (!isKingAdmin(currentUserTelegramId)) {\n      throw new Error(\"Unauthorized: Only King Admin can change admin levels\");\n    }\n    return await this.updateUser(targetUserId, { adminLevel: newAdminLevel });\n  }\n\n  // User channel membership methods for Telegram bot integration\n  async updateUserChannelMembership(\n    userId: string,\n    channelId: string,\n    isMember: boolean,\n    pointsEarned: number = 0\n  ): Promise<any> {\n    // Check if membership record exists\n    const existing = await db\n      .select()\n      .from(userSponsorMemberships)\n      .where(and(\n        eq(userSponsorMemberships.userId, userId),\n        eq(userSponsorMemberships.channelId, channelId)\n      ));\n\n    const membershipData = {\n      userId,\n      channelId,\n      isMember,\n      pointsEarned: existing.length > 0 ? existing[0].pointsEarned + pointsEarned : pointsEarned,\n      lastChecked: new Date(),\n      updatedAt: new Date(),\n      ...(isMember ? { joinedAt: new Date() } : { leftAt: new Date() })\n    };\n\n    if (existing.length > 0) {\n      // Update existing membership\n      const [updated] = await db\n        .update(userSponsorMemberships)\n        .set(membershipData)\n        .where(and(\n          eq(userSponsorMemberships.userId, userId),\n          eq(userSponsorMemberships.channelId, channelId)\n        ))\n        .returning();\n      return updated;\n    } else {\n      // Create new membership record\n      const [created] = await db\n        .insert(userSponsorMemberships)\n        .values(membershipData)\n        .returning();\n      return created;\n    }\n  }\n\n  // Update sponsor channel bot access status\n  async updateSponsorChannelBotAccess(channelId: string, hasAccess: boolean): Promise<void> {\n    await db\n      .update(sponsorChannels)\n      .set({ \n        botHasAccess: hasAccess,\n        lastAccessCheck: new Date()\n      })\n      .where(eq(sponsorChannels.channelId, channelId));\n  }\n\n  // Get all users (for bulk membership checks)\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Helper method to check if user is admin based on Telegram ID\n  async isUserAdmin(telegramId: string): Promise<boolean> {\n    try {\n      // SECURITY: King Admin is always admin regardless of database state\n      if (isKingAdmin(telegramId)) {\n        return true;\n      }\n      \n      const user = await this.getUserByTelegramId(telegramId);\n      return user ? (user.userType === 'bot_admin') : false;\n    } catch (error) {\n      console.error('Error checking admin status:', error);\n      // Fallback - only the King Admin (NO environment override)\n      return isKingAdmin(telegramId);\n    }\n  }\n\n  // Check if user is King admin (highest level) - NO environment override allowed\n  async isUserKing(telegramId: string): Promise<boolean> {\n    return isKingAdmin(telegramId);\n  }\n\n  // ADMIN MANAGEMENT: Update database trigger with current King Admin ID\n  async updateDatabaseTriggerForKingAdmin(): Promise<void> {\n    try {\n      // Update trigger function with current King Admin ID\n      const kingAdminId = getKingAdminId();\n      \n      // Protection trigger for existing King Admin\n      await db.execute(sql`\n        CREATE OR REPLACE FUNCTION protect_king_admin()\n        RETURNS TRIGGER AS $$\n        DECLARE\n          king_admin_id TEXT := ${kingAdminId};\n        BEGIN\n          IF OLD.telegram_id = king_admin_id THEN\n            NEW.admin_level = 0;\n            NEW.user_type = 'bot_admin';\n            RAISE WARNING 'SECURITY: King Admin protection triggered for ID % - forced admin_level=0, user_type=bot_admin', king_admin_id;\n          END IF;\n          RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;\n      `);\n      \n      // Anti-bypass trigger to prevent multiple King Admins\n      await db.execute(sql`\n        CREATE OR REPLACE FUNCTION prevent_king_admin_bypass()\n        RETURNS TRIGGER AS $$\n        DECLARE\n          king_admin_id TEXT := ${kingAdminId};\n        BEGIN\n          -- Prevent any attempt to create another admin_level 0 user\n          IF NEW.admin_level = 0 AND NEW.telegram_id != king_admin_id THEN\n            RAISE EXCEPTION 'SECURITY VIOLATION: Only one King Admin allowed (telegram_id: %)', king_admin_id;\n          END IF;\n          \n          -- Prevent changing existing King Admin's telegram_id\n          IF OLD.admin_level = 0 AND OLD.telegram_id = king_admin_id AND NEW.telegram_id != king_admin_id THEN\n            RAISE EXCEPTION 'SECURITY VIOLATION: Cannot change King Admin telegram_id';\n          END IF;\n          \n          RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;\n      `);\n      \n      console.log(`Database triggers updated for King Admin: ${kingAdminId}`);\n    } catch (error) {\n      console.error('Error updating database trigger:', error);\n    }\n  }\n\n  // SECURITY METHOD: Only King Admin can promote/demote other admins\n  async secureAdminLevelChange(requesterId: string, targetUserId: string, newAdminLevel: number): Promise<User | undefined> {\n    const requester = await this.getUserByTelegramId(requesterId);\n    \n    // Only King Admin (level 0) can change admin levels\n    if (!requester || requester.adminLevel !== 0) {\n      console.warn(`SECURITY ALERT: Unauthorized admin level change attempt by ${requesterId}`);\n      return undefined;\n    }\n    \n    const targetUser = await this.getUser(targetUserId);\n    if (!targetUser) {\n      return undefined;\n    }\n    \n    // CRITICAL: King Admin cannot be demoted\n    if (targetUser.telegramId && isKingAdmin(targetUser.telegramId)) {\n      console.warn(`SECURITY ALERT: Attempt to modify King Admin level by ${requesterId} blocked`);\n      return targetUser;\n    }\n    \n    // Log security operation\n    console.log(`SECURITY: King Admin ${requesterId} changing admin level for ${targetUser.telegramId}: ${targetUser.adminLevel} -> ${newAdminLevel}`);\n    \n    // Direct database update bypassing normal protections (only for King Admin)\n    const [user] = await db\n      .update(users)\n      .set({ \n        adminLevel: newAdminLevel,\n        userType: newAdminLevel < 2 ? 'bot_admin' : 'regular',\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, targetUserId))\n      .returning();\n    \n    return user || undefined;\n  }\n\n  // Get admin level for a user\n  async getAdminLevel(telegramId: string): Promise<number | null> {\n    try {\n      // Check if user is King first\n      if (await this.isUserKing(telegramId)) {\n        return 0; // King level\n      }\n      \n      const user = await this.getUserByTelegramId(telegramId);\n      if (user && user.userType === 'bot_admin') {\n        return user.adminLevel || 1;\n      }\n      \n      return null; // Not an admin\n    } catch (error) {\n      console.error('Error getting admin level:', error);\n      return null;\n    }\n  }\n\n  // Approve raffle (alternate implementation)\n  async approveRaffleSimple(raffleId: string, level: number): Promise<Raffle> {\n    const [updatedRaffle] = await db.update(raffles)\n      .set({ \n        status: 'approved',\n        levelRequired: level,\n        updatedAt: new Date()\n      })\n      .where(eq(raffles.id, raffleId))\n      .returning();\n    \n    if (!updatedRaffle) {\n      throw new Error('Raffle not found');\n    }\n    \n    return updatedRaffle;\n  }\n\n  // Reject raffle (alternate implementation)\n  async rejectRaffleSimple(raffleId: string, reason?: string): Promise<Raffle> {\n    const [updatedRaffle] = await db.update(raffles)\n      .set({ \n        status: 'rejected',\n        rejectionReason: reason,\n        updatedAt: new Date()\n      })\n      .where(eq(raffles.id, raffleId))\n      .returning();\n    \n    if (!updatedRaffle) {\n      throw new Error('Raffle not found');\n    }\n    \n    return updatedRaffle;\n  }\n\n  private async initializeSampleData() {\n    try {\n      // Check if sample data already exists\n      const existingChannels = await this.getSponsorChannels();\n      if (existingChannels.length > 0) {\n        return; // Sample data already exists\n      }\n\n      // Add sample sponsor channels\n      await this.createSponsorChannel({\n        channelId: \"-1001234567890\",\n        channelName: \"تلگرام فارسی\",\n        channelUrl: \"https://t.me/telegram_farsi\",\n        pointsReward: 100,\n        isSpecial: false\n      });\n\n      await this.createSponsorChannel({\n        channelId: \"-1001234567891\",\n        channelName: \"اخبار فناوری ایران\",\n        channelUrl: \"https://t.me/tech_news_ir\",\n        pointsReward: 150,\n        isSpecial: false\n      });\n\n      // Add sample raffles\n      const now = new Date();\n      const futureDate1 = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 hours from now\n      const futureDate2 = new Date(now.getTime() + 48 * 60 * 60 * 1000); // 48 hours from now\n\n      await this.createRaffle({\n        channelId: \"@raffle_channel\",\n        messageId: \"123\",\n        forwardedMessageId: null,\n        requestNumber: 1,\n\n        prizeType: \"stars\",\n        prizeValue: 100,\n        requiredChannels: [\"@telegram_farsi\", \"@tech_news_ir\"],\n        raffleDateTime: futureDate1,\n        levelRequired: 1,\n        submitterId: \"admin\",\n      });\n\n      await this.createRaffle({\n        channelId: \"@premium_channel\",\n        messageId: \"456\",\n        forwardedMessageId: null,\n        requestNumber: 2,\n\n        prizeType: \"premium\",\n        prizeValue: 3,\n        requiredChannels: [\"@telegram_farsi\"],\n        raffleDateTime: futureDate2,\n        levelRequired: 2,\n        submitterId: \"admin\",\n      });\n\n    } catch (error) {\n      console.error(\"Error initializing sample data:\", error);\n    }\n  }\n\n  async deleteRaffle(id: string): Promise<boolean> {\n    try {\n      console.log(`Attempting to delete raffle with id: ${id}`);\n      \n      // First check if raffle exists\n      const existingRaffle = await this.getRaffle(id);\n      console.log(`Existing raffle:`, existingRaffle);\n      \n      if (!existingRaffle) {\n        console.log(`Raffle with id ${id} not found`);\n        return false;\n      }\n      \n      // Delete related data first to maintain referential integrity\n      console.log(`Deleting related data for raffle ${id}...`);\n      \n      // Delete participants\n      const participantsDeleteResult = await db.delete(raffleParticipants).where(eq(raffleParticipants.raffleId, id));\n      console.log(`Deleted ${participantsDeleteResult.rowCount || 0} participants`);\n      \n      // Delete seen records\n      const seenDeleteResult = await db.delete(userSeenRaffles).where(eq(userSeenRaffles.raffleId, id));\n      console.log(`Deleted ${seenDeleteResult.rowCount || 0} seen records`);\n      \n      // Finally delete the raffle itself\n      const result = await db.delete(raffles).where(eq(raffles.id, id));\n      console.log(`Delete result:`, result);\n      \n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error(\"Delete raffle error:\", error);\n      return false;\n    }\n  }\n\n  async bulkDeleteRafflesByStatus(status: string): Promise<number> {\n    try {\n      console.log(`Attempting to bulk delete raffles with status: ${status}`);\n      \n      // First, check how many raffles exist with this status\n      const existingRaffles = await db.select().from(raffles).where(eq(raffles.status, status as any));\n      console.log(`Found ${existingRaffles.length} raffles with status ${status}`);\n      \n      if (existingRaffles.length === 0) {\n        return 0;\n      }\n      \n      // Get all raffle IDs to delete related data\n      const raffleIds = existingRaffles.map(raffle => raffle.id);\n      console.log(`Deleting related data for ${raffleIds.length} raffles...`);\n      \n      // Delete participants for all raffles\n      const participantsDeleteResult = await db.delete(raffleParticipants)\n        .where(inArray(raffleParticipants.raffleId, raffleIds));\n      console.log(`Deleted ${participantsDeleteResult.rowCount || 0} participants`);\n      \n      // Delete seen records for all raffles\n      const seenDeleteResult = await db.delete(userSeenRaffles)\n        .where(inArray(userSeenRaffles.raffleId, raffleIds));\n      console.log(`Deleted ${seenDeleteResult.rowCount || 0} seen records`);\n      \n      // Finally delete all raffles\n      const result = await db.delete(raffles).where(eq(raffles.status, status as any));\n      console.log(`Delete result:`, result);\n      \n      return result.rowCount || existingRaffles.length;\n    } catch (error) {\n      console.error(\"Bulk delete raffles error:\", error);\n      return 0;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":37074},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// 👑 KING ADMIN CONFIGURATION - Change this ID to transfer King Admin privileges\nexport const KING_ADMIN_TELEGRAM_ID = \"128787773\";\n\n// You can change the above constant to any Telegram ID to make that user the new King Admin\n// Example: export const KING_ADMIN_TELEGRAM_ID = \"YOUR_NEW_TELEGRAM_ID_HERE\";\n\n// 🔧 HELPER FUNCTIONS for King Admin checks (always use these instead of hardcoding)\nexport const isKingAdmin = (telegramId: string): boolean => {\n  return telegramId === KING_ADMIN_TELEGRAM_ID;\n};\n\nexport const getKingAdminId = (): string => {\n  return KING_ADMIN_TELEGRAM_ID;\n};\n\n// 📝 IMPORTANT: Always use these helper functions instead of direct string comparisons\n// ✅ CORRECT: isKingAdmin(userTelegramId)\n// ❌ WRONG: userTelegramId === \"128787773\"\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Telegram authentication fields\n  telegramId: varchar(\"telegram_id\").unique(), // Optional for non-Telegram users\n  username: text(\"username\"),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  // Gmail authentication fields\n  email: varchar(\"email\").unique(), // Optional for Telegram-only users\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Authentication method tracking\n  authMethod: text(\"auth_method\", { enum: [\"telegram\", \"gmail\", \"guest\"] }).notNull().default(\"telegram\"),\n  // User management\n  userType: text(\"user_type\", { enum: [\"bot_admin\", \"regular\"] }).notNull().default(\"regular\"),\n  adminLevel: integer(\"admin_level\").default(1), // 0 = King 👑, 1 = Level 1 Admin, 2 = Level 2 Admin (limited)\n  points: integer(\"points\").notNull().default(0),\n  level: integer(\"level\").notNull().default(1), // سطح کاربر برای دسترسی به قرعه‌کشی‌ها\n  referralCode: varchar(\"referral_code\").unique(),\n  referrerId: varchar(\"referrer_id\"),\n  referralReward: integer(\"referral_reward\").notNull().default(50), // امتیاز دعوت دوستان\n  isSponsorMember: boolean(\"is_sponsor_member\").notNull().default(false),\n  isRestricted: boolean(\"is_restricted\").notNull().default(false),\n  restrictionStart: timestamp(\"restriction_start\"),\n  restrictionEnd: timestamp(\"restriction_end\"),\n  restrictionReason: text(\"restriction_reason\"),\n  submissionCount: integer(\"submission_count\").notNull().default(0),\n  lastSubmissionAt: timestamp(\"last_submission_at\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bot configuration table\nexport const botConfig = pgTable(\"bot_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  botToken: text(\"bot_token\").notNull(),\n  botUsername: text(\"bot_username\").notNull(),\n  startLink: text(\"start_link\").notNull(), // Deep link to start bot\n  adminTelegramIds: text(\"admin_telegram_ids\").array().notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const raffles = pgTable(\"raffles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  channelId: varchar(\"channel_id\").notNull(), // Channel ID from forwarded message\n  messageId: varchar(\"message_id\").notNull(), // Original message ID from channel\n  forwardedMessageId: varchar(\"forwarded_message_id\"), // Forwarded message ID in bot\n  requestNumber: integer(\"request_number\").notNull(), // شماره درخواست برای هر کاربر\n  prizeType: text(\"prize_type\", { enum: [\"stars\", \"premium\", \"mixed\"] }).notNull(),\n  prizeValue: integer(\"prize_value\"), // Number of stars or months of premium\n  requiredChannels: text(\"required_channels\").array().notNull(), // Array of channel IDs required to join\n  raffleDateTime: timestamp(\"raffle_datetime\").notNull(),\n  levelRequired: integer(\"level_required\").notNull().default(1),\n  status: text(\"status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).notNull().default(\"pending\"),\n  submitterId: varchar(\"submitter_id\").notNull(), // User ID who submitted the raffle\n  reviewerId: varchar(\"reviewer_id\"), // Admin who reviewed the raffle\n  rejectionReason: text(\"rejection_reason\"),\n  participantCount: integer(\"participant_count\").notNull().default(0),\n  version: integer(\"version\").notNull().default(1), // Version tracking for edits\n  originalData: jsonb(\"original_data\"), // Store original submission for version history\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userSeenRaffles = pgTable(\"user_seen_raffles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  raffleId: varchar(\"raffle_id\").notNull(),\n  seenAt: timestamp(\"seen_at\").defaultNow(),\n});\n\nexport const raffleParticipants = pgTable(\"raffle_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  raffleId: varchar(\"raffle_id\").notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const sponsorChannels = pgTable(\"sponsor_channels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  channelId: varchar(\"channel_id\").notNull().unique(), // Telegram Channel ID (-100xxxxxx)\n  channelUsername: varchar(\"channel_username\"), // @channelname (اختیاری)\n  channelName: text(\"channel_name\").notNull(),\n  channelUrl: text(\"channel_url\").notNull(),\n  description: text(\"description\"),\n  pointsReward: integer(\"points_reward\").notNull().default(100), // امتیاز عضویت در کانال\n  isSpecial: boolean(\"is_special\").notNull().default(false), // کانال ویژه\n  isActive: boolean(\"is_active\").notNull().default(true),\n  displayOrder: integer(\"display_order\").notNull().default(0), // ترتیب نمایش کانال‌ها (قابل تغییر با drag & drop)\n  botHasAccess: boolean(\"bot_has_access\").notNull().default(false), // آیا ربات در کانال ادمین است\n  lastAccessCheck: timestamp(\"last_access_check\"), // آخرین بار چک دسترسی\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User membership in sponsor channels - Enhanced for real-time tracking\nexport const userSponsorMemberships = pgTable(\"user_sponsor_memberships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  channelId: varchar(\"channel_id\").notNull(), // Reference to sponsorChannels.channelId\n  isMember: boolean(\"is_member\").notNull().default(false), // وضعیت فعلی عضویت\n  pointsEarned: integer(\"points_earned\").notNull().default(0),\n  joinedAt: timestamp(\"joined_at\"), // زمان عضویت\n  leftAt: timestamp(\"left_at\"), // زمان ترک کانال\n  lastChecked: timestamp(\"last_checked\").defaultNow(), // آخرین بار چک شده\n  checkCount: integer(\"check_count\").notNull().default(0), // تعداد بار چک شده\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Referral tracking\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").notNull(), // User who shared the referral link\n  referredId: varchar(\"referred_id\").notNull(), // User who joined via referral\n  pointsEarned: integer(\"points_earned\").notNull().default(50),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin action logs\nexport const adminActions = pgTable(\"admin_actions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull(),\n  action: text(\"action\").notNull(), // approve_raffle, reject_raffle, restrict_user, etc.\n  targetType: text(\"target_type\").notNull(), // raffle, user, channel\n  targetId: varchar(\"target_id\").notNull(),\n  details: jsonb(\"details\"), // Additional action details\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  telegramId: true,\n  username: true,\n  firstName: true,\n  lastName: true,\n  email: true,\n  profileImageUrl: true,\n  authMethod: true,\n  userType: true,\n  adminLevel: true,\n  referralCode: true,\n  referrerId: true,\n});\n\n// Upsert user schema for authentication\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  telegramId: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  authMethod: true,\n  userType: true,\n  adminLevel: true,\n});\n\nexport const insertBotConfigSchema = createInsertSchema(botConfig).pick({\n  botToken: true,\n  botUsername: true,\n  startLink: true,\n  adminTelegramIds: true,\n});\n\nexport const insertRaffleSchema = createInsertSchema(raffles).pick({\n  channelId: true,\n  messageId: true,\n  forwardedMessageId: true,\n  requestNumber: true,\n  prizeType: true,\n  prizeValue: true,\n  requiredChannels: true,\n  raffleDateTime: true,\n  levelRequired: true,\n  submitterId: true,\n}).extend({\n  raffleDateTime: z.union([\n    z.string().transform((str) => new Date(str)),\n    z.date()\n  ])\n});\n\nexport const insertSponsorChannelSchema = createInsertSchema(sponsorChannels).pick({\n  channelId: true,\n  channelUsername: true,\n  channelName: true,\n  channelUrl: true,\n  description: true,\n  pointsReward: true,\n  isSpecial: true,\n}).extend({\n  channelId: z.string()\n    .min(1, \"شناسه کانال الزامی است\")\n    .refine((id) => {\n      // Channel ID must start with @ and contain only 0-9, a-z, @, _ with minimum 5 chars after @\n      if (!id.startsWith('@')) return false;\n      const usernamePartLength = id.length - 1; // exclude @\n      if (usernamePartLength < 5) return false;\n      return /^@[0-9a-z_]+$/.test(id);\n    }, \"شناسه کانال باید با @ شروع شود، فقط شامل 0-9، a-z، _ باشد و حداقل 5 کاراکتر بعد از @ داشته باشد\"),\n  channelUrl: z.string()\n    .min(1, \"آدرس کانال الزامی است\")\n    .refine((url) => {\n      return url.startsWith('https://') || url.startsWith('http://');\n    }, \"آدرس کانال باید با https:// یا http:// شروع شود\"),\n});\n\nexport const updateSponsorChannelSchema = createInsertSchema(sponsorChannels).pick({\n  channelId: true,\n  channelUsername: true,\n  channelName: true,\n  channelUrl: true,\n  description: true,\n  pointsReward: true,\n  isSpecial: true,\n  botHasAccess: true,\n}).extend({\n  channelId: z.string()\n    .min(1, \"شناسه کانال الزامی است\")\n    .refine((id) => {\n      // Channel ID must start with @ and contain only 0-9, a-z, @, _ with minimum 5 chars after @\n      if (!id.startsWith('@')) return false;\n      const usernamePartLength = id.length - 1; // exclude @\n      if (usernamePartLength < 5) return false;\n      return /^@[0-9a-z_]+$/.test(id);\n    }, \"شناسه کانال باید با @ شروع شود، فقط شامل 0-9، a-z، _ باشد و حداقل 5 کاراکتر بعد از @ داشته باشد\")\n    .optional(),\n  channelUrl: z.string()\n    .min(1, \"آدرس کانال الزامی است\")\n    .refine((url) => {\n      return url.startsWith('https://') || url.startsWith('http://');\n    }, \"آدرس کانال باید با https:// یا http:// شروع شود\")\n    .optional(),\n}).partial();\n\nexport const insertUserSponsorMembershipSchema = createInsertSchema(userSponsorMemberships).pick({\n  userId: true,\n  channelId: true,\n  isMember: true,\n  pointsEarned: true,\n  joinedAt: true,\n  leftAt: true,\n});\n\nexport const updateUserSponsorMembershipSchema = createInsertSchema(userSponsorMemberships).pick({\n  isMember: true,\n  pointsEarned: true,\n  joinedAt: true,\n  leftAt: true,\n  lastChecked: true,\n  checkCount: true,\n}).partial();\n\nexport const insertReferralSchema = createInsertSchema(referrals).pick({\n  referrerId: true,\n  referredId: true,\n  pointsEarned: true,\n});\n\nexport const insertAdminActionSchema = createInsertSchema(adminActions).pick({\n  adminId: true,\n  action: true,\n  targetType: true,\n  targetId: true,\n  details: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertRaffle = z.infer<typeof insertRaffleSchema>;\nexport type Raffle = typeof raffles.$inferSelect;\nexport type InsertSponsorChannel = z.infer<typeof insertSponsorChannelSchema>;\nexport type SponsorChannel = typeof sponsorChannels.$inferSelect;\nexport type UserSeenRaffle = typeof userSeenRaffles.$inferSelect;\nexport type RaffleParticipant = typeof raffleParticipants.$inferSelect;\nexport type InsertBotConfig = z.infer<typeof insertBotConfigSchema>;\nexport type BotConfig = typeof botConfig.$inferSelect;\nexport type UserSponsorMembership = typeof userSponsorMemberships.$inferSelect;\nexport type Referral = typeof referrals.$inferSelect;\nexport type AdminAction = typeof adminActions.$inferSelect;\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type InsertAdminAction = z.infer<typeof insertAdminActionSchema>;\n","size_bytes":13725},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { usePageTransition } from \"@/hooks/usePageTransition\";\nimport { Header } from \"@/components/header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { TelegramProvider } from \"@/hooks/use-telegram\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { AuthScreen } from \"@/components/auth-screen\";\nimport Home from \"@/pages/home\";\nimport Raffles from \"@/pages/raffles\";\nimport Profile from \"@/pages/profile\";\nimport Admin from \"@/pages/admin\";\nimport BotAdminPage from \"@/pages/bot-admin\";\nimport UserMainPage from \"@/pages/user-main\";\nimport EnhancedUserMainPage from \"@/pages/enhanced-user-main\";\nimport UserTabsMainPage from \"@/pages/user-tabs-main\";\nimport AdminPanel from \"@/pages/admin-panel\";\nimport AdminPanelEnhanced from \"@/pages/admin-panel-enhanced\";\n\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const { transitionClass } = usePageTransition();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-telegram-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram-button mx-auto mb-4\"></div>\n          <p className=\"text-telegram-hint\">در حال بارگذاری...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <AuthScreen />;\n  }\n\n  // Role-based routing\n  const userRole = user?.userType || \"regular\";\n  const adminLevel = user?.adminLevel || 1;\n\n  return (\n    <>\n      <Header />\n      <main className={`main-content ${transitionClass}`}>\n        <Switch>\n          {userRole === \"bot_admin\" && adminLevel === 0 ? (\n            // King Admin (Level 0) - Full admin panel with admin management\n            <>\n              <Route path=\"/\" component={AdminPanel} />\n              <Route path=\"/admin\" component={AdminPanel} />\n              <Route path=\"/profile\" component={Profile} />\n            </>\n          ) : userRole === \"bot_admin\" && adminLevel === 1 ? (\n            // Level 1 admin - Full admin panel but no admin management\n            <>\n              <Route path=\"/\" component={AdminPanel} />\n              <Route path=\"/admin\" component={AdminPanel} />\n              <Route path=\"/profile\" component={Profile} />\n            </>\n          ) : userRole === \"bot_admin\" && adminLevel === 2 ? (\n            // Level 2 admin - Limited admin panel\n            <>\n              <Route path=\"/\" component={AdminPanel} />\n              <Route path=\"/admin\" component={AdminPanel} />\n              <Route path=\"/profile\" component={Profile} />\n            </>\n          ) : (\n            // Regular users (including raffle submission capabilities)\n            <>\n              <Route path=\"/\" component={UserTabsMainPage} />\n              <Route path=\"/raffles\" component={UserTabsMainPage} />\n              <Route path=\"/profile\" component={Profile} />\n              <Route path=\"/history\" component={Profile} />\n            </>\n          )}\n          {/* Fallback 404 route - only shows for invalid URLs */}\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TelegramProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <div className=\"app-container bg-telegram-bg\">\n              <Router />\n              <Toaster />\n            </div>\n          </TooltipProvider>\n        </AuthProvider>\n      </TelegramProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3884},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Modern Theme Variables */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(220 10% 8%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(220 10% 8%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(220 10% 8%);\n  --primary: hsl(213 94% 68%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(220 13% 95%);\n  --secondary-foreground: hsl(220 10% 8%);\n  --muted: hsl(220 13% 95%);\n  --muted-foreground: hsl(220 8% 46%);\n  --accent: hsl(220 13% 95%);\n  --accent-foreground: hsl(220 10% 8%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(220 13% 91%);\n  --input: hsl(220 13% 91%);\n  --ring: hsl(213 94% 68%);\n  \n  /* Modern Telegram Theme */\n  --telegram-blue: hsl(213 94% 68%);\n  --telegram-blue-light: hsl(213 94% 85%);\n  --telegram-blue-dark: hsl(213 94% 55%);\n  --telegram-bg: hsl(0 0% 100%);\n  --telegram-surface: hsl(0 0% 100%);\n  --telegram-surface-variant: hsl(220 13% 98%);\n  --telegram-section-bg: hsl(220 13% 99%);\n  --telegram-divider: hsl(220 13% 91%);\n  --telegram-text: hsl(220 10% 8%);\n  --telegram-text-secondary: hsl(220 8% 46%);\n  --telegram-accent: hsl(213 94% 68%);\n  --telegram-success: hsl(142 76% 36%);\n  --telegram-warning: hsl(38 92% 50%);\n  --telegram-error: hsl(0 84% 60%);\n  --telegram-pending: hsl(43 96% 56%);\n  --telegram-bg-secondary: hsl(220 13% 97%);\n  --telegram-border: hsl(220 13% 91%);\n  \n  /* Enhanced UI Variables */\n  --font-telegram: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n  --radius: 16px;\n  --border-radius-sm: 12px;\n  --border-radius-lg: 20px;\n  --shadow-telegram: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);\n  --shadow-telegram-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-telegram-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  \n  /* Safe area for mobile */\n  --safe-area-inset-top: env(safe-area-inset-top);\n  --safe-area-inset-right: env(safe-area-inset-right);\n  --safe-area-inset-bottom: env(safe-area-inset-bottom);\n  --safe-area-inset-left: env(safe-area-inset-left);\n}\n\n.dark {\n  /* Modern Dark Theme */\n  --background: hsl(220 27% 6%);\n  --foreground: hsl(0 0% 95%);\n  --card: hsl(220 27% 8%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(220 27% 8%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(213 94% 68%);\n  --primary-foreground: hsl(220 27% 6%);\n  --secondary: hsl(220 27% 12%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(220 27% 12%);\n  --muted-foreground: hsl(220 8% 65%);\n  --accent: hsl(220 27% 12%);\n  --accent-foreground: hsl(0 0% 95%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 95%);\n  --border: hsl(220 27% 18%);\n  --input: hsl(220 27% 18%);\n  --ring: hsl(213 94% 68%);\n  \n  /* Modern Dark Telegram Theme */\n  --telegram-blue: hsl(213 94% 68%);\n  --telegram-blue-light: hsl(213 94% 75%);\n  --telegram-blue-dark: hsl(213 94% 55%);\n  --telegram-bg: hsl(220 27% 6%);\n  --telegram-surface: hsl(220 27% 8%);\n  --telegram-surface-variant: hsl(220 27% 12%);\n  --telegram-section-bg: hsl(220 27% 9%);\n  --telegram-divider: hsl(220 27% 18%);\n  --telegram-text: hsl(0 0% 95%);\n  --telegram-text-secondary: hsl(220 8% 65%);\n  --telegram-accent: hsl(213 94% 68%);\n  --telegram-success: hsl(142 76% 36%);\n  --telegram-warning: hsl(38 92% 50%);\n  --telegram-error: hsl(0 84% 60%);\n  --telegram-pending: hsl(43 96% 56%);\n  --telegram-bg-dark: hsl(220 27% 10%);\n  --telegram-bg-secondary: hsl(220 27% 12%);\n  --telegram-border-dark: hsl(220 27% 18%);\n  --telegram-text-secondary-dark: hsl(220 8% 65%);\n  --telegram-dark: hsl(0 0% 95%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, #root {\n    direction: rtl;\n    height: 100vh;\n    height: -webkit-fill-available;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    box-sizing: border-box;\n  }\n\n  body {\n    @apply antialiased;\n    font-family: var(--font-telegram);\n    background-color: var(--telegram-bg);\n    color: var(--telegram-text);\n    line-height: 1.6;\n    height: 100vh;\n    height: -webkit-fill-available;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    box-sizing: border-box;\n    width: 100%;\n  }\n\n  .app-container {\n    height: 100vh;\n    height: -webkit-fill-available;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  .main-content {\n    flex: 1;\n    width: 100%;\n    height: calc(100vh - 64px);\n    overflow-y: auto;\n    overflow-x: hidden;\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n\n  header {\n    height: 64px;\n    flex-shrink: 0;\n    box-sizing: border-box;\n  }\n\n  .bottom-navigation {\n    display: none;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  /* Page Transition Animations */\n  @keyframes slideInRight {\n    from {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes slideInLeft {\n    from {\n      opacity: 0;\n      transform: translateX(-30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes slideInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  .page-transition {\n    animation: slideInRight 0.3s ease-out;\n  }\n\n  .page-transition-up {\n    animation: slideInUp 0.4s ease-out;\n  }\n\n  .page-transition-fade {\n    animation: fadeIn 0.25s ease-out;\n  }\n\n  .page-transition-scale {\n    animation: scaleIn 0.3s ease-out;\n  }\n\n  /* Tab content transitions */\n  .tab-content-enter {\n    animation: slideInUp 0.3s ease-out;\n  }\n\n  /* Card hover transitions */\n  .card-hover-transition {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .card-hover-transition:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n  }\n\n  /* Button press animation */\n  .btn-press {\n    transition: transform 0.1s ease-in-out;\n  }\n\n  .btn-press:active {\n    transform: scale(0.98);\n  }\n\n  /* Enhanced floating support button animation */\n  @keyframes slideUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px) scale(0.9);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n  \n  .animate-slideUp {\n    animation: slideUp 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;\n    animation-delay: 1s;\n    opacity: 0;\n  }\n\n  /* Responsive tab scrolling */\n  .tab-scroll {\n    overflow-x: auto;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n  \n  .tab-scroll::-webkit-scrollbar {\n    display: none;\n  }\n\n  /* Tab responsive improvements */\n  .tabs-list-responsive {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    width: 100%;\n    min-width: 100%;\n    gap: 0;\n  }\n\n  .tabs-list-responsive [data-state=\"active\"] {\n    background-color: var(--telegram-blue);\n    color: white;\n  }\n\n  .tabs-trigger-responsive {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n    padding: 8px 4px;\n    min-height: 60px;\n    font-size: 10px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  @media (min-width: 480px) {\n    .tabs-trigger-responsive {\n      flex-direction: row;\n      gap: 6px;\n      font-size: 12px;\n      padding: 10px 8px;\n    }\n  }\n\n  @media (min-width: 768px) {\n    .tabs-trigger-responsive {\n      font-size: 14px;\n      padding: 12px 16px;\n    }\n  }\n\n  /* Filter section responsive */\n  .filter-tabs-responsive {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 4px;\n    width: 100%;\n  }\n\n  @media (min-width: 640px) {\n    .filter-tabs-responsive {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n\n  /* Mobile-first responsive grid */\n  .responsive-grid {\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: 1fr;\n  }\n\n  @media (min-width: 640px) {\n    .responsive-grid {\n      grid-template-columns: repeat(2, 1fr);\n    }\n  }\n\n  @media (min-width: 1024px) {\n    .responsive-grid {\n      grid-template-columns: repeat(3, 1fr);\n    }\n  }\n}\n\n@layer utilities {\n  .font-telegram {\n    font-family: var(--font-telegram);\n  }\n  \n  /* Color utilities */\n  .bg-telegram-blue {\n    background-color: var(--telegram-blue);\n  }\n  \n  .bg-telegram-blue-light {\n    background-color: var(--telegram-blue-light);\n  }\n  \n  .bg-telegram-bg {\n    background-color: var(--telegram-bg);\n  }\n  \n  .bg-telegram-surface {\n    background-color: var(--telegram-surface);\n  }\n  \n  .bg-telegram-surface-variant {\n    background-color: var(--telegram-surface-variant);\n  }\n  \n  .bg-telegram-section {\n    background-color: var(--telegram-section-bg);\n  }\n  \n  .bg-telegram-success {\n    background-color: var(--telegram-success);\n  }\n  \n  .bg-telegram-warning {\n    background-color: var(--telegram-warning);\n  }\n  \n  .bg-telegram-error {\n    background-color: var(--telegram-error);\n  }\n  \n  .bg-telegram-pending {\n    background-color: var(--telegram-pending);\n  }\n  \n  .text-telegram-blue {\n    color: var(--telegram-blue);\n  }\n  \n  .text-telegram {\n    color: var(--telegram-text);\n  }\n  \n  .text-telegram-secondary {\n    color: var(--telegram-text-secondary);\n  }\n  \n  .text-telegram-success {\n    color: var(--telegram-success);\n  }\n  \n  .text-telegram-warning {\n    color: var(--telegram-warning);\n  }\n  \n  .text-telegram-error {\n    color: var(--telegram-error);\n  }\n  \n  .border-telegram {\n    border-color: var(--telegram-divider);\n  }\n  \n  .border-telegram-blue {\n    border-color: var(--telegram-blue);\n  }\n  \n  /* Enhanced shadows */\n  .shadow-telegram {\n    box-shadow: var(--shadow-telegram);\n  }\n  \n  .shadow-telegram-lg {\n    box-shadow: var(--shadow-telegram-lg);\n  }\n  \n  .shadow-telegram-xl {\n    box-shadow: var(--shadow-telegram-xl);\n  }\n  \n  /* Modern border radius */\n  .rounded-telegram {\n    border-radius: var(--radius);\n  }\n  \n  .rounded-telegram-sm {\n    border-radius: var(--border-radius-sm);\n  }\n  \n  .rounded-telegram-lg {\n    border-radius: var(--border-radius-lg);\n  }\n  \n  /* Responsive utilities */\n  .safe-area-bottom {\n    padding-bottom: calc(1rem + var(--safe-area-inset-bottom));\n  }\n  \n  .safe-area-top {\n    padding-top: var(--safe-area-inset-top);\n  }\n  \n  /* Modern table styles */\n  .table-modern {\n    @apply border-collapse border-spacing-0 w-full;\n  }\n  \n  .table-modern th {\n    @apply bg-telegram-surface-variant border-b border-telegram px-4 py-3 text-right font-medium;\n    color: var(--telegram-text);\n  }\n  \n  .table-modern td {\n    @apply border-b border-telegram px-4 py-3;\n    color: var(--telegram-text);\n  }\n  \n  .table-modern tbody tr:hover {\n    @apply bg-telegram-surface-variant;\n    opacity: 0.7;\n  }\n  \n  .table-modern tbody tr:nth-child(even) {\n    @apply bg-telegram-surface-variant;\n    opacity: 0.3;\n  }\n  \n  /* Modern form styles */\n  .form-modern .form-field {\n    @apply space-y-2;\n  }\n  \n  .form-modern .form-label {\n    @apply text-sm font-medium text-telegram;\n  }\n  \n  .form-modern .form-input {\n    @apply w-full px-3 py-2 border bg-telegram-surface text-telegram focus:outline-none focus:border-transparent;\n    border-color: var(--telegram-divider);\n    border-radius: var(--radius);\n  }\n  \n  .form-modern .form-input:focus {\n    border-color: var(--telegram-blue);\n    box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);\n  }\n  \n  .form-modern .form-input::placeholder {\n    color: var(--telegram-text-secondary);\n  }\n  \n  /* Animation utilities */\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  @keyframes slideUp {\n    from { \n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to { \n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  /* Status badge styles */\n  .status-badge-pending {\n    @apply bg-telegram-pending text-white px-2 py-1 rounded-sm text-xs font-medium;\n  }\n  \n  .status-badge-approved {\n    @apply bg-telegram-success text-white px-2 py-1 rounded-sm text-xs font-medium;\n  }\n  \n  .status-badge-rejected {\n    @apply bg-telegram-error text-white px-2 py-1 rounded-sm text-xs font-medium;\n  }\n\n  /* Enhanced Raffle Tab Styling */\n  .raffle-tab {\n    @apply transition-all duration-300 font-medium text-sm;\n    border-radius: 12px;\n    min-height: 44px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 6px;\n    padding: 8px 16px;\n    margin: 2px;\n    position: relative;\n    overflow: hidden;\n    border: none !important;\n  }\n\n  .raffle-tab::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: currentColor;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    border-radius: inherit;\n  }\n\n  .raffle-tab:hover::before {\n    opacity: 0.08;\n  }\n\n  .raffle-tab-pending {\n    @apply text-blue-700 bg-blue-50;\n    color: #1e40af;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .raffle-tab-pending[data-state=\"active\"] {\n    @apply bg-blue-500 text-white shadow-lg;\n    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n  }\n\n  .raffle-tab-rejected {\n    @apply text-red-700 bg-red-50;\n    color: #dc2626;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .raffle-tab-rejected[data-state=\"active\"] {\n    @apply bg-red-500 text-white shadow-lg;\n    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);\n  }\n\n  .raffle-tab-approved {\n    @apply text-green-700 bg-green-50;\n    color: #16a34a;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .raffle-tab-approved[data-state=\"active\"] {\n    @apply bg-green-500 text-white shadow-lg;\n    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);\n  }\n}\n\n/* Modern Telegram-like animations */\n@keyframes telegram-bounce {\n  0% { transform: scale(0.96); opacity: 0.8; }\n  50% { transform: scale(1.02); }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n@keyframes telegram-slide-up {\n  from { transform: translateY(16px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes telegram-slide-in {\n  from { transform: translateX(-20px); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes telegram-pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n@keyframes telegram-gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.telegram-bounce {\n  animation: telegram-bounce 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.telegram-slide-up {\n  animation: telegram-slide-up 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.telegram-slide-in {\n  animation: telegram-slide-in 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.message-bubble {\n  position: relative;\n  background: linear-gradient(135deg, var(--telegram-blue) 0%, var(--telegram-blue-light) 100%);\n  border-radius: 18px 18px 4px 18px;\n  color: white;\n  padding: 12px 16px;\n  margin: 8px 0;\n  box-shadow: var(--shadow-telegram);\n  transition: all 0.2s ease;\n}\n\n.message-bubble:hover {\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-telegram-lg);\n}\n\n.message-bubble::before {\n  content: '';\n  position: absolute;\n  bottom: -4px;\n  right: 12px;\n  width: 0;\n  height: 0;\n  border: 8px solid transparent;\n  border-top-color: var(--telegram-blue-light);\n}\n\n.telegram-card {\n  background: var(--telegram-surface);\n  border-radius: var(--radius);\n  border: 1px solid var(--telegram-divider);\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  overflow: hidden;\n}\n\n.telegram-card:hover {\n  transform: translateY(-2px);\n  border-color: var(--telegram-blue);\n  box-shadow: var(--shadow-telegram-lg);\n}\n\n.telegram-card-elevated {\n  background: var(--telegram-surface);\n  border-radius: var(--radius);\n  box-shadow: var(--shadow-telegram-lg);\n  border: none;\n}\n\n.star-icon {\n  color: #FFD700;\n  filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.3));\n}\n\n.premium-badge {\n  background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);\n  color: white;\n  border-radius: 1rem;\n  padding: 0.25rem 0.75rem;\n  font-size: 0.75rem;\n  font-weight: 600;\n}\n\n/* Modern Floating Action Button */\n.floating-button {\n  position: fixed;\n  bottom: 88px;\n  left: 20px;\n  width: 56px;\n  height: 56px;\n  background: var(--telegram-blue);\n  border-radius: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 24px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  z-index: 50;\n  border: none;\n}\n\n.floating-button:hover {\n  transform: scale(1.05);\n  background: var(--telegram-blue-dark);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);\n}\n\n.floating-button:active {\n  transform: scale(0.95);\n}\n\n/* RTL-specific adjustments */\n[dir=\"rtl\"] .message-bubble {\n  border-radius: 0.75rem 0.75rem 0.75rem 0.25rem;\n}\n\n[dir=\"rtl\"] .message-bubble {\n  border-radius: 18px 18px 18px 4px;\n}\n\n[dir=\"rtl\"] .message-bubble::before {\n  right: auto;\n  left: 12px;\n  border-top-color: var(--telegram-blue-light);\n}\n\n[dir=\"rtl\"] .floating-button {\n  left: 20px;\n  right: auto;\n}\n\n/* Responsive design for mobile-first Telegram mini-app */\n@media (max-width: 768px) {\n  .telegram-card {\n    margin: 0.5rem;\n  }\n  \n  .floating-button {\n    bottom: 5rem; /* Account for bottom navigation */\n  }\n}\n","size_bytes":17848},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/bottom-navigation.tsx":{"content":"import { Home, Gift, User, History } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface NavItem {\n  icon: React.ComponentType<any>;\n  label: string;\n  path: string;\n}\n\nconst navItems: NavItem[] = [\n  { icon: Home, label: \"خانه\", path: \"/\" },\n  { icon: Gift, label: \"قرعه‌کشی‌ها\", path: \"/raffles\" },\n  { icon: User, label: \"پروفایل\", path: \"/profile\" },\n  { icon: History, label: \"تاریخچه\", path: \"/history\" },\n];\n\nexport function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-telegram-surface border-t border-telegram backdrop-blur-xl z-40\">\n      <div className=\"flex justify-around px-2 py-1\">\n        {navItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <button\n              key={item.path}\n              onClick={() => setLocation(item.path)}\n              className={`flex flex-col items-center py-2 px-3 rounded-xl transition-all duration-200 ${\n                isActive \n                  ? \"text-telegram-blue bg-telegram-blue/10\" \n                  : \"text-telegram-secondary hover:text-telegram hover:bg-telegram-surface-variant\"\n              }`}\n            >\n              <Icon size={22} className=\"mb-1\" />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1513},"client/src/components/floating-action-button.tsx":{"content":"import { Plus } from \"lucide-react\";\n\ninterface FloatingActionButtonProps {\n  onClick: () => void;\n}\n\nexport function FloatingActionButton({ onClick }: FloatingActionButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className=\"floating-button hover:animate-telegram-bounce\"\n    >\n      <Plus size={24} />\n    </button>\n  );\n}\n","size_bytes":344},"client/src/components/header.tsx":{"content":"import { Bell, UserCircle, Star, Moon, Sun } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface HeaderProps {\n  title?: string;\n  subtitle?: string;\n}\n\nexport function Header({ title, subtitle }: HeaderProps) {\n  const { user } = useAuth();\n  const [theme, setTheme] = useState<\"light\" | \"dark\" | \"system\">(\"system\");\n  \n  // Determine title and subtitle based on user role\n  const getHeaderInfo = () => {\n    if (!user) return { title: \"دنیای قرعه‌کشی\", subtitle: \"قرعه‌کشی‌های استارز تلگرام\" };\n    \n    const userRole = user.userType;\n    const adminLevel = user.adminLevel;\n    \n    if (userRole === \"bot_admin\" && adminLevel === 1) {\n      return { \n        title: title || \"پنل مدیریت کامل\", \n        subtitle: subtitle || \"دسترسی مدیر اصلی\" \n      };\n    } else if (userRole === \"bot_admin\" && adminLevel === 2) {\n      return { \n        title: title || \"پنل مدیر محدود\", \n        subtitle: subtitle || \"دسترسی سطح 2\" \n      };\n    } else if (userRole === \"channel_admin\") {\n      return { \n        title: title || \"پنل مدیر کانال\", \n        subtitle: subtitle || \"ثبت قرعه‌کشی\" \n      };\n    } else {\n      return { \n        title: title || \"دنیای قرعه‌کشی\", \n        subtitle: subtitle || \"قرعه‌کشی‌های استارز تلگرام\" \n      };\n    }\n  };\n  \n  const { title: displayTitle, subtitle: displaySubtitle } = getHeaderInfo();\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | \"system\" || \"system\";\n    setTheme(savedTheme);\n    applyTheme(savedTheme);\n  }, []);\n\n  const applyTheme = (newTheme: \"light\" | \"dark\" | \"system\") => {\n    const root = document.documentElement;\n    \n    if (newTheme === \"system\") {\n      const systemPrefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      root.classList.toggle(\"dark\", systemPrefersDark);\n    } else {\n      root.classList.toggle(\"dark\", newTheme === \"dark\");\n    }\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : theme === \"dark\" ? \"system\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    applyTheme(newTheme);\n  };\n\n  const getThemeIcon = () => {\n    if (theme === \"light\") return <Sun size={18} />;\n    if (theme === \"dark\") return <Moon size={18} />;\n    return <div className=\"w-4 h-4 rounded-full bg-gradient-to-br from-orange-400 to-blue-600\"></div>;\n  };\n\n  return (\n    <header className=\"bg-telegram-blue text-white sticky top-0 z-40 animate-telegram-slide-up h-16 flex-shrink-0\">\n      <div className=\"px-4 py-2 h-full\">\n        <div className=\"flex items-center justify-between h-full\">\n          <div className=\"flex items-center space-x-reverse space-x-3\">\n            <div className=\"w-12 h-12 bg-white/15 rounded-full flex items-center justify-center backdrop-blur-sm\">\n              <Star className=\"text-yellow-300\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold\">{displayTitle}</h1>\n              <p className=\"text-white/80 text-sm\">{displaySubtitle}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-reverse space-x-2\">\n            <button \n              onClick={toggleTheme}\n              className=\"w-10 h-10 bg-white/15 rounded-full flex items-center justify-center hover:bg-white/25 transition-all duration-200 backdrop-blur-sm\"\n            >\n              {getThemeIcon()}\n            </button>\n            <button className=\"w-10 h-10 bg-white/15 rounded-full flex items-center justify-center hover:bg-white/25 transition-all duration-200 backdrop-blur-sm\">\n              <Bell className=\"text-white\" size={18} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3939},"client/src/components/raffle-card.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Users, Star, Crown, Gift, Clock, ExternalLink, CheckCircle } from \"lucide-react\";\nimport { type Raffle, type User } from \"@shared/schema\";\nimport { useTelegram } from \"@/hooks/use-telegram\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface RaffleCardProps {\n  raffle: Raffle;\n  currentUser?: User;\n}\n\nexport function RaffleCard({ raffle, currentUser }: RaffleCardProps) {\n  const { user: telegramUser } = useTelegram();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [hasBeenSeen, setHasBeenSeen] = useState(false);\n\n  // Check if user has joined this raffle\n  const { data: joinStatus } = useQuery({\n    queryKey: [\"/api/raffles\", raffle.id, \"joined\", currentUser?.id],\n    queryFn: () => \n      fetch(`/api/raffles/${raffle.id}/joined/${currentUser?.id}`)\n        .then(res => res.json()),\n    enabled: !!currentUser?.id,\n  });\n\n  const hasJoined = joinStatus?.hasJoined || false;\n\n  // Mark raffle as seen when component mounts\n  useEffect(() => {\n    if (currentUser?.id && !hasBeenSeen) {\n      fetch(`/api/raffles/${raffle.id}/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: currentUser.id }),\n      }).then(() => {\n        setHasBeenSeen(true);\n      }).catch(console.error);\n    }\n  }, [currentUser?.id, raffle.id, hasBeenSeen]);\n\n  // Join raffle mutation\n  const joinRaffleMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/raffles/${raffle.id}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: currentUser?.id }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/raffles\", raffle.id, \"joined\"] });\n      toast({\n        title: \"موفقیت\",\n        description: \"با موفقیت در قرعه‌کشی شرکت کردید\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در شرکت در قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleJoinRaffle = () => {\n    if (!currentUser) {\n      toast({\n        title: \"خطا\", \n        description: \"لطفاً ابتدا وارد شوید\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (hasJoined) {\n      toast({\n        title: \"اطلاع\",\n        description: \"شما قبلاً در این قرعه‌کشی شرکت کرده‌اید\",\n      });\n      return;\n    }\n\n    joinRaffleMutation.mutate();\n  };\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"text-yellow-400\" size={20} />;\n      case \"premium\":\n        return <Crown className=\"text-purple-500\" size={20} />;\n      case \"mixed\":\n        return (\n          <div className=\"flex items-center gap-0.5\">\n            <Star className=\"text-yellow-400\" size={16} />\n            <Crown className=\"text-purple-500\" size={16} />\n          </div>\n        );\n      default:\n        return <Gift className=\"text-gray-400\" size={20} />;\n    }\n  };\n\n  const getPrizeBadgeColor = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return \"bg-yellow-500/10 text-yellow-600 border-yellow-200\";\n      case \"premium\":\n        return \"bg-purple-500/10 text-purple-600 border-purple-200\";\n      case \"mixed\":\n        return \"bg-blue-500/10 text-blue-600 border-blue-200\";\n      default:\n        return \"bg-gray-500/10 text-gray-600 border-gray-200\";\n    }\n  };\n\n  const getPrizeTypeLabel = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return \"استارز تلگرام\";\n      case \"premium\":\n        return \"اشتراک پریمیم\";\n      case \"mixed\":\n        return \"جایزه ترکیبی\";\n      default:\n        return \"نامشخص\";\n    }\n  };\n\n  const formatDateTime = (dateTime: Date) => {\n    const date = new Date(dateTime);\n    return date.toLocaleDateString('fa-IR') + ' ساعت ' + date.toLocaleTimeString('fa-IR', { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  // Get sponsor channels to find channelUrl for proper navigation\n  const { data: sponsorChannels } = useQuery({\n    queryKey: ['/api/sponsor-channels'],\n  });\n\n  const openChannelLink = (channelId: string) => {\n    // Find the sponsor channel to get the proper channelUrl\n    const sponsorChannelsArray = Array.isArray(sponsorChannels) ? sponsorChannels : [];\n    const sponsorChannel = sponsorChannelsArray.find((ch: any) => ch.channelId === channelId);\n    \n    if (sponsorChannel?.channelUrl) {\n      // Use channelUrl from sponsor channel - this is the correct URL for navigation\n      window.open(sponsorChannel.channelUrl, '_blank');\n    } else {\n      console.error(`Channel with ID ${channelId} not found in sponsor channels or has no valid channelUrl`);\n    }\n  };\n\n  const isExpired = new Date(raffle.raffleDateTime) < new Date();\n  const timeLeft = new Date(raffle.raffleDateTime).getTime() - new Date().getTime();\n  const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n  return (\n    <Card className={`telegram-card hover:shadow-lg transition-all duration-300 ${hasJoined ? 'ring-2 ring-green-200' : ''}`}>\n      <CardContent className=\"p-6\">\n        {/* Header with prize info */}\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-center space-x-reverse space-x-3\">\n            {getPrizeIcon(raffle.prizeType)}\n            <div>\n              <h3 className=\"font-bold text-lg text-telegram\">قرعه‌کشی #{raffle.requestNumber}</h3>\n              <Badge className={`text-xs ${getPrizeBadgeColor(raffle.prizeType)}`}>\n                {getPrizeTypeLabel(raffle.prizeType)}\n              </Badge>\n            </div>\n          </div>\n          {hasJoined && (\n            <CheckCircle className=\"text-green-500\" size={24} />\n          )}\n        </div>\n\n        {/* Prize information */}\n        <div className=\"mb-4 p-3 bg-telegram-surface-variant rounded-lg\">\n          {raffle.prizeValue && (\n            <p className=\"text-sm text-telegram-secondary mt-1\">\n              {raffle.prizeType === \"stars\" ? `${raffle.prizeValue} استارز` : \n               raffle.prizeType === \"premium\" ? `${raffle.prizeValue} ماه پریمیوم` : \n               raffle.prizeType === \"mixed\" ? `${Math.floor(raffle.prizeValue / 2)} استارز + ${Math.floor(raffle.prizeValue / 2)} ماه پریمیوم` :\n               `${raffle.prizeValue} واحد`}\n            </p>\n          )}\n        </div>\n\n\n\n        {/* Time info */}\n        <div className=\"flex items-center space-x-reverse space-x-2 mb-4 text-sm text-telegram-secondary\">\n          <Clock size={16} />\n          <span>قرعه‌کشی: {formatDateTime(raffle.raffleDateTime)}</span>\n          {!isExpired && timeLeft > 0 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {daysLeft > 0 ? `${daysLeft} روز` : `${hoursLeft} ساعت`} باقی‌مانده\n            </Badge>\n          )}\n          {isExpired && (\n            <Badge variant=\"destructive\" className=\"text-xs\">\n              منقضی شده\n            </Badge>\n          )}\n        </div>\n\n        {/* Participant count */}\n        <div className=\"flex items-center space-x-reverse space-x-2 mb-4 text-sm text-telegram-secondary\">\n          <Users size={16} />\n          <span>{raffle.participantCount} نفر شرکت کرده‌اند</span>\n        </div>\n\n        {/* Required channels */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm font-medium text-telegram mb-2\">کانال‌های مورد نیاز:</p>\n          <div className=\"space-y-2\">\n            {raffle.requiredChannels.map((channelId, index) => (\n              <button\n                key={index}\n                onClick={() => openChannelLink(channelId)}\n                className=\"flex items-center justify-between w-full p-2 bg-telegram-blue/5 hover:bg-telegram-blue/10 rounded-lg transition-colors\"\n              >\n                <span className=\"text-sm text-telegram\">{channelId}</span>\n                <ExternalLink size={14} className=\"text-telegram-secondary\" />\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Action button */}\n        <Button\n          onClick={handleJoinRaffle}\n          disabled={hasJoined || isExpired || joinRaffleMutation.isPending || !currentUser}\n          className={`w-full ${hasJoined ? 'bg-green-500 hover:bg-green-600' : 'bg-telegram-blue hover:bg-telegram-blue-dark'} text-white rounded-telegram`}\n        >\n          {joinRaffleMutation.isPending ? (\n            \"در حال پردازش...\"\n          ) : hasJoined ? (\n            \"شرکت کرده‌اید ✓\"\n          ) : isExpired ? (\n            \"قرعه‌کشی منقضی شده\"\n          ) : !currentUser ? (\n            \"ابتدا وارد شوید\"\n          ) : (\n            \"شرکت در قرعه‌کشی\"\n          )}\n        </Button>\n\n        {/* Level requirement */}\n        {raffle.levelRequired > 1 && (\n          <p className=\"text-xs text-telegram-secondary mt-2 text-center\">\n            سطح مورد نیاز: {raffle.levelRequired}\n            {currentUser && currentUser.level < raffle.levelRequired && (\n              <span className=\"text-red-500 block\">سطح شما کافی نیست</span>\n            )}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10114},"client/src/components/user-type-selector.tsx":{"content":"import { Gift, Crown, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface UserTypeSelectorProps {\n  onSelectType: (type: \"regular\" | \"channel_admin\") => void;\n}\n\nexport function UserTypeSelector({ onSelectType }: UserTypeSelectorProps) {\n  return (\n    <div className=\"p-6 animate-telegram-slide-up\">\n      <Card className=\"telegram-card p-8 text-center\">\n        <div className=\"w-20 h-20 bg-telegram-blue/10 rounded-full mx-auto mb-6 flex items-center justify-center\">\n          <div className=\"w-12 h-12 bg-telegram-blue/20 rounded-full flex items-center justify-center\">\n            <Star className=\"text-telegram-blue\" size={24} />\n          </div>\n        </div>\n        <h2 className=\"text-2xl font-bold text-telegram mb-3\">خوش آمدید!</h2>\n        <p className=\"text-telegram-secondary mb-8 text-base\">لطفاً نوع حساب کاربری خود را انتخاب کنید:</p>\n        \n        <div className=\"space-y-4\">\n          <Button\n            onClick={() => onSelectType(\"regular\")}\n            className=\"w-full p-6 bg-gradient-to-r from-telegram-blue to-telegram-blue-light text-white rounded-telegram hover:scale-[1.02] transition-all duration-300 animate-telegram-bounce shadow-telegram-lg\"\n          >\n            <div className=\"flex items-center justify-center space-x-reverse space-x-4\">\n              <Gift size={28} />\n              <div className=\"text-right\">\n                <div className=\"font-bold text-lg\">شرکت در قرعه‌کشی</div>\n                <div className=\"text-sm opacity-90\">می‌خواهم در قرعه‌کشی‌ها شرکت کنم</div>\n              </div>\n            </div>\n          </Button>\n\n          <Button\n            onClick={() => onSelectType(\"channel_admin\")}\n            className=\"w-full p-6 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-telegram hover:scale-[1.02] transition-all duration-300 animate-telegram-bounce shadow-telegram-lg\"\n          >\n            <div className=\"flex items-center justify-center space-x-reverse space-x-4\">\n              <Crown size={28} />\n              <div className=\"text-right\">\n                <div className=\"font-bold text-lg\">مدیر کانال هستم</div>\n                <div className=\"text-sm opacity-90\">می‌خواهم قرعه‌کشی ارسال کنم</div>\n              </div>\n            </div>\n          </Button>\n        </div>\n        \n        <div className=\"mt-8 p-4 bg-telegram-surface-variant rounded-telegram\">\n          <p className=\"text-xs text-telegram-secondary\">\n            می‌توانید بعداً نوع حساب کاربری خود را تغییر دهید\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2806},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-telegram.tsx":{"content":"import { useState, useEffect, createContext, useContext, type ReactNode } from 'react';\nimport { telegramWebApp, type TelegramUser } from '@/lib/telegram';\n\ninterface TelegramContextType {\n  user: TelegramUser | null;\n  isLoading: boolean;\n  isInTelegram: boolean;\n  showAlert: (message: string) => Promise<void>;\n  showConfirm: (message: string) => Promise<boolean>;\n  showMainButton: (text: string, onClick: () => void) => void;\n  hideMainButton: () => void;\n  showBackButton: (onClick: () => void) => void;\n  hideBackButton: () => void;\n  close: () => void;\n}\n\nconst TelegramContext = createContext<TelegramContextType | undefined>(undefined);\n\ninterface TelegramProviderProps {\n  children: ReactNode;\n}\n\nexport function TelegramProvider({ children }: TelegramProviderProps) {\n  const [user, setUser] = useState<TelegramUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const telegramUser = telegramWebApp.getUser();\n    setUser(telegramUser);\n    setIsLoading(false);\n  }, []);\n\n  const showAlert = (message: string) => {\n    return telegramWebApp.showAlert(message);\n  };\n\n  const showConfirm = (message: string) => {\n    return telegramWebApp.showConfirm(message);\n  };\n\n  const showMainButton = (text: string, onClick: () => void) => {\n    telegramWebApp.showMainButton(text, onClick);\n  };\n\n  const hideMainButton = () => {\n    telegramWebApp.hideMainButton();\n  };\n\n  const showBackButton = (onClick: () => void) => {\n    telegramWebApp.showBackButton(onClick);\n  };\n\n  const hideBackButton = () => {\n    telegramWebApp.hideBackButton();\n  };\n\n  const close = () => {\n    telegramWebApp.close();\n  };\n\n  // Check if in Telegram environment\n  const isInTelegram = typeof window !== 'undefined' && !!window.Telegram?.WebApp;\n\n  return (\n    <TelegramContext.Provider\n      value={{\n        user,\n        isLoading,\n        isInTelegram,\n        showAlert,\n        showConfirm,\n        showMainButton,\n        hideMainButton,\n        showBackButton,\n        hideBackButton,\n        close,\n      }}\n    >\n      {children}\n    </TelegramContext.Provider>\n  );\n}\n\nexport function useTelegram() {\n  const context = useContext(TelegramContext);\n  if (context === undefined) {\n    throw new Error(\"useTelegram must be used within a TelegramProvider\");\n  }\n  return context;\n}\n","size_bytes":2323},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/telegram.ts":{"content":"declare global {\n  interface Window {\n    Telegram: {\n      WebApp: {\n        initData: string;\n        initDataUnsafe: {\n          user?: {\n            id: number;\n            first_name: string;\n            last_name?: string;\n            username?: string;\n            language_code?: string;\n          };\n        };\n        themeParams: {\n          bg_color: string;\n          text_color: string;\n          hint_color: string;\n          link_color: string;\n          button_color: string;\n          button_text_color: string;\n        };\n        ready: () => void;\n        close: () => void;\n        expand: () => void;\n        MainButton: {\n          text: string;\n          color: string;\n          textColor: string;\n          isVisible: boolean;\n          isActive: boolean;\n          show: () => void;\n          hide: () => void;\n          enable: () => void;\n          disable: () => void;\n          onClick: (callback: () => void) => void;\n          offClick: (callback: () => void) => void;\n        };\n        BackButton: {\n          isVisible: boolean;\n          show: () => void;\n          hide: () => void;\n          onClick: (callback: () => void) => void;\n          offClick: (callback: () => void) => void;\n        };\n        showAlert: (message: string, callback?: () => void) => void;\n        showConfirm: (message: string, callback?: (confirmed: boolean) => void) => void;\n        showPopup: (params: {\n          title?: string;\n          message: string;\n          buttons?: Array<{\n            id?: string;\n            type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n            text?: string;\n          }>;\n        }, callback?: (buttonId: string) => void) => void;\n      };\n    };\n  }\n}\n\nexport interface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n}\n\nexport class TelegramWebApp {\n  private static instance: TelegramWebApp;\n  private webApp: typeof window.Telegram.WebApp;\n\n  private constructor() {\n    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {\n      this.webApp = window.Telegram.WebApp;\n      this.webApp.ready();\n      this.webApp.expand();\n    } else {\n      // Fallback for development/testing\n      this.webApp = {\n        initData: '',\n        initDataUnsafe: {\n          user: {\n            id: 123456789,\n            first_name: 'Test',\n            last_name: 'User',\n            username: 'testuser',\n          }\n        },\n        themeParams: {\n          bg_color: '#ffffff',\n          text_color: '#000000',\n          hint_color: '#999999',\n          link_color: '#0088cc',\n          button_color: '#0088cc',\n          button_text_color: '#ffffff',\n        },\n        ready: () => {},\n        close: () => {},\n        expand: () => {},\n        MainButton: {\n          text: '',\n          color: '#0088cc',\n          textColor: '#ffffff',\n          isVisible: false,\n          isActive: true,\n          show: () => {},\n          hide: () => {},\n          enable: () => {},\n          disable: () => {},\n          onClick: () => {},\n          offClick: () => {},\n        },\n        BackButton: {\n          isVisible: false,\n          show: () => {},\n          hide: () => {},\n          onClick: () => {},\n          offClick: () => {},\n        },\n        showAlert: (message: string, callback?: () => void) => {\n          alert(message);\n          callback?.();\n        },\n        showConfirm: (message: string, callback?: (confirmed: boolean) => void) => {\n          const result = confirm(message);\n          callback?.(result);\n        },\n        showPopup: (params: any, callback?: (buttonId: string) => void) => {\n          alert(params.message);\n          callback?.('ok');\n        },\n      } as any;\n    }\n  }\n\n  public static getInstance(): TelegramWebApp {\n    if (!TelegramWebApp.instance) {\n      TelegramWebApp.instance = new TelegramWebApp();\n    }\n    return TelegramWebApp.instance;\n  }\n\n  public getUser(): TelegramUser | null {\n    return this.webApp.initDataUnsafe?.user || null;\n  }\n\n  public getThemeParams() {\n    return this.webApp.themeParams;\n  }\n\n  public showMainButton(text: string, onClick: () => void) {\n    this.webApp.MainButton.text = text;\n    this.webApp.MainButton.onClick(onClick);\n    this.webApp.MainButton.show();\n  }\n\n  public hideMainButton() {\n    this.webApp.MainButton.hide();\n  }\n\n  public showBackButton(onClick: () => void) {\n    this.webApp.BackButton.onClick(onClick);\n    this.webApp.BackButton.show();\n  }\n\n  public hideBackButton() {\n    this.webApp.BackButton.hide();\n  }\n\n  public showAlert(message: string): Promise<void> {\n    return new Promise((resolve) => {\n      this.webApp.showAlert(message, () => resolve());\n    });\n  }\n\n  public showConfirm(message: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.webApp.showConfirm(message, (confirmed) => resolve(confirmed));\n    });\n  }\n\n  public close() {\n    this.webApp.close();\n  }\n}\n\nexport const telegramWebApp = TelegramWebApp.getInstance();\n","size_bytes":5027},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Eye, \n  Check, \n  X, \n  Clock, \n  Users, \n  Star, \n  Crown,\n  Gift,\n  AlertTriangle,\n  Settings,\n  Bot\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BotConfigForm } from \"@/components/bot-config-form\";\nimport { type Raffle, type User } from \"@shared/schema\";\n\nexport default function Admin() {\n  const { user: currentUser } = useAuth();\n  const [selectedRaffle, setSelectedRaffle] = useState<Raffle | null>(null);\n  const queryClient = useQueryClient();\n\n  // Check if user is admin\n  const isAdmin = currentUser?.userType === \"bot_admin\";\n\n  // Get pending raffles\n  const { data: pendingRaffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: [\"/api/raffles\", \"pending\"],\n    queryFn: () => fetch(\"/api/raffles?status=pending\").then(res => res.json()),\n    enabled: isAdmin,\n  });\n\n  // Get all users\n  const { data: allUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: () => fetch(\"/api/admin/users?type=regular\").then(res => res.json()),\n    enabled: isAdmin,\n  });\n\n  // Approve/reject raffle mutation\n  const updateRaffleMutation = useMutation({\n    mutationFn: async ({ raffleId, status, levelRequired }: { \n      raffleId: string; \n      status: string; \n      levelRequired?: number;\n    }) => {\n      const response = await fetch(`/api/raffles/${raffleId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status, levelRequired }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update raffle');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/raffles\", \"pending\"] });\n      setSelectedRaffle(null);\n    },\n  });\n\n  const handleApproveRaffle = (raffleId: string, levelRequired: number = 1) => {\n    updateRaffleMutation.mutate({ raffleId, status: \"approved\", levelRequired });\n  };\n\n  const handleRejectRaffle = (raffleId: string) => {\n    updateRaffleMutation.mutate({ raffleId, status: \"rejected\" });\n  };\n\n  if (!currentUser || (currentUser as User).userType !== \"bot_admin\") {\n    return (\n      <div className=\"p-4\">\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            شما دسترسی مدیریت ندارید.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Admin Header */}\n      <Card className=\"telegram-card bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">پنل مدیریت</h1>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">مدیریت قرعه‌کشی‌ها و کاربران</p>\n            </div>\n            <Badge className=\"bg-red-500 text-white\">مدیر</Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{(pendingRaffles as Raffle[]).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">در انتظار تایید</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{(allUsers as User[]).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">کل کاربران</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Raffles */}\n      <Card className=\"telegram-card\">\n        <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n              قرعه‌کشی‌های در انتظار تایید\n            </h3>\n            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n              <Clock size={12} />\n              {(pendingRaffles as Raffle[]).length}\n            </Badge>\n          </div>\n        </div>\n        \n        <CardContent className=\"p-4\">\n          {rafflesLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n            </div>\n          ) : (pendingRaffles as Raffle[]).length === 0 ? (\n            <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n              هیچ قرعه‌کشی در انتظار تایید وجود ندارد\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {(pendingRaffles as Raffle[]).map((raffle: Raffle) => (\n                <div key={raffle.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">\n                        Request #{raffle.requestNumber}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                        {raffle.prizeType === \"stars\" ? `${raffle.prizeValue || 0} ستاره` : \n                         raffle.prizeType === \"premium\" ? `${raffle.prizeValue || 0} ماه پریمیوم` : \n                         raffle.prizeType === \"mixed\" ? `${Math.floor((raffle.prizeValue || 0) / 2)} ستاره + ${Math.floor((raffle.prizeValue || 0) / 2)} ماه پریمیوم` :\n                         `${raffle.prizeValue || 0} واحد`}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span className=\"flex items-center gap-1\">\n                          {raffle.prizeType === \"stars\" ? (\n                            <Star size={12} className=\"text-yellow-500\" />\n                          ) : raffle.prizeType === \"premium\" ? (\n                            <Crown size={12} className=\"text-orange-500\" />\n                          ) : raffle.prizeType === \"mixed\" ? (\n                            <div className=\"flex items-center gap-0.5\">\n                              <Star size={10} className=\"text-yellow-500\" />\n                              <Crown size={10} className=\"text-orange-500\" />\n                            </div>\n                          ) : (\n                            <Gift size={12} className=\"text-blue-500\" />\n                          )}\n                          {raffle.prizeType === \"stars\" ? \"استارز\" : \n                           raffle.prizeType === \"premium\" ? \"پریمیوم\" : \"ترکیبی\"}\n                        </span>\n                        <span>{new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}</span>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">\n                      در انتظار تایید\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => setSelectedRaffle(raffle)}\n                      variant=\"outline\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Eye size={14} />\n                      بررسی جزئیات\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleApproveRaffle(raffle.id)}\n                      className=\"bg-green-500 hover:bg-green-600 text-white flex items-center gap-1\"\n                    >\n                      <Check size={14} />\n                      تایید\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleRejectRaffle(raffle.id)}\n                      variant=\"destructive\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      <X size={14} />\n                      رد\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* User Management */}\n      <Card className=\"telegram-card\">\n        <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n            مدیریت کاربران\n          </h3>\n        </div>\n        \n        <CardContent className=\"p-4\">\n          <div className=\"grid gap-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex items-center justify-between p-4 h-auto\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <Users className=\"text-telegram\" />\n                <div className=\"text-right\">\n                  <div className=\"font-medium\">مشاهده همه کاربران</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {(allUsers as User[]).length} کاربر ثبت‌نام شده\n                  </div>\n                </div>\n              </div>\n              <span className=\"text-gray-400\">←</span>\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              className=\"flex items-center justify-between p-4 h-auto\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <Settings className=\"text-telegram\" />\n                <div className=\"text-right\">\n                  <div className=\"font-medium\">تنظیمات سیستم</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    مدیریت کانال‌های اسپانسر و تنظیمات\n                  </div>\n                </div>\n              </div>\n              <span className=\"text-gray-400\">←</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Raffle Details Modal */}\n      {selectedRaffle && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"telegram-card w-full max-w-md max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">جزئیات قرعه‌کشی</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedRaffle(null)}\n                >\n                  <X size={16} />\n                </Button>\n              </div>\n            </div>\n            \n            <CardContent className=\"p-4 space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">شماره درخواست</label>\n                <p className=\"text-gray-800 dark:text-gray-200\">#{selectedRaffle.requestNumber}</p>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">توضیحات جایزه</label>\n                <p className=\"text-gray-800 dark:text-gray-200\">\n                  {selectedRaffle.prizeType === \"stars\" ? `${selectedRaffle.prizeValue || 0} ستاره` : \n                   selectedRaffle.prizeType === \"premium\" ? `${selectedRaffle.prizeValue || 0} ماه پریمیوم` : \n                   selectedRaffle.prizeType === \"mixed\" ? `${Math.floor((selectedRaffle.prizeValue || 0) / 2)} ستاره + ${Math.floor((selectedRaffle.prizeValue || 0) / 2)} ماه پریمیوم` :\n                   `${selectedRaffle.prizeValue || 0} واحد`}\n                </p>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">نوع جایزه</label>\n                <p className=\"text-gray-800 dark:text-gray-200\">\n                  {selectedRaffle.prizeType === \"stars\" ? \"استارز تلگرام\" :\n                   selectedRaffle.prizeType === \"premium\" ? \"اشتراک پریمیوم\" : \"ترکیبی\"}\n                </p>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">تاریخ قرعه‌کشی</label>\n                <p className=\"text-gray-800 dark:text-gray-200\">\n                  {new Date(selectedRaffle.raffleDateTime).toLocaleDateString('fa-IR')}\n                </p>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">کانال‌های مورد نیاز</label>\n                <div className=\"space-y-1\">\n                  {((selectedRaffle.requiredChannels as string[]) || []).map((channel: string, index: number) => (\n                    <p key={index} className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {channel}\n                    </p>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={() => handleApproveRaffle(selectedRaffle.id)}\n                  className=\"flex-1 bg-green-500 hover:bg-green-600 text-white\"\n                >\n                  تایید\n                </Button>\n                <Button\n                  onClick={() => handleRejectRaffle(selectedRaffle.id)}\n                  variant=\"destructive\"\n                  className=\"flex-1\"\n                >\n                  رد\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":14961},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTelegram } from \"@/hooks/use-telegram\";\nimport { UserTypeSelector } from \"@/components/user-type-selector\";\nimport { RaffleCard } from \"@/components/raffle-card\";\nimport { FloatingActionButton } from \"@/components/floating-action-button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trophy, UserPlus, CheckCircle, List, Settings } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type User, type Raffle } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user: telegramUser, isLoading: telegramLoading } = useTelegram();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const queryClient = useQueryClient();\n\n  // Get or create user\n  const { data: userData, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/users/telegram\", telegramUser?.id],\n    queryFn: () => fetch(`/api/users/telegram/${telegramUser?.id}`).then(res => {\n      if (res.status === 404) {\n        return null; // User doesn't exist yet\n      }\n      return res.json();\n    }),\n    enabled: !!telegramUser?.id,\n  });\n\n  // Get raffles based on user level\n  const { data: raffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: [\"/api/raffles\", currentUser?.level],\n    queryFn: () => \n      fetch(`/api/raffles?level=${currentUser?.level || 1}`)\n        .then(res => res.json()),\n    enabled: !!currentUser,\n  });\n\n  // Join raffle mutation - Removed since handled in RaffleCard\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userType: \"regular\" | \"channel_admin\") => {\n      const response = await fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          telegramId: telegramUser!.id.toString(),\n          username: telegramUser!.username,\n          firstName: telegramUser!.first_name,\n          lastName: telegramUser!.last_name,\n          userType,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create user');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user: User) => {\n      setCurrentUser(user);\n      queryClient.setQueryData([\"/api/users/telegram\", telegramUser?.id], user);\n    },\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setCurrentUser(userData as User);\n    }\n  }, [userData]);\n\n  const handleUserTypeSelect = (userType: \"regular\" | \"channel_admin\") => {\n    createUserMutation.mutate(userType);\n  };\n\n  // Removed handleJoinRaffle since handled in RaffleCard\n\n  if (telegramLoading || userLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-telegram\"></div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return <UserTypeSelector onSelectType={handleUserTypeSelect} />;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Stats Cards */}\n      <div className=\"p-4 animate-telegram-slide-up\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"telegram-card p-4 text-center\">\n            <CardContent className=\"p-0\">\n              <div className=\"text-3xl font-bold text-telegram-blue mb-1\">{raffles.length}</div>\n              <div className=\"text-sm text-telegram-secondary\">قرعه‌کشی فعال</div>\n            </CardContent>\n          </Card>\n          <Card className=\"telegram-card p-4 text-center\">\n            <CardContent className=\"p-0\">\n              <div className=\"text-3xl font-bold text-telegram-blue mb-1\">{currentUser.points.toLocaleString('fa-IR')}</div>\n              <div className=\"text-sm text-telegram-secondary\">امتیاز شما</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Active Raffles */}\n      <div className=\"p-4 animate-telegram-slide-up\" style={{ animationDelay: \"0.1s\" }}>\n        <Card className=\"telegram-card\">\n          <div className=\"p-4 border-b border-telegram\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-telegram\">قرعه‌کشی‌های فعال</h3>\n              <span className=\"text-sm text-telegram-blue cursor-pointer hover:text-telegram-blue-dark transition-colors\">مشاهده همه</span>\n            </div>\n          </div>\n          \n          <CardContent className=\"p-4 space-y-4\">\n            {rafflesLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n              </div>\n            ) : raffles.length === 0 ? (\n              <div className=\"text-center py-12 text-telegram-secondary\">\n                <div className=\"w-16 h-16 bg-telegram-surface-variant rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <Trophy className=\"text-telegram-blue\" size={24} />\n                </div>\n                <p className=\"text-base font-medium\">هیچ قرعه‌کشی فعالی برای سطح شما وجود ندارد</p>\n                <p className=\"text-sm mt-2\">برای مشاهده قرعه‌کشی‌های بیشتر سطح خود را ارتقا دهید</p>\n              </div>\n            ) : (\n              raffles.slice(0, 3).map((raffle: Raffle) => (\n                <RaffleCard\n                  key={raffle.id}\n                  raffle={raffle}\n                  currentUser={currentUser}\n                />\n              ))\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Points and Level */}\n      <div className=\"p-4 animate-telegram-slide-up\" style={{ animationDelay: \"0.2s\" }}>\n        <Card className=\"telegram-card p-4\">\n          <CardContent className=\"p-0\">\n            <h3 className=\"text-lg font-semibold text-telegram mb-4\">سطح و امتیازات</h3>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center space-x-reverse space-x-3\">\n                <div className=\"w-10 h-10 bg-telegram-blue/10 rounded-full flex items-center justify-center\">\n                  <Trophy className=\"text-telegram-blue\" size={20} />\n                </div>\n                <span className=\"font-semibold text-telegram text-lg\">\n                  سطح {currentUser.level}\n                </span>\n              </div>\n              <span className=\"text-sm text-telegram-secondary font-medium\">\n                {currentUser.points.toLocaleString('fa-IR')} امتیاز\n              </span>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full bg-telegram-surface-variant rounded-full h-3 mb-4\">\n              <div \n                className=\"bg-gradient-to-r from-telegram-blue to-telegram-blue-light h-3 rounded-full transition-all duration-500\" \n                style={{ width: `${(currentUser.points % 1000) / 10}%` }}\n              ></div>\n            </div>\n            \n            <div className=\"flex justify-between text-sm text-telegram-secondary\">\n              <span className=\"font-medium\">{1000 - (currentUser.points % 1000)} امتیاز تا سطح بعدی</span>\n              <span>{((currentUser.level) * 1000).toLocaleString('fa-IR')} امتیاز</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"p-4 animate-telegram-slide-up\" style={{ animationDelay: \"0.3s\" }}>\n        <Card className=\"telegram-card p-4\">\n          <CardContent className=\"p-0\">\n            <h3 className=\"text-lg font-semibold text-telegram mb-4\">عملیات سریع</h3>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"ghost\"\n                className=\"flex flex-col items-center p-4 bg-telegram-blue/5 hover:bg-telegram-blue/10 transition-all duration-200 h-auto rounded-telegram hover:scale-[1.02]\"\n              >\n                <UserPlus className=\"text-telegram-blue text-xl mb-2\" />\n                <span className=\"text-sm font-medium text-telegram\">دعوت دوستان</span>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"flex flex-col items-center p-4 bg-purple-500/5 hover:bg-purple-500/10 transition-all duration-200 h-auto rounded-telegram hover:scale-[1.02]\"\n              >\n                <CheckCircle className=\"text-purple-600 text-xl mb-2\" />\n                <span className=\"text-sm font-medium text-telegram\">بررسی عضویت</span>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"flex flex-col items-center p-4 bg-green-500/5 hover:bg-green-500/10 transition-all duration-200 h-auto rounded-telegram hover:scale-[1.02]\"\n              >\n                <List className=\"text-green-600 text-xl mb-2\" />\n                <span className=\"text-sm font-medium text-telegram\">قرعه‌کشی‌هایم</span>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"flex flex-col items-center p-4 bg-orange-500/5 hover:bg-orange-500/10 transition-all duration-200 h-auto rounded-telegram hover:scale-[1.02]\"\n              >\n                <Settings className=\"text-orange-600 text-xl mb-2\" />\n                <span className=\"text-sm font-medium text-telegram\">تنظیمات</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Floating Action Button for channel admins */}\n      {currentUser.userType === \"channel_admin\" && (\n        <FloatingActionButton onClick={() => console.log(\"Create raffle\")} />\n      )}\n    </div>\n  );\n}\n","size_bytes":10007},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"h-full w-full flex items-center justify-center p-4 bg-telegram-bg\">\n      <Card className=\"w-full max-w-md shadow-telegram-lg\">\n        <CardContent className=\"p-6 text-center\">\n          <AlertCircle className=\"mx-auto mb-4 text-telegram-error\" size={64} />\n          <h1 className=\"text-2xl font-bold text-telegram mb-2\">صفحه یافت نشد</h1>\n          <p className=\"text-telegram-text-secondary mb-6\">\n            صفحه‌ای که دنبال آن می‌گردید وجود ندارد یا حذف شده است.\n          </p>\n          <Link href=\"/\">\n            <Button className=\"bg-telegram-blue hover:bg-telegram-blue-dark\">\n              <Home size={16} className=\"ml-2\" />\n              بازگشت به صفحه اصلی\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1098},"client/src/pages/profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useTelegram } from \"@/hooks/use-telegram\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  User, \n  Star, \n  Trophy, \n  Gift, \n  Users, \n  Share2, \n  Crown,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport { type User as UserType } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user: telegramUser } = useTelegram();\n\n  const { data: currentUser, isLoading } = useQuery({\n    queryKey: [\"/api/users/telegram\", telegramUser?.id],\n    queryFn: () => fetch(`/api/users/telegram/${telegramUser?.id}`).then(res => {\n      if (res.status === 404) {\n        return null;\n      }\n      return res.json();\n    }),\n    enabled: !!telegramUser?.id,\n  });\n\n  const { data: sponsorChannels = [] } = useQuery({\n    queryKey: [\"/api/sponsor-channels\"],\n    queryFn: () => fetch(\"/api/sponsor-channels\").then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-telegram\"></div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return (\n      <div className=\"p-4\">\n        <Card className=\"telegram-card p-6 text-center\">\n          <CardContent>\n            <User className=\"mx-auto mb-4 text-gray-400\" size={48} />\n            <p className=\"text-gray-600 dark:text-gray-400\">کاربر یافت نشد</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const user = currentUser as UserType;\n\n  const getUserTypeLabel = (userType: string) => {\n    switch (userType) {\n      case \"admin\":\n        return \"مدیر\";\n      case \"channel_admin\":\n        return \"مدیر کانال\";\n      case \"regular\":\n        return \"کاربر عادی\";\n      default:\n        return \"نامشخص\";\n    }\n  };\n\n  const getUserTypeBadgeColor = (userType: string) => {\n    switch (userType) {\n      case \"admin\":\n        return \"bg-red-500\";\n      case \"channel_admin\":\n        return \"bg-purple-500\";\n      case \"regular\":\n        return \"bg-blue-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Profile Header */}\n      <Card className=\"telegram-card animate-telegram-slide-up\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-reverse space-x-4 mb-6\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarFallback className=\"text-lg bg-telegram text-white\">\n                {user.firstName?.charAt(0) || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">\n                {user.firstName} {user.lastName}\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400\">@{user.username}</p>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <Badge className={`${getUserTypeBadgeColor(user.userType)} text-white`}>\n                  {getUserTypeLabel(user.userType)}\n                </Badge>\n                <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                  <Trophy size={12} />\n                  سطح {user.level}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-telegram\">{user.points.toLocaleString('fa-IR')}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">امتیاز</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">{user.level}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">سطح</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">0</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">برنده شده</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Referral Section */}\n      <Card className=\"telegram-card animate-telegram-slide-up\" style={{ animationDelay: \"0.1s\" }}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">کد معرفی</h3>\n            <Share2 className=\"text-telegram\" size={20} />\n          </div>\n          \n          <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg p-3 mb-4\">\n            <code className=\"text-telegram font-mono text-sm\">{user.referralCode}</code>\n          </div>\n          \n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n            با معرفی دوستان امتیاز کسب کنید. هر دوست معرفی شده ۱۰۰ امتیاز!\n          </p>\n          \n          <Button className=\"w-full bg-telegram hover:bg-telegram-dark\">\n            <Share2 size={16} className=\"ml-2\" />\n            اشتراک‌گذاری کد معرفی\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Sponsor Channels */}\n      <Card className=\"telegram-card animate-telegram-slide-up\" style={{ animationDelay: \"0.2s\" }}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">کانال‌های اسپانسر</h3>\n            <Users className=\"text-telegram\" size={20} />\n          </div>\n          \n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n            با عضویت در کانال‌های زیر امتیاز کسب کنید\n          </p>\n          \n          <div className=\"space-y-3\">\n            {(sponsorChannels as any[]).map((channel: any) => (\n              <div key={channel.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center space-x-reverse space-x-3\">\n                  <div className=\"w-10 h-10 bg-telegram/10 rounded-full flex items-center justify-center\">\n                    <Star className=\"text-telegram\" size={16} />\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-gray-800 dark:text-gray-200\">{channel.channelName}</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      +{channel.pointsReward} امتیاز\n                    </div>\n                  </div>\n                </div>\n                <Button size=\"sm\" variant=\"outline\">\n                  عضویت\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Achievement Progress */}\n      <Card className=\"telegram-card animate-telegram-slide-up\" style={{ animationDelay: \"0.3s\" }}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">پیشرفت سطح</h3>\n            <Trophy className=\"text-telegram\" size={20} />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>سطح فعلی: {user.level}</span>\n              <span>سطح بعدی: {user.level + 1}</span>\n            </div>\n            \n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n              <div \n                className=\"bg-gradient-to-r from-telegram to-telegram-light h-3 rounded-full transition-all duration-300\" \n                style={{ width: `${(user.points % 1000) / 10}%` }}\n              ></div>\n            </div>\n            \n            <div className=\"text-sm text-gray-600 dark:text-gray-400 text-center\">\n              {1000 - (user.points % 1000)} امتیاز تا سطح بعدی\n            </div>\n          </div>\n          \n          <div className=\"mt-6 space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"flex items-center gap-2\">\n                <CheckCircle className=\"text-green-500\" size={16} />\n                سطح {user.level} - برنز\n              </span>\n              <span className=\"text-green-500\">✓</span>\n            </div>\n            \n            {user.level >= 5 ? (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"text-green-500\" size={16} />\n                  سطح ۵ - نقره\n                </span>\n                <span className=\"text-green-500\">✓</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"flex items-center gap-2\">\n                  <Clock className=\"text-gray-400\" size={16} />\n                  سطح ۵ - نقره\n                </span>\n                <span className=\"text-gray-400\">در انتظار</span>\n              </div>\n            )}\n            \n            {user.level >= 10 ? (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"flex items-center gap-2\">\n                  <Crown className=\"text-yellow-500\" size={16} />\n                  سطح ۱۰ - طلا\n                </span>\n                <span className=\"text-green-500\">✓</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"flex items-center gap-2\">\n                  <Clock className=\"text-gray-400\" size={16} />\n                  سطح ۱۰ - طلا\n                </span>\n                <span className=\"text-gray-400\">در انتظار</span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10368},"client/src/pages/raffles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { RaffleCard } from \"@/components/raffle-card\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter } from \"lucide-react\";\nimport { useTelegram } from \"@/hooks/use-telegram\";\nimport { type Raffle, type User } from \"@shared/schema\";\n\nexport default function Raffles() {\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { user } = useTelegram();\n\n  const { data: raffles = [], isLoading } = useQuery({\n    queryKey: [\"/api/raffles\"],\n    queryFn: () => fetch(\"/api/raffles\").then(res => res.json()),\n  });\n\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/users/telegram\", user?.id],\n    queryFn: () => fetch(`/api/users/telegram/${user?.id}`).then(res => {\n      if (res.status === 404) {\n        return null; // User doesn't exist yet\n      }\n      return res.json();\n    }),\n    enabled: !!user?.id,\n  });\n\n  const filteredRaffles = raffles.filter((raffle: Raffle) => {\n    const matchesSearch = raffle.title.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === \"all\" || raffle.prizeType === filterType;\n    \n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Search and Filter */}\n      <Card className=\"telegram-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-telegram-secondary\" size={20} />\n              <Input\n                placeholder=\"جستجو در قرعه‌کشی‌ها...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pr-10\"\n              />\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <Filter className=\"text-telegram-secondary\" size={20} />\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"نوع جایزه\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">همه جوایز</SelectItem>\n                  <SelectItem value=\"stars\">استارز تلگرام</SelectItem>\n                  <SelectItem value=\"premium\">اشتراک پریمیوم</SelectItem>\n                  <SelectItem value=\"mixed\">ترکیبی</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Raffles List */}\n      <Card className=\"telegram-card\">\n        <div className=\"p-4 border-b border-telegram\">\n          <h2 className=\"text-lg font-semibold text-telegram\">\n            تمام قرعه‌کشی‌ها ({filteredRaffles.length})\n          </h2>\n        </div>\n        \n        <CardContent className=\"p-4\">\n          {isLoading || !currentUser ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram-blue\"></div>\n            </div>\n          ) : filteredRaffles.length === 0 ? (\n            <div className=\"text-center py-8 text-telegram-secondary\">\n              {searchTerm || filterType !== \"all\" \n                ? \"هیچ قرعه‌کشی با فیلتر اعمال شده یافت نشد\"\n                : \"هیچ قرعه‌کشی فعالی وجود ندارد\"\n              }\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredRaffles.map((raffle: Raffle) => (\n                <RaffleCard\n                  key={raffle.id}\n                  raffle={raffle}\n                  currentUser={currentUser}\n                />\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4222},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1876},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":731},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/auth-screen.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTelegram } from \"@/hooks/use-telegram\";\nimport { Mail, MessageCircle, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function AuthScreen() {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isGmailLogin, setIsGmailLogin] = useState(false);\n  const { loginWithTelegram, loginWithGmail, isLoading } = useAuth();\n  const { isInTelegram } = useTelegram();\n  const { toast } = useToast();\n\n  const handleTelegramLogin = async () => {\n    try {\n      await loginWithTelegram();\n      toast({\n        title: \"ورود موفق\",\n        description: \"به دنیای قرعه‌کشی خوش آمدید!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"خطا در ورود\",\n        description: \"لطفاً دوباره تلاش کنید\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !name) return;\n    \n    try {\n      await loginWithGmail(email, name);\n      toast({\n        title: \"ورود موفق\",\n        description: \"به دنیای قرعه‌کشی خوش آمدید!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"خطا در ورود\",\n        description: \"لطفاً اطلاعات صحیح وارد کنید\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const botStartLink = \"https://t.me/your_raffle_bot\"; // این باید از API گرفته شود\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n            <MessageCircle className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            دنیای قرعه‌کشی\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            ورود به سیستم قرعه‌کشی‌های استارز تلگرام\n          </p>\n        </div>\n\n        {/* Authentication Options */}\n        <div className=\"space-y-4\">\n          {/* Telegram Login */}\n          {isInTelegram ? (\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"flex items-center justify-center gap-2\">\n                  <MessageCircle className=\"w-5 h-5 text-blue-500\" />\n                  ورود با تلگرام\n                </CardTitle>\n                <CardDescription>\n                  با اکانت تلگرام خود وارد شوید\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button \n                  onClick={handleTelegramLogin}\n                  disabled={isLoading}\n                  className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                >\n                  {isLoading ? \"در حال ورود...\" : \"ورود با تلگرام\"}\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"flex items-center justify-center gap-2\">\n                  <MessageCircle className=\"w-5 h-5 text-blue-500\" />\n                  از طریق تلگرام ورود کنید\n                </CardTitle>\n                <CardDescription>\n                  برای بهترین تجربه، از طریق ربات تلگرام استفاده کنید\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button \n                  onClick={() => window.open(botStartLink, '_blank')}\n                  className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                >\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                  رفتن به ربات تلگرام\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Divider */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-gray-50 dark:bg-gray-900 px-2 text-gray-500 dark:text-gray-400\">\n                یا\n              </span>\n            </div>\n          </div>\n\n          {/* Gmail Login */}\n          {!isGmailLogin ? (\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"flex items-center justify-center gap-2\">\n                  <Mail className=\"w-5 h-5 text-red-500\" />\n                  ورود با ایمیل\n                </CardTitle>\n                <CardDescription>\n                  اگر کاربر تلگرام نیستید، با ایمیل وارد شوید\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button \n                  onClick={() => setIsGmailLogin(true)}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Mail className=\"w-4 h-4 ml-2\" />\n                  ورود با ایمیل\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle>ورود با ایمیل</CardTitle>\n                <CardDescription>\n                  اطلاعات خود را وارد کنید\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleGmailLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">ایمیل</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"example@gmail.com\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">نام کامل</Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      placeholder=\"نام و نام خانوادگی\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      disabled={isLoading || !email || !name}\n                      className=\"flex-1\"\n                    >\n                      {isLoading ? \"در حال ورود...\" : \"ورود\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => setIsGmailLogin(false)}\n                    >\n                      بازگشت\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n          <p>با ورود به سیستم، شرایط استفاده را می‌پذیرید</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8252},"client/src/components/bot-config-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Bot, Settings } from \"lucide-react\";\nimport type { BotConfig } from \"@shared/schema\";\n\nconst botConfigSchema = z.object({\n  botToken: z.string().min(1, \"توکن ربات الزامی است\"),\n  botUsername: z.string().min(1, \"نام کاربری ربات الزامی است\").regex(/^[a-zA-Z0-9_]+$/, \"نام کاربری نامعتبر\"),\n  startLink: z.string().url(\"لینک استارت معتبر وارد کنید\"),\n  adminTelegramIds: z.string().min(1, \"حداقل یک شناسه مدیر وارد کنید\"),\n});\n\ntype BotConfigFormData = z.infer<typeof botConfigSchema>;\n\ninterface BotConfigFormProps {\n  onSuccess?: () => void;\n}\n\nexport function BotConfigForm({ onSuccess }: BotConfigFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get existing bot config\n  const { data: existingConfig, isLoading: isLoadingConfig } = useQuery({\n    queryKey: ['/api/bot/config'],\n    retry: false,\n  });\n\n  const form = useForm<BotConfigFormData>({\n    resolver: zodResolver(botConfigSchema),\n    defaultValues: {\n      botToken: \"\",\n      botUsername: \"\",\n      startLink: \"\",\n      adminTelegramIds: \"\",\n    },\n  });\n\n  // Update form when config loads\n  useEffect(() => {\n    if (existingConfig) {\n      form.reset({\n        botToken: existingConfig.botToken || \"\",\n        botUsername: existingConfig.botUsername || \"\",\n        startLink: existingConfig.startLink || \"\",\n        adminTelegramIds: existingConfig.adminTelegramIds?.join(',') || \"\",\n      });\n    }\n  }, [existingConfig, form]);\n\n  const createConfigMutation = useMutation({\n    mutationFn: async (data: BotConfigFormData) => {\n      const response = await fetch(\"/api/bot/config\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...data,\n          adminTelegramIds: data.adminTelegramIds.split(',').map(id => id.trim()).filter(Boolean),\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to save bot configuration\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"تنظیمات ربات با موفقیت ذخیره شد\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bot/config'] });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در ذخیره تنظیمات ربات\",\n        variant: \"destructive\",\n      });\n      console.error(\"Bot config error:\", error);\n    },\n  });\n\n  const onSubmit = (data: BotConfigFormData) => {\n    createConfigMutation.mutate(data);\n  };\n\n  // Generate start link automatically when bot username changes\n  const botUsername = form.watch(\"botUsername\");\n  useEffect(() => {\n    if (botUsername && !form.getValues(\"startLink\")) {\n      form.setValue(\"startLink\", `https://t.me/${botUsername}?start=raffle`);\n    }\n  }, [botUsername, form]);\n\n  if (isLoadingConfig) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">در حال بارگذاری...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bot className=\"w-5 h-5\" />\n          تنظیمات ربات تلگرام\n        </CardTitle>\n        <CardDescription>\n          تنظیمات ربات تلگرام را برای اتصال به مینی‌اپ پیکربندی کنید\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"botToken\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>توکن ربات</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"1234567890:ABCdefGhIJKlmNoPQRsTUVwxyZ\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    توکن ربات را از @BotFather دریافت کنید\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"botUsername\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>نام کاربری ربات</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"your_raffle_bot\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    نام کاربری ربات بدون @ (مثال: my_raffle_bot)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"startLink\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>لینک استارت ربات</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"https://t.me/your_raffle_bot?start=raffle\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    لینک مستقیم برای شروع ربات\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"adminTelegramIds\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>شناسه‌های تلگرام مدیران</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"123456789,987654321,555666777\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    شناسه‌های عددی تلگرام مدیران را با کاما جدا کنید\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2\">\n              <Button \n                type=\"submit\" \n                disabled={createConfigMutation.isPending}\n                className=\"flex-1\"\n              >\n                <Settings className=\"w-4 h-4 ml-2\" />\n                {createConfigMutation.isPending ? \"در حال ذخیره...\" : \"ذخیره تنظیمات\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7817},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTelegram } from \"./use-telegram\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  loginWithTelegram: () => Promise<void>;\n  loginWithGmail: (email: string, name: string, profileImage?: string) => Promise<void>;\n  logout: () => void;\n  authMethod: \"telegram\" | \"gmail\" | \"guest\" | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const { user: telegramUser, isInTelegram } = useTelegram();\n  const [authMethod, setAuthMethod] = useState<\"telegram\" | \"gmail\" | \"guest\" | null>(null);\n  const queryClient = useQueryClient();\n  \n  // Check if user exists in database\n  const { data: user, isLoading, refetch } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: async () => {\n      if (telegramUser?.id) {\n        try {\n          const response = await fetch(`/api/auth/user?telegramId=${telegramUser.id}`);\n          if (response.ok) {\n            return await response.json();\n          }\n        } catch (error) {\n          console.warn(\"Failed to fetch user by telegram ID:\", error);\n        }\n      }\n      \n      // Try to get user from localStorage for Gmail users\n      const storedUser = localStorage.getItem('authUser');\n      if (storedUser) {\n        const userData = JSON.parse(storedUser);\n        if (userData.email) {\n          try {\n            const response = await fetch(`/api/auth/user?email=${userData.email}`);\n            if (response.ok) {\n              return await response.json();\n            }\n          } catch (error) {\n            console.warn(\"Failed to fetch user by email:\", error);\n          }\n        }\n      }\n      return null;\n    },\n    retry: false,\n  });\n\n  // Auto-login with Telegram if available\n  useEffect(() => {\n    if (telegramUser && !user && !isLoading) {\n      loginWithTelegram();\n    }\n  }, [telegramUser, user, isLoading]);\n\n  // Determine auth method\n  useEffect(() => {\n    if (user) {\n      setAuthMethod(user.authMethod as \"telegram\" | \"gmail\" | \"guest\");\n    } else {\n      setAuthMethod(null);\n    }\n  }, [user]);\n\n  const telegramLoginMutation = useMutation({\n    mutationFn: async () => {\n      if (!telegramUser) throw new Error(\"No Telegram user data\");\n      \n      const response = await fetch(\"/api/auth/telegram\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          id: `telegram_${telegramUser.id}`,\n          telegramId: telegramUser.id.toString(),\n          firstName: telegramUser.first_name,\n          lastName: telegramUser.last_name || \"\",\n          username: telegramUser.username,\n          profileImageUrl: undefined, // Not available in telegram user type\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to authenticate with Telegram\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (userData) => {\n      localStorage.setItem('authUser', JSON.stringify(userData));\n      queryClient.setQueryData(['/api/auth/user'], userData);\n      refetch();\n    },\n  });\n\n  const gmailLoginMutation = useMutation({\n    mutationFn: async ({ email, name, profileImage }: { email: string; name: string; profileImage?: string }) => {\n      const nameParts = name.split(' ');\n      const firstName = nameParts[0] || '';\n      const lastName = nameParts.slice(1).join(' ') || '';\n      \n      const response = await fetch(\"/api/auth/gmail\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          id: `gmail_${email}`,\n          email,\n          firstName,\n          lastName,\n          profileImageUrl: profileImage,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to authenticate with Gmail\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (userData) => {\n      localStorage.setItem('authUser', JSON.stringify(userData));\n      queryClient.setQueryData(['/api/auth/user'], userData);\n      refetch();\n    },\n  });\n\n  const loginWithTelegram = async () => {\n    if (telegramUser) {\n      await telegramLoginMutation.mutateAsync();\n    }\n  };\n\n  const loginWithGmail = async (email: string, name: string, profileImage?: string) => {\n    await gmailLoginMutation.mutateAsync({ email, name, profileImage });\n  };\n\n  const logout = () => {\n    localStorage.removeItem('authUser');\n    queryClient.setQueryData(['/api/auth/user'], null);\n    setAuthMethod(null);\n    refetch();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading: isLoading || telegramLoginMutation.isPending || gmailLoginMutation.isPending,\n        isAuthenticated: !!user,\n        loginWithTelegram,\n        loginWithGmail,\n        logout,\n        authMethod,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":5440},"client/src/pages/bot-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Users, Star, Crown, Settings, TrendingUp, CheckCircle, XCircle, Clock, Calendar, Gift, AlertCircle, Eye, UserCheck } from \"lucide-react\";\n\nexport default function BotAdminPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRaffle, setSelectedRaffle] = useState<any>(null);\n  const [selectedLevel, setSelectedLevel] = useState<number>(1);\n  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n\n  // Get pending raffles for review\n  const { data: pendingRaffles = [], isLoading: pendingLoading } = useQuery({\n    queryKey: ['/api/raffles', 'pending', user?.id],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append('status', 'pending');\n      if (user?.id) params.append('userId', user.id);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch pending raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get all raffles stats\n  const { data: allRaffles = [], isLoading: allRafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', 'all', user?.id],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch all raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get users stats\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/users'],\n    enabled: !!user?.id,\n  });\n\n  const approveRaffleMutation = useMutation({\n    mutationFn: async ({ raffleId, levelRequired }: { raffleId: string; levelRequired: number }) => {\n      const response = await fetch(`/api/raffles/${raffleId}/approve`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          levelRequired,\n          adminUserId: user?.id \n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to approve raffle\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"قرعه‌کشی با موفقیت تایید شد\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      setIsApprovalDialogOpen(false);\n      setSelectedRaffle(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در تایید قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Approve raffle error:\", error);\n    },\n  });\n\n  const rejectRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/reject`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          adminUserId: user?.id \n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to reject raffle\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"قرعه‌کشی رد شد\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      setIsRejectDialogOpen(false);\n      setSelectedRaffle(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در رد قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Reject raffle error:\", error);\n    },\n  });\n\n  const handleApprove = () => {\n    if (selectedRaffle && selectedLevel) {\n      approveRaffleMutation.mutate({\n        raffleId: selectedRaffle.id,\n        levelRequired: selectedLevel\n      });\n    }\n  };\n\n  const handleReject = () => {\n    if (selectedRaffle) {\n      rejectRaffleMutation.mutate(selectedRaffle.id);\n    }\n  };\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"w-4 h-4 text-yellow-500\" />;\n      case \"premium\":\n        return <Crown className=\"w-4 h-4 text-orange-500\" />;\n      case \"mixed\":\n        return (\n          <div className=\"flex items-center gap-0.5\">\n            <Star className=\"w-3 h-3 text-yellow-500\" />\n            <Crown className=\"w-3 h-3 text-orange-500\" />\n          </div>\n        );\n      default:\n        return <Gift className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const getPrizeTypeText = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return \"استارز\";\n      case \"premium\":\n        return \"پریمیوم\";\n      default:\n        return \"ترکیبی\";\n    }\n  };\n\n  const approvedRaffles = allRaffles.filter((r: any) => r.status === \"approved\");\n  const rejectedRaffles = allRaffles.filter((r: any) => r.status === \"rejected\");\n  const regularUsers = (users as any[])?.filter?.((u: any) => u.userType === \"regular\") || [];\n  const channelAdmins = (users as any[])?.filter?.((u: any) => u.userType === \"channel_admin\") || [];\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          پنل مدیریت ربات\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          مدیریت قرعه‌کشی‌ها و کاربران سیستم\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">{pendingRaffles.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center justify-center gap-1\">\n              <Clock className=\"w-3 h-3\" />\n              در انتظار بررسی\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{approvedRaffles.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center justify-center gap-1\">\n              <CheckCircle className=\"w-3 h-3\" />\n              تایید شده\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{regularUsers.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center justify-center gap-1\">\n              <Users className=\"w-3 h-3\" />\n              کاربران عادی\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{channelAdmins.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center justify-center gap-1\">\n              <UserCheck className=\"w-3 h-3\" />\n              ادمین کانال\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"pending\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"pending\">در انتظار بررسی ({pendingRaffles.length})</TabsTrigger>\n          <TabsTrigger value=\"approved\">تایید شده ({approvedRaffles.length})</TabsTrigger>\n          <TabsTrigger value=\"rejected\">رد شده ({rejectedRaffles.length})</TabsTrigger>\n        </TabsList>\n\n        {/* Pending Raffles Tab */}\n        <TabsContent value=\"pending\" className=\"space-y-4\">\n          <Card className=\"telegram-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"w-5 h-5 text-orange-500\" />\n                فرم‌های ارسالی نیازمند بررسی\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pendingLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n                </div>\n              ) : pendingRaffles.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n                  فرم جدیدی برای بررسی موجود نیست\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingRaffles.map((raffle: any) => (\n                    <div key={raffle.id} className=\"border border-orange-200 dark:border-orange-800 rounded-lg p-4 bg-orange-50/50 dark:bg-orange-900/10\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-gray-800 dark:text-gray-200 mb-2\">\n                            {raffle.title}\n                          </h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                            {raffle.prizeType === \"stars\" ? `${raffle.prizeValue} ستاره` : \n                             raffle.prizeType === \"premium\" ? `${raffle.prizeValue} ماه پریمیوم` : \n                             raffle.prizeType === \"mixed\" ? `${Math.floor(raffle.prizeValue / 2)} ستاره + ${Math.floor(raffle.prizeValue / 2)} ماه پریمیوم` :\n                             `${raffle.prizeValue} واحد`}\n                          </p>\n                          \n                          {/* Raffle Details */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"font-medium\">نوع جایزه:</span>\n                                <div className=\"flex items-center gap-1\">\n                                  {getPrizeIcon(raffle.prizeType)}\n                                  {getPrizeTypeText(raffle.prizeType)}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"font-medium\">مقدار:</span>\n                                <span>{raffle.prizeValue}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4\" />\n                                <span>{new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}</span>\n                                <Clock className=\"w-4 h-4\" />\n                                <span>{new Date(raffle.raffleDateTime).toLocaleTimeString('fa-IR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}</span>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div>\n                                <span className=\"font-medium\">شناسه کانال:</span>\n                                <span className=\"ml-2 font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                                  {raffle.channelId}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">شناسه پیام:</span>\n                                <span className=\"ml-2 font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                                  {raffle.messageId}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">کانال‌های الزامی:</span>\n                                <div className=\"flex gap-1 flex-wrap mt-1\">\n                                  {raffle.requiredChannels?.slice(0, 2).map((channel: string, index: number) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                      {channel}\n                                    </Badge>\n                                  ))}\n                                  {raffle.requiredChannels?.length > 2 && (\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      +{raffle.requiredChannels.length - 2}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                        </div>\n                      </div>\n                      \n                      {/* Action Buttons */}\n                      <div className=\"flex gap-2 pt-4 border-t border-orange-200 dark:border-orange-800\">\n                        <Dialog open={isApprovalDialogOpen} onOpenChange={setIsApprovalDialogOpen}>\n                          <DialogTrigger asChild>\n                            <Button\n                              className=\"bg-green-600 hover:bg-green-700 text-white\"\n                              onClick={() => setSelectedRaffle(raffle)}\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-2\" />\n                              تایید\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>تایید قرعه‌کشی</DialogTitle>\n                              <DialogDescription>\n                                سطح دسترسی این قرعه‌کشی را تعیین کنید\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"py-4\">\n                              <Label htmlFor=\"level\">سطح مورد نیاز</Label>\n                              <Select value={selectedLevel.toString()} onValueChange={(value) => setSelectedLevel(parseInt(value))}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"سطح را انتخاب کنید\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"1\">سطح 1 - مبتدی</SelectItem>\n                                  <SelectItem value=\"2\">سطح 2 - متوسط</SelectItem>\n                                  <SelectItem value=\"3\">سطح 3 - پیشرفته</SelectItem>\n                                  <SelectItem value=\"4\">سطح 4 - حرفه‌ای</SelectItem>\n                                  <SelectItem value=\"5\">سطح 5 - ویژه</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <DialogFooter>\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => setIsApprovalDialogOpen(false)}\n                              >\n                                انصراف\n                              </Button>\n                              <Button\n                                onClick={handleApprove}\n                                disabled={approveRaffleMutation.isPending}\n                                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                              >\n                                {approveRaffleMutation.isPending ? \"در حال تایید...\" : \"تایید\"}\n                              </Button>\n                            </DialogFooter>\n                          </DialogContent>\n                        </Dialog>\n\n                        <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"destructive\"\n                              onClick={() => setSelectedRaffle(raffle)}\n                            >\n                              <XCircle className=\"w-4 h-4 mr-2\" />\n                              رد\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>رد قرعه‌کشی</DialogTitle>\n                              <DialogDescription>\n                                آیا از رد این قرعه‌کشی اطمینان دارید؟\n                              </DialogDescription>\n                            </DialogHeader>\n                            <DialogFooter>\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => setIsRejectDialogOpen(false)}\n                              >\n                                انصراف\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                onClick={handleReject}\n                                disabled={rejectRaffleMutation.isPending}\n                              >\n                                {rejectRaffleMutation.isPending ? \"در حال رد...\" : \"رد\"}\n                              </Button>\n                            </DialogFooter>\n                          </DialogContent>\n                        </Dialog>\n\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          مشاهده جزئیات\n                        </Button>\n                      </div>\n\n                      {/* Submission Info */}\n                      <div className=\"flex items-center justify-between text-xs text-gray-500 mt-3 pt-3 border-t border-gray-200 dark:border-gray-700\">\n                        <span>ارسال شده: {new Date(raffle.createdAt).toLocaleDateString('fa-IR')}</span>\n                        <span>توسط: ادمین کانال</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Approved Raffles Tab */}\n        <TabsContent value=\"approved\" className=\"space-y-4\">\n          <Card className=\"telegram-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                قرعه‌کشی‌های تایید شده\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {allRafflesLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n                </div>\n              ) : approvedRaffles.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n                  قرعه‌کشی تایید شده‌ای موجود نیست\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {approvedRaffles.map((raffle: any) => (\n                    <div key={raffle.id} className=\"border border-green-200 dark:border-green-800 rounded-lg p-3 bg-green-50/50 dark:bg-green-900/10\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-800 dark:text-gray-200\">\n                            {raffle.title}\n                          </h4>\n                          <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            <span className=\"flex items-center gap-1\">\n                              {getPrizeIcon(raffle.prizeType)}\n                              {getPrizeTypeText(raffle.prizeType)}\n                            </span>\n                            <span>سطح {raffle.levelRequired}</span>\n                            <span>{new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}</span>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          تایید شده\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Rejected Raffles Tab */}\n        <TabsContent value=\"rejected\" className=\"space-y-4\">\n          <Card className=\"telegram-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <XCircle className=\"w-5 h-5 text-red-500\" />\n                قرعه‌کشی‌های رد شده\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {allRafflesLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n                </div>\n              ) : rejectedRaffles.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n                  قرعه‌کشی رد شده‌ای موجود نیست\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {rejectedRaffles.map((raffle: any) => (\n                    <div key={raffle.id} className=\"border border-red-200 dark:border-red-800 rounded-lg p-3 bg-red-50/50 dark:bg-red-900/10\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-800 dark:text-gray-200\">\n                            {raffle.title}\n                          </h4>\n                          <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            <span className=\"flex items-center gap-1\">\n                              {getPrizeIcon(raffle.prizeType)}\n                              {getPrizeTypeText(raffle.prizeType)}\n                            </span>\n                            <span>{new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}</span>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                          <XCircle className=\"w-3 h-3 mr-1\" />\n                          رد شده\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24966},"client/src/pages/channel-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Send, Plus, Star, Crown, Calendar, Clock, Users, Eye } from \"lucide-react\";\n\n// Schema for raffle submission form\nconst raffleSubmissionSchema = z.object({\n  channelId: z.string().min(1, \"شناسه کانال الزامی است\"),\n  messageId: z.string().min(1, \"شناسه پیام الزامی است\"),\n  title: z.string().min(1, \"عنوان الزامی است\"),\n  description: z.string().optional(),\n  prizeDescription: z.string().min(1, \"توضیحات جایزه الزامی است\"),\n  prizeType: z.enum([\"stars\", \"premium\", \"mixed\"]),\n  prizeValue: z.number().min(1, \"مقدار جایزه باید بیشتر از صفر باشد\"),\n  requiredChannels: z.string().min(1, \"کانال‌های الزامی را وارد کنید\"),\n  raffleDateTime: z.string().min(1, \"تاریخ و زمان قرعه‌کشی الزامی است\"),\n});\n\ntype RaffleSubmissionFormData = z.infer<typeof raffleSubmissionSchema>;\n\nexport default function ChannelAdminPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showForm, setShowForm] = useState(false);\n\n  // Get user's submitted raffles\n  const { data: myRaffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', 'submitted', user?.id],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('submitterId', user.id);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch submitted raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const form = useForm<RaffleSubmissionFormData>({\n    resolver: zodResolver(raffleSubmissionSchema),\n    defaultValues: {\n      channelId: \"\",\n      messageId: \"\",\n      title: \"\",\n      description: \"\",\n      prizeDescription: \"\",\n      prizeType: \"stars\",\n      prizeValue: 1,\n      requiredChannels: \"\",\n      raffleDateTime: \"\",\n    },\n  });\n\n  const submitRaffleMutation = useMutation({\n    mutationFn: async (data: RaffleSubmissionFormData) => {\n      const response = await fetch(\"/api/raffles\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...data,\n          submitterId: user?.id,\n          requiredChannels: data.requiredChannels.split(',').map(ch => ch.trim()).filter(Boolean),\n          raffleDateTime: new Date(data.raffleDateTime).toISOString(),\n          status: \"pending\",\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to submit raffle\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"قرعه‌کشی با موفقیت برای تایید ارسال شد\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      form.reset();\n      setShowForm(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در ارسال قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Submit raffle error:\", error);\n    },\n  });\n\n  const onSubmit = (data: RaffleSubmissionFormData) => {\n    submitRaffleMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">در انتظار تایید</Badge>;\n      case \"approved\":\n        return <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">تایید شده</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">رد شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          پنل ادمین کانال\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          قرعه‌کشی‌های کانال خود را مدیریت کنید\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {myRaffles.filter((r: any) => r.status === \"pending\").length}\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">در انتظار تایید</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {myRaffles.filter((r: any) => r.status === \"approved\").length}\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">تایید شده</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{myRaffles.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">کل قرعه‌کشی‌ها</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Submit New Raffle Button */}\n      {!showForm && (\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-6 text-center\">\n            <Button\n              onClick={() => setShowForm(true)}\n              className=\"bg-telegram hover:bg-telegram/90 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              ارسال قرعه‌کشی جدید\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Raffle Submission Form */}\n      {showForm && (\n        <Card className=\"telegram-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Send className=\"w-5 h-5\" />\n              ارسال قرعه‌کشی جدید\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"channelId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>شناسه کانال</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"@channel_username یا -100xxxxxxxxx\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"messageId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>شناسه پیام</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123456\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>عنوان قرعه‌کشی</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"قرعه‌کشی 100 ستاره تلگرام\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>توضیحات (اختیاری)</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"توضیحات اضافی در مورد قرعه‌کشی...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"prizeType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>نوع جایزه</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"نوع جایزه را انتخاب کنید\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"stars\">ستاره تلگرام</SelectItem>\n                            <SelectItem value=\"premium\">پریمیوم تلگرام</SelectItem>\n                            <SelectItem value=\"mixed\">ترکیبی</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"prizeValue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>مقدار جایزه</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"100\" \n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"prizeDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>توضیحات جایزه</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"100 ستاره تلگرام + 3 ماه پریمیوم\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"requiredChannels\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>کانال‌های الزامی</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"@channel1, @channel2, @channel3\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        کانال‌های الزامی را با کاما جدا کنید\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"raffleDateTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>تاریخ و زمان قرعه‌کشی</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"datetime-local\" \n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={submitRaffleMutation.isPending}\n                    className=\"bg-telegram hover:bg-telegram/90 text-white\"\n                  >\n                    {submitRaffleMutation.isPending ? \"در حال ارسال...\" : \"ارسال برای تایید\"}\n                  </Button>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowForm(false)}\n                  >\n                    انصراف\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* My Raffles */}\n      <Card className=\"telegram-card\">\n        <CardHeader>\n          <CardTitle>قرعه‌کشی‌های من</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {rafflesLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n            </div>\n          ) : myRaffles.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-600 dark:text-gray-400\">\n              هنوز قرعه‌کشی‌ای ارسال نکرده‌اید\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {myRaffles.map((raffle: any) => (\n                <div key={raffle.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 dark:text-gray-200 mb-1\">\n                        {raffle.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                        {raffle.prizeDescription}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span className=\"flex items-center gap-1\">\n                          {raffle.prizeType === \"stars\" ? (\n                            <Star size={12} className=\"text-yellow-500\" />\n                          ) : (\n                            <Crown size={12} className=\"text-orange-500\" />\n                          )}\n                          {raffle.prizeType === \"stars\" ? \"استارز\" : \n                           raffle.prizeType === \"premium\" ? \"پریمیوم\" : \"ترکیبی\"}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar size={12} />\n                          {new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}\n                        </span>\n                        {raffle.levelRequired && (\n                          <span className=\"flex items-center gap-1\">\n                            <Users size={12} />\n                            سطح {raffle.levelRequired}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    {getStatusBadge(raffle.status)}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-xs text-gray-500\">\n                      ارسال شده: {new Date(raffle.createdAt).toLocaleDateString('fa-IR')}\n                    </div>\n                    <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                      <Eye size={12} />\n                      {raffle.participantCount || 0} شرکت‌کننده\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17402},"client/src/pages/regular-user.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Star, \n  Crown, \n  Calendar, \n  Clock, \n  Users, \n  Eye, \n  Heart,\n  Filter,\n  Gift,\n  TrendingUp,\n  Trophy,\n  CheckCircle\n} from \"lucide-react\";\n\nexport default function RegularUserPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeFilter, setActiveFilter] = useState<string>(\"all\");\n\n  // Get raffles based on user level and filter\n  const { data: raffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', user?.id, activeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      if (activeFilter && activeFilter !== 'all') params.append('filter', activeFilter);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get user's interactions\n  const { data: seenRaffles = [] } = useQuery({\n    queryKey: ['/api/user/seen-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: joinedRaffles = [] } = useQuery({\n    queryKey: ['/api/user/joined-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const joinRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to join raffle\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"با موفقیت در قرعه‌کشی شرکت کردید\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/joined-raffles'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در شرکت در قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Join raffle error:\", error);\n    },\n  });\n\n  const markSeenMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to mark as seen\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/seen-raffles'] });\n    },\n  });\n\n  const handleJoinRaffle = (raffleId: string) => {\n    joinRaffleMutation.mutate(raffleId);\n  };\n\n  const handleMarkSeen = (raffleId: string) => {\n    if (!seenRaffles?.includes?.(raffleId)) {\n      markSeenMutation.mutate(raffleId);\n    }\n  };\n\n  const getFilteredRaffles = () => {\n    const now = new Date();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    switch (activeFilter) {\n      case \"today\":\n        return raffles.filter((raffle: any) => {\n          const raffleDate = new Date(raffle.raffleDateTime);\n          return raffleDate >= today && raffleDate < tomorrow;\n        });\n      case \"seen\":\n        return raffles.filter((raffle: any) => seenRaffles?.includes?.(raffle.id));\n      case \"joined\":\n        return raffles.filter((raffle: any) => joinedRaffles?.includes?.(raffle.id));\n      case \"ended\":\n        return raffles.filter((raffle: any) => new Date(raffle.raffleDateTime) < now);\n      case \"favorites\":\n        // TODO: Implement favorites functionality\n        return raffles.filter((raffle: any) => raffle.isFavorite);\n      default:\n        return raffles;\n    }\n  };\n\n  const filteredRaffles = getFilteredRaffles();\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"w-4 h-4 text-yellow-500\" />;\n      case \"premium\":\n        return <Crown className=\"w-4 h-4 text-orange-500\" />;\n      case \"mixed\":\n        return (\n          <div className=\"flex items-center gap-0.5\">\n            <Star className=\"w-3 h-3 text-yellow-500\" />\n            <Crown className=\"w-3 h-3 text-orange-500\" />\n          </div>\n        );\n      default:\n        return <Gift className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const getPrizeTypeText = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return \"استارز\";\n      case \"premium\":\n        return \"پریمیوم\";\n      default:\n        return \"ترکیبی\";\n    }\n  };\n\n  const isRaffleEnded = (raffleDateTime: string) => {\n    return new Date(raffleDateTime) < new Date();\n  };\n\n  const isUserJoined = (raffleId: string) => {\n    return joinedRaffles?.includes?.(raffleId) || false;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          دنیای قرعه‌کشی\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          در قرعه‌کشی‌های مناسب سطح خود شرکت کنید\n        </p>\n      </div>\n\n      {/* User Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-blue-600\">{user?.level}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">سطح شما</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-green-600\">{user?.points}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">امتیاز</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-yellow-600\">{joinedRaffles?.length || 0}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">شرکت کرده</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-purple-600\">{seenRaffles?.length || 0}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">مشاهده شده</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filter Tabs */}\n      <Tabs value={activeFilter} onValueChange={setActiveFilter} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-6\">\n          <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n          <TabsTrigger value=\"today\" className=\"text-xs\">امروز</TabsTrigger>\n          <TabsTrigger value=\"seen\" className=\"text-xs\">مشاهده شده</TabsTrigger>\n          <TabsTrigger value=\"joined\" className=\"text-xs\">شرکت کرده</TabsTrigger>\n          <TabsTrigger value=\"ended\" className=\"text-xs\">پایان یافته</TabsTrigger>\n          <TabsTrigger value=\"favorites\" className=\"text-xs\">مورد علاقه</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeFilter} className=\"space-y-4\">\n          {/* Filter Description */}\n          <Card className=\"telegram-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                <Filter className=\"w-4 h-4\" />\n                {activeFilter === \"all\" && \"تمام قرعه‌کشی‌های مناسب سطح شما\"}\n                {activeFilter === \"today\" && \"قرعه‌کشی‌های امروز\"}\n                {activeFilter === \"seen\" && \"قرعه‌کشی‌هایی که مشاهده کرده‌اید\"}\n                {activeFilter === \"joined\" && \"قرعه‌کشی‌هایی که در آن شرکت کرده‌اید\"}\n                {activeFilter === \"ended\" && \"قرعه‌کشی‌های پایان یافته\"}\n                {activeFilter === \"favorites\" && \"قرعه‌کشی‌های مورد علاقه شما\"}\n                <Badge variant=\"outline\" className=\"ml-auto\">\n                  {filteredRaffles.length} مورد\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Raffles List */}\n          {rafflesLoading ? (\n            <div className=\"flex justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n            </div>\n          ) : filteredRaffles.length === 0 ? (\n            <Card className=\"telegram-card\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"text-gray-600 dark:text-gray-400\">\n                  {activeFilter === \"all\" && \"قرعه‌کشی‌ای برای سطح شما موجود نیست\"}\n                  {activeFilter === \"today\" && \"قرعه‌کشی امروز موجود نیست\"}\n                  {activeFilter === \"seen\" && \"هنوز قرعه‌کشی‌ای مشاهده نکرده‌اید\"}\n                  {activeFilter === \"joined\" && \"هنوز در قرعه‌کشی‌ای شرکت نکرده‌اید\"}\n                  {activeFilter === \"ended\" && \"قرعه‌کشی پایان یافته‌ای موجود نیست\"}\n                  {activeFilter === \"favorites\" && \"هنوز قرعه‌کشی‌ای به علاقه‌مندی‌ها اضافه نکرده‌اید\"}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredRaffles.map((raffle: any) => (\n                <Card \n                  key={raffle.id} \n                  className={`telegram-card cursor-pointer transition-all hover:shadow-md ${\n                    seenRaffles?.includes?.(raffle.id) ? 'opacity-75' : ''\n                  }`}\n                  onClick={() => handleMarkSeen(raffle.id)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-gray-800 dark:text-gray-200 flex-1\">\n                            {raffle.title}\n                          </h3>\n                          {!seenRaffles?.includes?.(raffle.id) && (\n                            <div className=\"w-2 h-2 bg-telegram rounded-full flex-shrink-0 mt-2\"></div>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                          {raffle.prizeDescription}\n                        </p>\n                        \n                        {/* Raffle Info */}\n                        <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-3\">\n                          <span className=\"flex items-center gap-1\">\n                            {getPrizeIcon(raffle.prizeType)}\n                            {getPrizeTypeText(raffle.prizeType)}\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            {new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            {new Date(raffle.raffleDateTime).toLocaleTimeString('fa-IR', {\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <Users className=\"w-3 h-3\" />\n                            سطح {raffle.levelRequired}\n                          </span>\n                        </div>\n\n                        {/* Required Channels */}\n                        {raffle.requiredChannels?.length > 0 && (\n                          <div className=\"flex items-center gap-2 mb-3\">\n                            <span className=\"text-xs text-gray-500\">عضویت در:</span>\n                            <div className=\"flex gap-1 flex-wrap\">\n                              {raffle.requiredChannels.slice(0, 3).map((channel: string, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs px-2 py-0\">\n                                  {channel}\n                                </Badge>\n                              ))}\n                              {raffle.requiredChannels.length > 3 && (\n                                <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                                  +{raffle.requiredChannels.length - 3}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span className=\"flex items-center gap-1\">\n                          <Eye className=\"w-3 h-3\" />\n                          {raffle.participantCount || 0}\n                        </span>\n                        {seenRaffles?.includes?.(raffle.id) && (\n                          <span className=\"flex items-center gap-1 text-blue-500\">\n                            <CheckCircle className=\"w-3 h-3\" />\n                            مشاهده شده\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        {/* Favorite Button */}\n                        <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                          <Heart className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        {/* Join Button */}\n                        {isRaffleEnded(raffle.raffleDateTime) ? (\n                          <Badge variant=\"outline\" className=\"text-gray-500\">\n                            <Trophy className=\"w-3 h-3 mr-1\" />\n                            پایان یافته\n                          </Badge>\n                        ) : isUserJoined(raffle.id) ? (\n                          <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            شرکت کرده\n                          </Badge>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleJoinRaffle(raffle.id);\n                            }}\n                            disabled={joinRaffleMutation.isPending}\n                            className=\"bg-telegram hover:bg-telegram/90 text-white text-xs px-3 py-1\"\n                          >\n                            <TrendingUp className=\"w-3 h-3 mr-1\" />\n                            شرکت\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16794},"build-for-cpanel.md":{"content":"# راهنمای آماده‌سازی برای cPanel\n\n## مرحله ۱: ساخت فایل‌های Static\n```bash\nnpm run build\n```\nاین دستور فولدر `dist` ایجاد می‌کند که شامل فایل‌های آماده برای production است.\n\n## مرحله ۲: آماده‌سازی Backend\nنیاز به تبدیل TypeScript به JavaScript:\n```bash\nnpx tsc server/index.ts --outDir ./dist-server --target es2020 --module commonjs\n```\n\n## مرحله ۳: ساختار فایل‌های نهایی برای آپلود\n```\n📁 فایل‌های آپلود به cPanel\n├── public_html/          # Frontend files (از dist/)\n│   ├── index.html\n│   ├── assets/\n│   └── ...\n├── api/                   # Backend files  \n│   ├── index.js          # کامپایل شده از server/\n│   ├── routes.js\n│   ├── storage.js\n│   ├── db.js\n│   └── node_modules/     # وابستگی‌ها\n└── .env                  # متغیرهای محیطی\n```\n\n## مرحله ۴: تنظیمات cPanel\n1. آپلود فایل‌های frontend به public_html\n2. آپلود فایل‌های backend به پوشه خارج از public_html\n3. تنظیم Node.js App در cPanel\n4. تنظیم متغیرهای محیطی","size_bytes":1304},"cpanel-deployment-guide.md":{"content":"# راهنمای کامل آپلود به cPanel\n\n## مرحله ۱: آماده‌سازی فایل‌ها\n\n### فایل‌های Frontend (آپلود به public_html):\n📁 **dist/public/** → **public_html/**\n- index.html\n- assets/ (فولدر کامل)\n\n### فایل‌های Backend:\n📁 **dist/index.js** → **api/index.js**\n📁 **package-production.json** → **api/package.json**\n\n## مرحله ۲: ساختار نهایی در cPanel\n\n```\ncPanel File Manager:\n📁 public_html/\n├── index.html                    # صفحه اصلی\n├── assets/\n│   ├── index-DTXrX-FW.css\n│   └── index-Dp5fESUX.js\n│\n📁 api/ (خارج از public_html)\n├── index.js                      # سرور Node.js\n├── package.json                  # وابستگی‌ها\n└── .env                         # متغیرهای محیطی\n```\n\n## مرحله ۳: تنظیمات cPanel\n\n### الف) ایجاد Node.js App:\n1. در cPanel بروید به \"Node.js Apps\"\n2. \"Create App\" کلیک کنید\n3. تنظیمات:\n   - **Node.js Version**: 18.x یا بالاتر\n   - **Application mode**: Production\n   - **Application root**: /api\n   - **Application URL**: api\n   - **Application startup file**: index.js\n\n### ب) متغیرهای محیطی:\nدر قسمت Environment Variables اضافه کنید:\n```\nDATABASE_URL=postgresql://your-db-connection-string\nSESSION_SECRET=your-very-secure-random-string-here\nNODE_ENV=production\n```\n\n### ج) نصب وابستگی‌ها:\nپس از ایجاد اپ، در Terminal آن:\n```bash\nnpm install\n```\n\n## مرحله ۴: تنظیمات .htaccess\n\n### در public_html ایجاد کنید: .htaccess\n```apache\nRewriteEngine On\n\n# API routes را به Node.js app بفرستید\nRewriteRule ^api/(.*)$ https://yourdomain.com:port/api/$1 [P,L]\n\n# SPA routing برای React\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ /index.html [QSA,L]\n```\n\n## مرحله ۵: تست و عیب‌یابی\n\n### چک‌لیست نهایی:\n- ✅ فایل‌های frontend در public_html آپلود شده\n- ✅ فایل‌های backend در پوشه api آپلود شده  \n- ✅ Node.js App ایجاد و راه‌اندازی شده\n- ✅ متغیرهای محیطی تنظیم شده\n- ✅ وابستگی‌ها نصب شده\n- ✅ دیتابیس متصل شده\n\n### عیب‌یابی رایج:\n1. **خطای 500**: چک کنید Node.js app در حال اجرا باشد\n2. **خطای Database**: DATABASE_URL را بررسی کنید\n3. **فایل‌های CSS/JS لود نمی‌شوند**: مسیر assets را چک کنید\n\n## نکته مهم: \nاگر cPanel شما Node.js ساپورت نمی‌کند، باید از PHP backend استفاده کنید یا به هاست دیگری مهاجرت کنید.","size_bytes":2827},"client/src/pages/admin-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  MessageSquare, \n  Star, \n  Crown, \n  Settings, \n  Users, \n  CheckCircle, \n  XCircle, \n  Clock, \n  Calendar, \n  Gift, \n  AlertCircle, \n  Eye, \n  UserCheck,\n  Plus,\n  Edit,\n  Trash2,\n  Filter,\n  Search,\n  Download,\n  UserPlus,\n  Hash,\n  Ban,\n  UserMinus,\n  Activity,\n  BarChart3,\n  TrendingUp\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface AdminBottomNavProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nfunction AdminBottomNav({ activeTab, onTabChange }: AdminBottomNavProps) {\n  const tabs = [\n    { id: \"raffles\", label: \"پیام‌های قرعه‌کشی\", icon: MessageSquare },\n    { id: \"channels\", label: \"کانال‌های اسپانسری\", icon: Hash },\n    { id: \"admins\", label: \"مدیریت مدیران\", icon: Crown },\n    { id: \"profile\", label: \"پروفایل\", icon: Settings },\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-telegram-surface border-t border-telegram safe-area-bottom z-50\">\n      <div className=\"flex justify-around items-center px-2 py-2\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          const isActive = activeTab === tab.id;\n          \n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={`flex flex-col items-center justify-center p-3 rounded-telegram transition-all duration-200 min-w-0 flex-1 ${\n                isActive \n                  ? \"bg-telegram-blue text-white shadow-telegram-lg\" \n                  : \"text-telegram-text-secondary hover:bg-telegram-surface-variant hover:text-telegram-text\"\n              }`}\n            >\n              <Icon size={20} className=\"mb-1\" />\n              <span className=\"text-xs font-medium text-center leading-tight\">{tab.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default function AdminPanel() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"raffles\");\n  const [selectedRaffle, setSelectedRaffle] = useState<any>(null);\n  const [selectedLevel, setSelectedLevel] = useState<number>(1);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  const [restrictionType, setRestrictionType] = useState<\"none\" | \"temporary\" | \"permanent\">(\"none\");\n  const [restrictionEnd, setRestrictionEnd] = useState(\"\");\n  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<\"all\" | \"pending\" | \"approved\" | \"rejected\">(\"all\");\n\n  // Queries\n  const { data: pendingRaffles = [], isLoading: pendingLoading } = useQuery({\n    queryKey: ['/api/raffles', 'pending', user?.id],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append('status', 'pending');\n      if (user?.id) params.append('userId', user.id);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch pending raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: allRaffles = [], isLoading: allRafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', 'all', user?.id],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch all raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: sponsorChannels = [], isLoading: channelsLoading } = useQuery({\n    queryKey: ['/api/sponsor-channels'],\n    enabled: !!user?.id,\n  });\n\n  const { data: adminUsers = [], isLoading: adminsLoading } = useQuery({\n    queryKey: ['/api/admin/users', 'bot_admin'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/users?type=bot_admin');\n      if (!response.ok) throw new Error('Failed to fetch admin users');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: stats = { \n    pendingRaffles: 0, \n    approvedRaffles: 0, \n    rejectedRaffles: 0, \n    totalUsers: 0 \n  }, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    enabled: !!user?.id,\n  });\n\n  // Mutations\n  const approveRaffleMutation = useMutation({\n    mutationFn: async ({ raffleId, levelRequired }: { raffleId: string; levelRequired: number }) => {\n      const response = await fetch(`/api/raffles/${raffleId}/approve`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          levelRequired,\n          adminUserId: user?.id \n        }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to approve raffle\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      setIsApprovalDialogOpen(false);\n      setSelectedRaffle(null);\n      toast({ title: \"قرعه‌کشی با موفقیت تایید شد\" });\n    },\n    onError: () => {\n      toast({ title: \"خطا در تایید قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const rejectRaffleMutation = useMutation({\n    mutationFn: async ({ raffleId, reason, restriction }: { \n      raffleId: string; \n      reason: string;\n      restriction: {\n        type: \"none\" | \"temporary\" | \"permanent\";\n        endDate?: string;\n      };\n    }) => {\n      const response = await fetch(`/api/raffles/${raffleId}/reject`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          reason,\n          restriction,\n          adminUserId: user?.id \n        }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to reject raffle\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      setIsRejectDialogOpen(false);\n      setSelectedRaffle(null);\n      setRejectionReason(\"\");\n      setRestrictionType(\"none\");\n      setRestrictionEnd(\"\");\n      toast({ title: \"قرعه‌کشی رد شد\" });\n    },\n    onError: () => {\n      toast({ title: \"خطا در رد قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredRaffles = allRaffles.filter((raffle: any) => {\n    const matchesSearch = raffle.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         raffle.submitterId.includes(searchTerm);\n    const matchesStatus = statusFilter === \"all\" || raffle.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"status-badge-pending\">در انتظار بررسی</Badge>;\n      case \"approved\":\n        return <Badge className=\"status-badge-approved\">تایید شده</Badge>;\n      case \"rejected\":\n        return <Badge className=\"status-badge-rejected\">رد شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const handleApproveRaffle = () => {\n    if (selectedRaffle) {\n      approveRaffleMutation.mutate({\n        raffleId: selectedRaffle.id,\n        levelRequired: selectedLevel,\n      });\n    }\n  };\n\n  const handleRejectRaffle = () => {\n    if (selectedRaffle && rejectionReason.trim()) {\n      rejectRaffleMutation.mutate({\n        raffleId: selectedRaffle.id,\n        reason: rejectionReason,\n        restriction: {\n          type: restrictionType,\n          endDate: restrictionType === \"temporary\" ? restrictionEnd : undefined,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"app-container bg-telegram-bg\">\n      <div className=\"main-content p-4 pb-20\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-telegram mb-2\">پنل مدیریت</h1>\n          <div className=\"flex items-center gap-2 text-telegram-text-secondary\">\n            <Crown size={16} />\n            <span>سطح دسترسی: {user?.adminLevel === 1 ? \"مدیر اصلی\" : \"مدیر محدود\"}</span>\n          </div>\n        </div>\n\n        {/* Stats Overview - Always visible */}\n        {!statsLoading && stats && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <Card className=\"shadow-telegram\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-telegram-text-secondary\">در انتظار بررسی</p>\n                    <p className=\"text-2xl font-bold text-telegram-pending\">{stats.pendingRaffles}</p>\n                  </div>\n                  <Clock className=\"text-telegram-pending\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-telegram\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-telegram-text-secondary\">تایید شده</p>\n                    <p className=\"text-2xl font-bold text-telegram-success\">{stats.approvedRaffles}</p>\n                  </div>\n                  <CheckCircle className=\"text-telegram-success\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-telegram\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-telegram-text-secondary\">رد شده</p>\n                    <p className=\"text-2xl font-bold text-telegram-error\">{stats.rejectedRaffles}</p>\n                  </div>\n                  <XCircle className=\"text-telegram-error\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-telegram\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-telegram-text-secondary\">کل کاربران</p>\n                    <p className=\"text-2xl font-bold text-telegram-blue\">{stats.totalUsers}</p>\n                  </div>\n                  <Users className=\"text-telegram-blue\" size={24} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Tab Content */}\n        {activeTab === \"raffles\" && (\n          <Card className=\"shadow-telegram-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare size={20} />\n                مدیریت پیام‌های قرعه‌کشی\n              </CardTitle>\n              \n              {/* Filters */}\n              <div className=\"flex flex-col sm:flex-row gap-4 mt-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-telegram-text-secondary\" size={16} />\n                    <Input\n                      placeholder=\"جستجو در عنوان یا شناسه کاربر...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pr-10\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={statusFilter} onValueChange={(value: any) => setStatusFilter(value)}>\n                  <SelectTrigger className=\"w-full sm:w-48\">\n                    <SelectValue placeholder=\"فیلتر وضعیت\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">همه وضعیت‌ها</SelectItem>\n                    <SelectItem value=\"pending\">در انتظار بررسی</SelectItem>\n                    <SelectItem value=\"approved\">تایید شده</SelectItem>\n                    <SelectItem value=\"rejected\">رد شده</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Button variant=\"outline\" size=\"sm\">\n                  <Download size={16} className=\"ml-2\" />\n                  خروجی CSV\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table className=\"table-modern\">\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>عنوان</TableHead>\n                      <TableHead>ارسال‌کننده</TableHead>\n                      <TableHead>وضعیت</TableHead>\n                      <TableHead>تاریخ قرعه‌کشی</TableHead>\n                      <TableHead>عملیات</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredRaffles.map((raffle: any) => (\n                      <TableRow key={raffle.id} className=\"animate-fade-in\">\n                        <TableCell className=\"font-medium\">{raffle.title}</TableCell>\n                        <TableCell>{raffle.submitterId}</TableCell>\n                        <TableCell>{getStatusBadge(raffle.status)}</TableCell>\n                        <TableCell>{format(new Date(raffle.raffleDateTime), \"yyyy/MM/dd HH:mm\")}</TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            {raffle.status === \"pending\" && (\n                              <>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setSelectedRaffle(raffle);\n                                    setIsApprovalDialogOpen(true);\n                                  }}\n                                  className=\"bg-telegram-success hover:bg-telegram-success/90\"\n                                >\n                                  <CheckCircle size={14} className=\"ml-1\" />\n                                  تایید\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => {\n                                    setSelectedRaffle(raffle);\n                                    setIsRejectDialogOpen(true);\n                                  }}\n                                >\n                                  <XCircle size={14} className=\"ml-1\" />\n                                  رد\n                                </Button>\n                              </>\n                            )}\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Eye size={14} className=\"ml-1\" />\n                              مشاهده\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === \"channels\" && (\n          <Card className=\"shadow-telegram-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Channel size={20} />\n                  کانال‌های اسپانسری\n                </div>\n                <Button>\n                  <Plus size={16} className=\"ml-2\" />\n                  افزودن کانال\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"grid gap-4\">\n                {(sponsorChannels as any[]).map((channel: any) => (\n                  <Card key={channel.id} className=\"border border-telegram\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-medium text-telegram\">{channel.channelName}</h3>\n                          <p className=\"text-sm text-telegram-text-secondary mt-1\">{channel.description}</p>\n                          <div className=\"flex items-center gap-4 mt-2\">\n                            <span className=\"text-sm text-telegram-text-secondary\">امتیاز: {channel.pointsReward}</span>\n                            <Badge variant={channel.isActive ? \"default\" : \"secondary\"}>\n                              {channel.isActive ? \"فعال\" : \"غیرفعال\"}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Edit size={14} />\n                          </Button>\n                          <Button size=\"sm\" variant=\"destructive\">\n                            <Trash2 size={14} />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === \"admins\" && user?.adminLevel === 1 && (\n          <Card className=\"shadow-telegram-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Crown size={20} />\n                  مدیریت مدیران\n                </div>\n                <Button>\n                  <UserPlus size={16} className=\"ml-2\" />\n                  افزودن مدیر\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table className=\"table-modern\">\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>نام</TableHead>\n                      <TableHead>شناسه تلگرام</TableHead>\n                      <TableHead>سطح دسترسی</TableHead>\n                      <TableHead>تاریخ ایجاد</TableHead>\n                      <TableHead>آخرین ورود</TableHead>\n                      <TableHead>عملیات</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {(adminUsers as any[]).map((admin: any) => (\n                      <TableRow key={admin.id}>\n                        <TableCell className=\"font-medium\">\n                          {admin.firstName} {admin.lastName}\n                        </TableCell>\n                        <TableCell>@{admin.username}</TableCell>\n                        <TableCell>\n                          <Badge variant={admin.adminLevel === 1 ? \"default\" : \"secondary\"}>\n                            {admin.adminLevel === 1 ? \"مدیر اصلی\" : \"مدیر محدود\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{format(new Date(admin.createdAt), \"yyyy/MM/dd\")}</TableCell>\n                        <TableCell>\n                          {admin.lastLoginAt ? format(new Date(admin.lastLoginAt), \"yyyy/MM/dd HH:mm\") : \"هرگز\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Edit size={14} />\n                            </Button>\n                            {admin.id !== user?.id && (\n                              <Button size=\"sm\" variant=\"destructive\">\n                                <UserMinus size={14} />\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === \"profile\" && (\n          <Card className=\"shadow-telegram-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings size={20} />\n                پروفایل مدیر\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label>نام و نام خانوادگی</Label>\n                  <p className=\"mt-1 font-medium\">{user?.firstName} {user?.lastName}</p>\n                </div>\n                \n                <div>\n                  <Label>شناسه تلگرام</Label>\n                  <p className=\"mt-1 font-medium\">@{user?.username}</p>\n                </div>\n                \n                <div>\n                  <Label>سطح دسترسی</Label>\n                  <p className=\"mt-1\">\n                    <Badge variant={user?.adminLevel === 1 ? \"default\" : \"secondary\"}>\n                      {user?.adminLevel === 1 ? \"مدیر اصلی\" : \"مدیر محدود\"}\n                    </Badge>\n                  </p>\n                </div>\n                \n                <div>\n                  <Label>تاریخ ایجاد</Label>\n                  <p className=\"mt-1\">{user?.createdAt ? format(new Date(user.createdAt), \"yyyy/MM/dd HH:mm\") : \"-\"}</p>\n                </div>\n              </div>\n              \n              <div className=\"pt-6 border-t border-telegram\">\n                <h3 className=\"font-medium mb-4 flex items-center gap-2\">\n                  <Activity size={16} />\n                  آمار عملیات\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-telegram-success\">12</p>\n                    <p className=\"text-sm text-telegram-text-secondary\">تایید شده</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-telegram-error\">3</p>\n                    <p className=\"text-sm text-telegram-text-secondary\">رد شده</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-telegram-blue\">5</p>\n                    <p className=\"text-sm text-telegram-text-secondary\">کانال اضافه شده</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-telegram-pending\">2</p>\n                    <p className=\"text-sm text-telegram-text-secondary\">مدیر اضافه شده</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Bottom Navigation */}\n      <AdminBottomNav activeTab={activeTab} onTabChange={setActiveTab} />\n\n      {/* Approval Dialog */}\n      <Dialog open={isApprovalDialogOpen} onOpenChange={setIsApprovalDialogOpen}>\n        <DialogContent className=\"animate-slide-up\">\n          <DialogHeader>\n            <DialogTitle>تایید قرعه‌کشی</DialogTitle>\n            <DialogDescription>\n              سطح مورد نیاز برای مشاهده این قرعه‌کشی را تعیین کنید\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label>سطح مورد نیاز</Label>\n              <Select value={selectedLevel.toString()} onValueChange={(value) => setSelectedLevel(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {[1, 2, 3, 4, 5].map((level) => (\n                    <SelectItem key={level} value={level.toString()}>\n                      سطح {level}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsApprovalDialogOpen(false)}>\n              انصراف\n            </Button>\n            <Button \n              onClick={handleApproveRaffle}\n              disabled={approveRaffleMutation.isPending}\n              className=\"bg-telegram-success hover:bg-telegram-success/90\"\n            >\n              {approveRaffleMutation.isPending ? \"در حال تایید...\" : \"تایید\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rejection Dialog */}\n      <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n        <DialogContent className=\"animate-slide-up max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>رد قرعه‌کشی</DialogTitle>\n            <DialogDescription>\n              دلیل رد را مشخص کنید و در صورت نیاز کاربر را محدود کنید\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label>دلیل رد *</Label>\n              <Textarea\n                value={rejectionReason}\n                onChange={(e) => setRejectionReason(e.target.value)}\n                placeholder=\"دلیل رد قرعه‌کشی را بنویسید...\"\n                rows={3}\n              />\n            </div>\n            \n            <div>\n              <Label>نوع محدودیت</Label>\n              <Select value={restrictionType} onValueChange={(value: any) => setRestrictionType(value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">بدون محدودیت</SelectItem>\n                  <SelectItem value=\"temporary\">محدودیت موقت</SelectItem>\n                  <SelectItem value=\"permanent\">مسدودیت دائم</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {restrictionType === \"temporary\" && (\n              <div>\n                <Label>تاریخ پایان محدودیت</Label>\n                <Input\n                  type=\"datetime-local\"\n                  value={restrictionEnd}\n                  onChange={(e) => setRestrictionEnd(e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsRejectDialogOpen(false)}>\n              انصراف\n            </Button>\n            <Button \n              variant=\"destructive\"\n              onClick={handleRejectRaffle}\n              disabled={rejectRaffleMutation.isPending || !rejectionReason.trim()}\n            >\n              {rejectRaffleMutation.isPending ? \"در حال رد...\" : \"رد کردن\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":29050},"client/src/pages/enhanced-user-main.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { RaffleSubmissionDialog } from \"@/components/raffle-submission-dialog\";\nimport { ReferralSystem } from \"@/components/referral-system\";\nimport { RaffleCard } from \"@/components/raffle-card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { \n  Star, \n  Crown, \n  Calendar, \n  Clock, \n  Users, \n  Eye, \n  Heart,\n  Filter,\n  Gift,\n  Trophy,\n  CheckCircle,\n  XCircle,\n  Plus,\n  Edit,\n  Send,\n  AlertCircle,\n  FileText,\n  Share2,\n  Link2,\n  TrendingUp,\n  Award\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Form schema for raffle submission\nconst raffleFormSchema = z.object({\n  title: z.string().min(3, \"عنوان باید حداقل ۳ کاراکتر باشد\"),\n  prizeType: z.enum([\"stars\", \"premium\", \"mixed\"], {\n    required_error: \"نوع جایزه را انتخاب کنید\"\n  }),\n  prizeValue: z.number().min(1, \"مقدار جایزه باید مثبت باشد\").optional(),\n  requiredChannels: z.string().min(1, \"حداقل یک کانال الزامی است\"),\n  raffleDateTime: z.string().min(1, \"تاریخ و زمان الزامی است\"),\n  channelId: z.string().min(1, \"شناسه کانال الزامی است\"),\n  messageId: z.string().min(1, \"شناسه پیام الزامی است\"),\n});\n\ntype RaffleFormData = z.infer<typeof raffleFormSchema>;\n\nexport default function EnhancedUserMainPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeFilter, setActiveFilter] = useState<string>(\"all\");\n  const [submissionFilter, setSubmissionFilter] = useState<string>(\"all\");\n  const [editingRaffle, setEditingRaffle] = useState<any>(null);\n  const [isSubmitDialogOpen, setIsSubmitDialogOpen] = useState(false);\n  const [isReferralDialogOpen, setIsReferralDialogOpen] = useState(false);\n\n  const form = useForm<RaffleFormData>({\n    resolver: zodResolver(raffleFormSchema),\n    defaultValues: {\n      title: \"\",\n      prizeType: \"stars\",\n      prizeValue: 0,\n      requiredChannels: \"\",\n      raffleDateTime: \"\",\n      channelId: \"\",\n      messageId: \"\",\n    },\n  });\n\n  // Get user statistics\n  const { data: userStats } = useQuery({\n    queryKey: ['/api/user/stats', user?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/users/${user?.id}/stats`);\n      if (!response.ok) throw new Error('Failed to fetch user stats');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Generate unique referral link\n  const referralLink = user?.referralCode \n    ? `https://t.me/YourBotName?start=${user.referralCode}`\n    : \"\";\n\n  // Queries\n  const { data: raffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', user?.id, activeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      if (activeFilter && activeFilter !== 'all') params.append('filter', activeFilter);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: submittedRaffles = [], isLoading: submittedLoading } = useQuery({\n    queryKey: ['/api/raffles/submitted', user?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/raffles/submitted/${user?.id}`);\n      if (!response.ok) throw new Error('Failed to fetch submitted raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: seenRaffles = [] } = useQuery({\n    queryKey: ['/api/user/seen-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: joinedRaffles = [] } = useQuery({\n    queryKey: ['/api/user/joined-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: sponsorChannels = [] } = useQuery({\n    queryKey: ['/api/sponsor-channels'],\n    enabled: !!user?.id,\n  });\n\n\n\n  // Mutations\n  const joinRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to join raffle\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"با موفقیت در قرعه‌کشی شرکت کردید\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/joined-raffles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n    },\n    onError: () => {\n      toast({ title: \"خطا در شرکت در قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const markSeenMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to mark as seen\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/seen-raffles'] });\n    },\n  });\n\n  const submitRaffleMutation = useMutation({\n    mutationFn: async (data: RaffleFormData) => {\n      const requestData = {\n        ...data,\n        requiredChannels: data.requiredChannels.split(',').map(ch => ch.trim()),\n        submitterId: user?.id,\n        raffleDateTime: new Date(data.raffleDateTime).toISOString(),\n      };\n\n      const response = await fetch('/api/raffles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestData),\n      });\n\n      if (!response.ok) throw new Error('Failed to submit raffle');\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"قرعه‌کشی با موفقیت ارسال شد و در انتظار تایید است\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles/submitted'] });\n      form.reset();\n      setIsSubmitDialogOpen(false);\n      setEditingRaffle(null);\n    },\n    onError: () => {\n      toast({ title: \"خطا در ارسال قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const joinSponsorChannelMutation = useMutation({\n    mutationFn: async (channelId: string) => {\n      const response = await fetch(`/api/sponsor-channels/${channelId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to join sponsor channel\");\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({ title: `${data.pointsEarned} امتیاز دریافت کردید!` });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/stats'] });\n    },\n    onError: () => {\n      toast({ title: \"خطا در عضویت در کانال\", variant: \"destructive\" });\n    },\n  });\n\n  // Helper functions\n  const getFilteredRaffles = () => {\n    const now = new Date();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    switch (activeFilter) {\n      case \"today\":\n        return raffles.filter((raffle: any) => {\n          const raffleDate = new Date(raffle.raffleDateTime);\n          return raffleDate >= today && raffleDate < tomorrow;\n        });\n      case \"seen\":\n        return raffles.filter((raffle: any) => seenRaffles?.includes?.(raffle.id));\n      case \"joined\":\n        return raffles.filter((raffle: any) => joinedRaffles?.includes?.(raffle.id));\n      case \"ended\":\n        return raffles.filter((raffle: any) => new Date(raffle.raffleDateTime) < now);\n      case \"favorites\":\n        return raffles.filter((raffle: any) => raffle.isFavorite);\n      default:\n        return raffles;\n    }\n  };\n\n  const getFilteredSubmissions = () => {\n    switch (submissionFilter) {\n      case \"pending\":\n        return submittedRaffles.filter((r: any) => r.status === \"pending\");\n      case \"approved\":\n        return submittedRaffles.filter((r: any) => r.status === \"approved\");\n      case \"rejected\":\n        return submittedRaffles.filter((r: any) => r.status === \"rejected\");\n      default:\n        return submittedRaffles;\n    }\n  };\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"w-4 h-4 text-yellow-500\" />;\n      case \"premium\":\n        return <Crown className=\"w-4 h-4 text-orange-500\" />;\n      default:\n        return <Gift className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"status-badge-pending\">در انتظار بررسی</Badge>;\n      case \"approved\":\n        return <Badge className=\"status-badge-approved\">تایید شده</Badge>;\n      case \"rejected\":\n        return <Badge className=\"status-badge-rejected\">رد شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const handleJoinRaffle = (raffleId: string) => {\n    joinRaffleMutation.mutate(raffleId);\n  };\n\n  const handleMarkSeen = (raffleId: string) => {\n    if (!seenRaffles?.includes?.(raffleId)) {\n      markSeenMutation.mutate(raffleId);\n    }\n  };\n\n  const handleSubmitRaffle = (data: RaffleFormData) => {\n    submitRaffleMutation.mutate(data);\n  };\n\n  const handleEditRaffle = (raffle: any) => {\n    setEditingRaffle(raffle);\n    form.reset({\n      title: raffle.title,\n      prizeType: raffle.prizeType,\n      prizeValue: raffle.prizeValue || 0,\n      requiredChannels: raffle.requiredChannels?.join(', ') || \"\",\n      raffleDateTime: new Date(raffle.raffleDateTime).toISOString().slice(0, 16),\n      channelId: raffle.channelId,\n      messageId: raffle.messageId,\n    });\n    setIsSubmitDialogOpen(true);\n  };\n\n  const copyReferralLink = () => {\n    if (referralLink) {\n      navigator.clipboard.writeText(referralLink);\n      toast({ title: \"لینک رفرال کپی شد\" });\n    }\n  };\n\n  const shareReferralLink = () => {\n    if (referralLink && navigator.share) {\n      navigator.share({\n        title: 'دعوت به دنیای قرعه‌کشی',\n        text: 'با استفاده از این لینک به ما بپیوندید!',\n        url: referralLink\n      });\n    } else {\n      copyReferralLink();\n    }\n  };\n\n  const filteredRaffles = getFilteredRaffles();\n  const filteredSubmissions = getFilteredSubmissions();\n\n  return (\n    <div className=\"app-container bg-telegram-bg\">\n      <div className=\"main-content p-4 pb-20\">\n        {/* Enhanced Header */}\n        <div className=\"text-center space-y-4 mb-8\">\n          <div className=\"relative\">\n            <h1 className=\"text-3xl font-bold text-telegram mb-2 animate-fade-in\">\n              دنیای قرعه‌کشی\n            </h1>\n            <div className=\"absolute -top-2 -right-2\">\n              <Trophy className=\"text-telegram-blue animate-pulse\" size={24} />\n            </div>\n          </div>\n          <p className=\"text-telegram-text-secondary\">\n            در قرعه‌کشی‌ها شرکت کنید، امتیاز کسب کنید و سطح خود را ارتقا دهید\n          </p>\n        </div>\n\n        {/* Enhanced User Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"shadow-telegram animate-slide-up\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Award className=\"text-telegram-blue\" size={20} />\n              </div>\n              <div className=\"text-2xl font-bold text-telegram-blue\">{user?.level}</div>\n              <div className=\"text-xs text-telegram-text-secondary\">سطح فعلی</div>\n              <div className=\"w-full bg-telegram-surface-variant rounded-full h-1 mt-2\">\n                <div \n                  className=\"bg-telegram-blue h-1 rounded-full transition-all duration-500\"\n                  style={{ width: `${(userStats?.levelProgress || 0)}%` }}\n                ></div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-telegram animate-slide-up\" style={{ animationDelay: '0.1s' }}>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Star className=\"text-telegram-warning\" size={20} />\n              </div>\n              <div className=\"text-2xl font-bold text-telegram-warning\">{user?.points}</div>\n              <div className=\"text-xs text-telegram-text-secondary\">امتیاز کل</div>\n              <div className=\"text-xs text-telegram-text-secondary mt-1\">\n                {(userStats?.nextLevelPoints || 0) - (user?.points || 0)} تا سطح بعد\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-telegram animate-slide-up\" style={{ animationDelay: '0.2s' }}>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Users className=\"text-telegram-success\" size={20} />\n              </div>\n              <div className=\"text-2xl font-bold text-telegram-success\">{joinedRaffles?.length || 0}</div>\n              <div className=\"text-xs text-telegram-text-secondary\">شرکت کرده</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-telegram animate-slide-up\" style={{ animationDelay: '0.3s' }}>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Share2 className=\"text-telegram-blue\" size={20} />\n              </div>\n              <div className=\"text-2xl font-bold text-telegram-blue\">{userStats?.referralCount || 0}</div>\n              <div className=\"text-xs text-telegram-text-secondary\">دعوت شده</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Referral Section */}\n        <Card className=\"shadow-telegram-lg mb-6 bg-gradient-to-r from-telegram-blue/10 to-telegram-surface border border-telegram-blue/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-telegram mb-2 flex items-center gap-2\">\n                  <Share2 size={20} />\n                  دعوت از دوستان\n                </h3>\n                <p className=\"text-sm text-telegram-text-secondary mb-4\">\n                  با دعوت از دوستان {user?.referralReward || 50} امتیاز دریافت کنید\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    onClick={shareReferralLink}\n                    className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n                  >\n                    <Share2 size={14} className=\"ml-1\" />\n                    اشتراک‌گذاری\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={copyReferralLink}\n                  >\n                    <Link2 size={14} className=\"ml-1\" />\n                    کپی لینک\n                  </Button>\n                </div>\n              </div>\n              <div className=\"text-4xl\">🎁</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sponsor Channels */}\n        {(sponsorChannels as any[]).length > 0 && (\n          <Card className=\"shadow-telegram-lg mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp size={20} />\n                کانال‌های اسپانسری - امتیاز رایگان!\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-3\">\n                {(sponsorChannels as any[]).filter((channel: any) => channel.isActive).map((channel: any) => (\n                  <div key={channel.id} className=\"flex items-center justify-between p-3 border border-telegram rounded-telegram hover:bg-telegram-surface-variant transition-colors\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-telegram\">{channel.channelName}</h4>\n                      <p className=\"text-sm text-telegram-text-secondary\">{channel.description}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Star size={14} className=\"text-telegram-warning\" />\n                        <span className=\"text-sm font-medium text-telegram-warning\">\n                          {channel.pointsReward} امتیاز\n                        </span>\n                      </div>\n                    </div>\n                    <Button \n                      size=\"sm\"\n                      onClick={() => joinSponsorChannelMutation.mutate(channel.id)}\n                      disabled={joinSponsorChannelMutation.isPending}\n                    >\n                      عضویت\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Tabs */}\n        <Tabs defaultValue=\"participate\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"participate\" className=\"flex items-center gap-2\">\n              <Trophy size={16} />\n              شرکت در قرعه‌کشی\n            </TabsTrigger>\n            <TabsTrigger value=\"submit\" className=\"flex items-center gap-2\">\n              <Plus size={16} />\n              ثبت قرعه‌کشی جدید\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Participate Tab */}\n          <TabsContent value=\"participate\" className=\"space-y-6\">\n            {/* Filter Tabs */}\n            <Tabs value={activeFilter} onValueChange={setActiveFilter} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-6 mb-4\">\n                <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n                <TabsTrigger value=\"today\" className=\"text-xs\">امروز</TabsTrigger>\n                <TabsTrigger value=\"seen\" className=\"text-xs\">مشاهده شده</TabsTrigger>\n                <TabsTrigger value=\"joined\" className=\"text-xs\">شرکت کرده</TabsTrigger>\n                <TabsTrigger value=\"ended\" className=\"text-xs\">پایان یافته</TabsTrigger>\n                <TabsTrigger value=\"favorites\" className=\"text-xs\">مورد علاقه</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={activeFilter} className=\"space-y-4\">\n                {/* Filter Description */}\n                <Card className=\"shadow-telegram\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 text-sm text-telegram-text-secondary\">\n                      <Filter className=\"w-4 h-4\" />\n                      {activeFilter === \"all\" && \"تمام قرعه‌کشی‌های مناسب سطح شما\"}\n                      {activeFilter === \"today\" && \"قرعه‌کشی‌های امروز\"}\n                      {activeFilter === \"seen\" && \"قرعه‌کشی‌هایی که مشاهده کرده‌اید\"}\n                      {activeFilter === \"joined\" && \"قرعه‌کشی‌هایی که در آن شرکت کرده‌اید\"}\n                      {activeFilter === \"ended\" && \"قرعه‌کشی‌های پایان یافته\"}\n                      {activeFilter === \"favorites\" && \"قرعه‌کشی‌های مورد علاقه شما\"}\n                      <Badge variant=\"outline\" className=\"ml-auto\">\n                        {filteredRaffles.length} مورد\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Raffles Grid */}\n                <div className=\"grid gap-4\">\n                  {filteredRaffles.map((raffle: any, index: number) => (\n                    <Card \n                      key={raffle.id} \n                      className=\"shadow-telegram-lg hover:shadow-telegram-xl transition-all duration-300 animate-fade-in border border-telegram\"\n                      style={{ animationDelay: `${index * 0.1}s` }}\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-bold text-lg text-telegram mb-2\">{raffle.title}</h3>\n                            {raffle.description && (\n                              <p className=\"text-telegram-text-secondary text-sm mb-3\">{raffle.description}</p>\n                            )}\n                            \n                            <div className=\"flex items-center gap-4 text-sm text-telegram-text-secondary mb-3\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar size={14} />\n                                {format(new Date(raffle.raffleDateTime), \"yyyy/MM/dd\")}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock size={14} />\n                                {format(new Date(raffle.raffleDateTime), \"HH:mm\")}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Users size={14} />\n                                {raffle.participantCount} نفر\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-2 mb-4\">\n                              {getPrizeIcon(raffle.prizeType)}\n                              <span className=\"font-medium text-telegram\">{raffle.prizeDescription}</span>\n                            </div>\n                          </div>\n                          \n                          <Badge className={`ml-2 ${raffle.levelRequired <= (user?.level || 1) ? 'bg-telegram-success' : 'bg-telegram-warning'}`}>\n                            سطح {raffle.levelRequired}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex gap-2\">\n                            {!joinedRaffles?.includes?.(raffle.id) && \n                             new Date(raffle.raffleDateTime) > new Date() && \n                             raffle.levelRequired <= (user?.level || 1) && (\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleJoinRaffle(raffle.id)}\n                                disabled={joinRaffleMutation.isPending}\n                                className=\"bg-telegram-success hover:bg-telegram-success/90\"\n                              >\n                                <Gift size={14} className=\"ml-1\" />\n                                شرکت در قرعه‌کشی\n                              </Button>\n                            )}\n                            \n                            {joinedRaffles?.includes?.(raffle.id) && (\n                              <Badge className=\"status-badge-approved\">شرکت کرده‌اید</Badge>\n                            )}\n                            \n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleMarkSeen(raffle.id)}\n                            >\n                              <Eye size={14} className=\"ml-1\" />\n                              {seenRaffles?.includes?.(raffle.id) ? \"مشاهده شده\" : \"مشاهده\"}\n                            </Button>\n                          </div>\n                          \n                          <Button size=\"sm\" variant=\"ghost\">\n                            <Heart size={14} />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {filteredRaffles.length === 0 && !rafflesLoading && (\n                  <Card className=\"shadow-telegram\">\n                    <CardContent className=\"p-8 text-center\">\n                      <AlertCircle className=\"mx-auto mb-4 text-telegram-text-secondary\" size={48} />\n                      <h3 className=\"font-medium text-telegram mb-2\">قرعه‌کشی موجود نیست</h3>\n                      <p className=\"text-telegram-text-secondary\">در این دسته‌بندی قرعه‌کشی یافت نشد</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n            </Tabs>\n          </TabsContent>\n\n          {/* Submit Tab */}\n          <TabsContent value=\"submit\" className=\"space-y-6\">\n            {/* Quick Submit Button */}\n            <Card className=\"shadow-telegram-lg bg-gradient-to-r from-telegram-blue/5 to-telegram-surface\">\n              <CardContent className=\"p-6 text-center\">\n                <FileText className=\"mx-auto mb-4 text-telegram-blue\" size={48} />\n                <h3 className=\"font-bold text-lg text-telegram mb-2\">ثبت قرعه‌کشی جدید</h3>\n                <p className=\"text-telegram-text-secondary mb-4\">\n                  قرعه‌کشی خود را ثبت کنید تا پس از تایید مدیران در اختیار کاربران قرار گیرد\n                </p>\n                <Button \n                  onClick={() => setIsSubmitDialogOpen(true)}\n                  className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n                >\n                  <Plus size={16} className=\"ml-2\" />\n                  شروع ثبت قرعه‌کشی\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Submitted Raffles */}\n            <Card className=\"shadow-telegram-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <FileText size={20} />\n                    قرعه‌کشی‌های ارسالی شما\n                  </div>\n                  <Select value={submissionFilter} onValueChange={setSubmissionFilter}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"فیلتر وضعیت\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">همه</SelectItem>\n                      <SelectItem value=\"pending\">در انتظار</SelectItem>\n                      <SelectItem value=\"approved\">تایید شده</SelectItem>\n                      <SelectItem value=\"rejected\">رد شده</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </CardTitle>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table className=\"table-modern\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>عنوان</TableHead>\n                        <TableHead>وضعیت</TableHead>\n                        <TableHead>تاریخ ارسال</TableHead>\n                        <TableHead>تاریخ قرعه‌کشی</TableHead>\n                        <TableHead>عملیات</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredSubmissions.map((submission: any) => (\n                        <TableRow key={submission.id} className=\"animate-fade-in\">\n                          <TableCell className=\"font-medium\">{submission.title}</TableCell>\n                          <TableCell>{getStatusBadge(submission.status)}</TableCell>\n                          <TableCell>{format(new Date(submission.createdAt), \"yyyy/MM/dd HH:mm\")}</TableCell>\n                          <TableCell>{format(new Date(submission.raffleDateTime), \"yyyy/MM/dd HH:mm\")}</TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              {submission.status === \"rejected\" && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleEditRaffle(submission)}\n                                  variant=\"outline\"\n                                >\n                                  <Edit size={14} className=\"ml-1\" />\n                                  ویرایش\n                                </Button>\n                              )}\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Eye size={14} className=\"ml-1\" />\n                                مشاهده\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n                \n                {filteredSubmissions.length === 0 && !submittedLoading && (\n                  <div className=\"text-center py-8\">\n                    <AlertCircle className=\"mx-auto mb-4 text-telegram-text-secondary\" size={48} />\n                    <h3 className=\"font-medium text-telegram mb-2\">هیچ ارسالی یافت نشد</h3>\n                    <p className=\"text-telegram-text-secondary\">قرعه‌کشی خود را ثبت کنید</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Submit Raffle Dialog */}\n      <Dialog open={isSubmitDialogOpen} onOpenChange={setIsSubmitDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto animate-slide-up\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingRaffle ? \"ویرایش قرعه‌کشی\" : \"ثبت قرعه‌کشی جدید\"}\n            </DialogTitle>\n            <DialogDescription>\n              اطلاعات قرعه‌کشی خود را با دقت وارد کنید\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmitRaffle)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>عنوان قرعه‌کشی *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"عنوان جذاب برای قرعه‌کشی\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"prizeType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>نوع جایزه *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"نوع جایزه را انتخاب کنید\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"stars\">استارز تلگرام</SelectItem>\n                          <SelectItem value=\"premium\">پریمیوم تلگرام</SelectItem>\n                          <SelectItem value=\"mixed\">ترکیبی</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>توضیحات (اختیاری)</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"توضیحات اضافی درباره قرعه‌کشی\" rows={3} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"prizeDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>توضیحات جایزه *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"مثال: 100 استار تلگرام\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"prizeValue\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>مقدار جایزه</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          placeholder=\"عدد (اختیاری)\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"requiredChannels\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>کانال‌های مورد نیاز *</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"@channel1, @channel2 (با کاما جدا کنید)\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"raffleDateTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>تاریخ و زمان قرعه‌کشی *</FormLabel>\n                      <FormControl>\n                        <Input type=\"datetime-local\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"channelId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>شناسه کانال *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"@yourchannel\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"messageId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>شناسه پیام *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"123456\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <DialogFooter className=\"gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsSubmitDialogOpen(false)}\n                >\n                  انصراف\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={submitRaffleMutation.isPending}\n                  className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n                >\n                  {submitRaffleMutation.isPending ? \"در حال ارسال...\" : (editingRaffle ? \"بروزرسانی\" : \"ارسال\")}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":39091},"client/src/pages/user-main.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { \n  Star, \n  Crown, \n  Calendar, \n  Clock, \n  Users, \n  Eye, \n  Heart,\n  Filter,\n  Gift,\n  TrendingUp,\n  Trophy,\n  CheckCircle,\n  XCircle,\n  Plus,\n  Edit,\n  Send,\n  AlertCircle,\n  FileText\n} from \"lucide-react\";\n\n// Form schema for raffle submission\nconst raffleFormSchema = z.object({\n  title: z.string().min(3, \"عنوان باید حداقل ۳ کاراکتر باشد\"),\n  prizeType: z.enum([\"stars\", \"premium\", \"mixed\"], {\n    required_error: \"نوع جایزه را انتخاب کنید\"\n  }),\n  prizeValue: z.number().min(1, \"مقدار جایزه باید مثبت باشد\").optional(),\n  requiredChannels: z.string().min(1, \"حداقل یک کانال الزامی است\"),\n  raffleDateTime: z.string().min(1, \"تاریخ و زمان الزامی است\"),\n  channelId: z.string().min(1, \"شناسه کانال الزامی است\"),\n  messageId: z.string().min(1, \"شناسه پیام الزامی است\"),\n});\n\ntype RaffleFormData = z.infer<typeof raffleFormSchema>;\n\nexport default function UserMainPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeFilter, setActiveFilter] = useState<string>(\"all\");\n  const [submissionFilter, setSubmissionFilter] = useState<string>(\"all\");\n  const [editingRaffle, setEditingRaffle] = useState<any>(null);\n  const [isSubmitDialogOpen, setIsSubmitDialogOpen] = useState(false);\n\n  const form = useForm<RaffleFormData>({\n    resolver: zodResolver(raffleFormSchema),\n    defaultValues: {\n      title: \"\",\n      prizeType: \"stars\",\n      prizeValue: 0,\n      requiredChannels: \"\",\n      raffleDateTime: \"\",\n      channelId: \"\",\n      messageId: \"\",\n    },\n  });\n\n  // Get raffles for participation\n  const { data: raffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', user?.id, activeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      if (activeFilter && activeFilter !== 'all') params.append('filter', activeFilter);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get user's submitted raffles\n  const { data: submittedRaffles = [], isLoading: submittedLoading } = useQuery({\n    queryKey: ['/api/raffles/submitted', user?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/raffles/submitted/${user?.id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch submitted raffles');\n      }\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get user's interactions\n  const { data: seenRaffles = [] } = useQuery({\n    queryKey: ['/api/user/seen-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: joinedRaffles = [] } = useQuery({\n    queryKey: ['/api/user/joined-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  // Mutations\n  const joinRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to join raffle\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"با موفقیت در قرعه‌کشی شرکت کردید\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/joined-raffles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در شرکت در قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Join raffle error:\", error);\n    },\n  });\n\n  const markSeenMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to mark as seen\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/seen-raffles'] });\n    },\n  });\n\n  const submitRaffleMutation = useMutation({\n    mutationFn: async (data: RaffleFormData) => {\n      const requestData = {\n        ...data,\n        requiredChannels: data.requiredChannels.split(',').map(ch => ch.trim()),\n        submitterId: user?.id,\n        raffleDateTime: new Date(data.raffleDateTime).toISOString(),\n      };\n\n      const response = await fetch('/api/raffles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to submit raffle');\n      }\n\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"موفق\",\n        description: \"قرعه‌کشی با موفقیت ارسال شد و در انتظار تایید است\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles/submitted'] });\n      form.reset();\n      setIsSubmitDialogOpen(false);\n      setEditingRaffle(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در ارسال قرعه‌کشی\",\n        variant: \"destructive\",\n      });\n      console.error(\"Submit raffle error:\", error);\n    },\n  });\n\n  const handleJoinRaffle = (raffleId: string) => {\n    joinRaffleMutation.mutate(raffleId);\n  };\n\n  const handleMarkSeen = (raffleId: string) => {\n    if (!seenRaffles?.includes?.(raffleId)) {\n      markSeenMutation.mutate(raffleId);\n    }\n  };\n\n  const handleSubmitRaffle = (data: RaffleFormData) => {\n    submitRaffleMutation.mutate(data);\n  };\n\n  const handleEditRaffle = (raffle: any) => {\n    setEditingRaffle(raffle);\n    form.reset({\n      title: raffle.title,\n      prizeType: raffle.prizeType,\n      prizeValue: raffle.prizeValue || 0,\n      requiredChannels: raffle.requiredChannels?.join(', ') || \"\",\n      raffleDateTime: new Date(raffle.raffleDateTime).toISOString().slice(0, 16),\n      channelId: raffle.channelId,\n      messageId: raffle.messageId,\n    });\n    setIsSubmitDialogOpen(true);\n  };\n\n  const getFilteredRaffles = () => {\n    const now = new Date();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    switch (activeFilter) {\n      case \"today\":\n        return raffles.filter((raffle: any) => {\n          const raffleDate = new Date(raffle.raffleDateTime);\n          return raffleDate >= today && raffleDate < tomorrow;\n        });\n      case \"seen\":\n        return raffles.filter((raffle: any) => seenRaffles?.includes?.(raffle.id));\n      case \"joined\":\n        return raffles.filter((raffle: any) => joinedRaffles?.includes?.(raffle.id));\n      case \"ended\":\n        return raffles.filter((raffle: any) => new Date(raffle.raffleDateTime) < now);\n      case \"favorites\":\n        return raffles.filter((raffle: any) => raffle.isFavorite);\n      default:\n        return raffles;\n    }\n  };\n\n  const getFilteredSubmissions = () => {\n    switch (submissionFilter) {\n      case \"pending\":\n        return submittedRaffles.filter((r: any) => r.status === \"pending\");\n      case \"approved\":\n        return submittedRaffles.filter((r: any) => r.status === \"approved\");\n      case \"rejected\":\n        return submittedRaffles.filter((r: any) => r.status === \"rejected\");\n      default:\n        return submittedRaffles;\n    }\n  };\n\n  const filteredRaffles = getFilteredRaffles();\n  const filteredSubmissions = getFilteredSubmissions();\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"w-4 h-4 text-yellow-500\" />;\n      case \"premium\":\n        return <Crown className=\"w-4 h-4 text-orange-500\" />;\n      case \"mixed\":\n        return (\n          <div className=\"flex items-center gap-0.5\">\n            <Star className=\"w-3 h-3 text-yellow-500\" />\n            <Crown className=\"w-3 h-3 text-orange-500\" />\n          </div>\n        );\n      default:\n        return <Gift className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const getPrizeTypeText = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return \"استارز\";\n      case \"premium\":\n        return \"پریمیوم\";\n      default:\n        return \"ترکیبی\";\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800 border-green-300\">تایید شده</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800 border-red-300\">رد شده</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-300\">در انتظار بررسی</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const isRaffleEnded = (raffleDateTime: string) => {\n    return new Date(raffleDateTime) < new Date();\n  };\n\n  const isUserJoined = (raffleId: string) => {\n    return joinedRaffles?.includes?.(raffleId) || false;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          دنیای قرعه‌کشی\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          در قرعه‌کشی‌ها شرکت کنید یا قرعه‌کشی خود را ثبت کنید\n        </p>\n      </div>\n\n      {/* User Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-blue-600\">{user?.level}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">سطح شما</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-green-600\">{user?.points}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">امتیاز</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-yellow-600\">{joinedRaffles?.length || 0}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">شرکت کرده</div>\n          </CardContent>\n        </Card>\n        <Card className=\"telegram-card\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-lg font-bold text-purple-600\">{submittedRaffles?.length || 0}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">ثبت شده</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Tabs */}\n      <Tabs defaultValue=\"participate\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"participate\">شرکت در قرعه‌کشی</TabsTrigger>\n          <TabsTrigger value=\"submit\">ثبت قرعه‌کشی جدید</TabsTrigger>\n        </TabsList>\n\n        {/* Participate Tab */}\n        <TabsContent value=\"participate\" className=\"space-y-4\">\n          {/* Filter Tabs */}\n          <Tabs value={activeFilter} onValueChange={setActiveFilter} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-6\">\n              <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n              <TabsTrigger value=\"today\" className=\"text-xs\">امروز</TabsTrigger>\n              <TabsTrigger value=\"seen\" className=\"text-xs\">مشاهده شده</TabsTrigger>\n              <TabsTrigger value=\"joined\" className=\"text-xs\">شرکت کرده</TabsTrigger>\n              <TabsTrigger value=\"ended\" className=\"text-xs\">پایان یافته</TabsTrigger>\n              <TabsTrigger value=\"favorites\" className=\"text-xs\">مورد علاقه</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeFilter} className=\"space-y-4\">\n              {/* Filter Description */}\n              <Card className=\"telegram-card\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                    <Filter className=\"w-4 h-4\" />\n                    {activeFilter === \"all\" && \"تمام قرعه‌کشی‌های مناسب سطح شما\"}\n                    {activeFilter === \"today\" && \"قرعه‌کشی‌های امروز\"}\n                    {activeFilter === \"seen\" && \"قرعه‌کشی‌هایی که مشاهده کرده‌اید\"}\n                    {activeFilter === \"joined\" && \"قرعه‌کشی‌هایی که در آن شرکت کرده‌اید\"}\n                    {activeFilter === \"ended\" && \"قرعه‌کشی‌های پایان یافته\"}\n                    {activeFilter === \"favorites\" && \"قرعه‌کشی‌های مورد علاقه شما\"}\n                    <Badge variant=\"outline\" className=\"ml-auto\">\n                      {filteredRaffles.length} مورد\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Raffles List */}\n              {rafflesLoading ? (\n                <div className=\"flex justify-center py-12\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n                </div>\n              ) : filteredRaffles.length === 0 ? (\n                <Card className=\"telegram-card\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"text-gray-600 dark:text-gray-400\">\n                      {activeFilter === \"all\" && \"قرعه‌کشی‌ای برای سطح شما موجود نیست\"}\n                      {activeFilter === \"today\" && \"قرعه‌کشی امروز موجود نیست\"}\n                      {activeFilter === \"seen\" && \"هنوز قرعه‌کشی‌ای مشاهده نکرده‌اید\"}\n                      {activeFilter === \"joined\" && \"هنوز در قرعه‌کشی‌ای شرکت نکرده‌اید\"}\n                      {activeFilter === \"ended\" && \"قرعه‌کشی پایان یافته‌ای موجود نیست\"}\n                      {activeFilter === \"favorites\" && \"هنوز قرعه‌کشی‌ای به علاقه‌مندی‌ها اضافه نکرده‌اید\"}\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredRaffles.map((raffle: any) => (\n                    <Card \n                      key={raffle.id} \n                      className={`telegram-card cursor-pointer transition-all hover:shadow-md ${\n                        seenRaffles?.includes?.(raffle.id) ? 'opacity-75' : ''\n                      }`}\n                      onClick={() => handleMarkSeen(raffle.id)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start gap-2 mb-2\">\n                              <h3 className=\"font-semibold text-gray-800 dark:text-gray-200 flex-1\">\n                                {raffle.title}\n                              </h3>\n                              {!seenRaffles?.includes?.(raffle.id) && (\n                                <div className=\"w-2 h-2 bg-telegram rounded-full flex-shrink-0 mt-2\"></div>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                              {raffle.prizeDescription}\n                            </p>\n                            \n                            {/* Raffle Info */}\n                            <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-3\">\n                              <span className=\"flex items-center gap-1\">\n                                {getPrizeIcon(raffle.prizeType)}\n                                {getPrizeTypeText(raffle.prizeType)}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {new Date(raffle.raffleDateTime).toLocaleTimeString('fa-IR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <Users className=\"w-3 h-3\" />\n                                سطح {raffle.levelRequired}\n                              </span>\n                            </div>\n\n                            {/* Required Channels */}\n                            {raffle.requiredChannels?.length > 0 && (\n                              <div className=\"flex items-center gap-2 mb-3\">\n                                <span className=\"text-xs text-gray-500\">عضویت در:</span>\n                                <div className=\"flex gap-1 flex-wrap\">\n                                  {raffle.requiredChannels.slice(0, 3).map((channel: string, index: number) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs px-2 py-0\">\n                                      {channel}\n                                    </Badge>\n                                  ))}\n                                  {raffle.requiredChannels.length > 3 && (\n                                    <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                                      +{raffle.requiredChannels.length - 3}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                            <span className=\"flex items-center gap-1\">\n                              <Eye className=\"w-3 h-3\" />\n                              {raffle.participantCount || 0}\n                            </span>\n                            {seenRaffles?.includes?.(raffle.id) && (\n                              <span className=\"flex items-center gap-1 text-blue-500\">\n                                <CheckCircle className=\"w-3 h-3\" />\n                                مشاهده شده\n                              </span>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            {/* Favorite Button */}\n                            <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                              <Heart className=\"w-4 h-4\" />\n                            </Button>\n                            \n                            {/* Join Button */}\n                            {isRaffleEnded(raffle.raffleDateTime) ? (\n                              <Badge variant=\"outline\" className=\"text-gray-500\">\n                                <Trophy className=\"w-3 h-3 mr-1\" />\n                                پایان یافته\n                              </Badge>\n                            ) : isUserJoined(raffle.id) ? (\n                              <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                شرکت کرده\n                              </Badge>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleJoinRaffle(raffle.id);\n                                }}\n                                disabled={joinRaffleMutation.isPending}\n                                className=\"bg-telegram hover:bg-telegram/90 text-white text-xs px-3 py-1\"\n                              >\n                                شرکت در قرعه‌کشی\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </TabsContent>\n\n        {/* Submit Tab */}\n        <TabsContent value=\"submit\" className=\"space-y-4\">\n          {/* Submit New Raffle Button */}\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">قرعه‌کشی‌های ارسالی شما</h3>\n            <Dialog open={isSubmitDialogOpen} onOpenChange={setIsSubmitDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-telegram hover:bg-telegram/90\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  ثبت قرعه‌کشی جدید\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingRaffle ? \"ویرایش قرعه‌کشی\" : \"ثبت قرعه‌کشی جدید\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    اطلاعات قرعه‌کشی خود را وارد کنید\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleSubmitRaffle)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>عنوان قرعه‌کشی</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"عنوان قرعه‌کشی را وارد کنید\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"prizeDescription\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>توضیحات جایزه</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"جایزه قرعه‌کشی را شرح دهید\"\n                              className=\"resize-none\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"prizeType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>نوع جایزه</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"نوع جایزه را انتخاب کنید\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"stars\">استارز تلگرام</SelectItem>\n                              <SelectItem value=\"premium\">پریمیوم تلگرام</SelectItem>\n                              <SelectItem value=\"mixed\">ترکیبی</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"requiredChannels\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>کانال‌های الزامی</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"@channel1, @channel2\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"raffleDateTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>تاریخ و زمان قرعه‌کشی</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"datetime-local\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"channelId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>شناسه کانال</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"@your_channel\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"messageId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>شناسه پیام</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"123456\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        disabled={submitRaffleMutation.isPending}\n                        className=\"bg-telegram hover:bg-telegram/90\"\n                      >\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        {editingRaffle ? \"بروزرسانی\" : \"ارسال\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Submission Filter */}\n          <Tabs value={submissionFilter} onValueChange={setSubmissionFilter} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n              <TabsTrigger value=\"pending\" className=\"text-xs\">در انتظار</TabsTrigger>\n              <TabsTrigger value=\"approved\" className=\"text-xs\">تایید شده</TabsTrigger>\n              <TabsTrigger value=\"rejected\" className=\"text-xs\">رد شده</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={submissionFilter} className=\"space-y-4\">\n              {/* Submissions List */}\n              {submittedLoading ? (\n                <div className=\"flex justify-center py-12\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram\"></div>\n                </div>\n              ) : filteredSubmissions.length === 0 ? (\n                <Card className=\"telegram-card\">\n                  <CardContent className=\"p-8 text-center\">\n                    <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                    <div className=\"text-gray-600 dark:text-gray-400\">\n                      {submissionFilter === \"all\" && \"هنوز قرعه‌کشی‌ای ارسال نکرده‌اید\"}\n                      {submissionFilter === \"pending\" && \"قرعه‌کشی در انتظار بررسی وجود ندارد\"}\n                      {submissionFilter === \"approved\" && \"قرعه‌کشی تایید شده وجود ندارد\"}\n                      {submissionFilter === \"rejected\" && \"قرعه‌کشی رد شده وجود ندارد\"}\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredSubmissions.map((raffle: any) => (\n                    <Card key={raffle.id} className=\"telegram-card\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start gap-2 mb-2\">\n                              <h3 className=\"font-semibold text-gray-800 dark:text-gray-200 flex-1\">\n                                {raffle.title}\n                              </h3>\n                              {getStatusBadge(raffle.status)}\n                            </div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                              {raffle.prizeDescription}\n                            </p>\n                            \n                            {/* Raffle Info */}\n                            <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                              <span className=\"flex items-center gap-1\">\n                                {getPrizeIcon(raffle.prizeType)}\n                                {getPrizeTypeText(raffle.prizeType)}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-3 h-3\" />\n                                {new Date(raffle.raffleDateTime).toLocaleDateString('fa-IR')}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <FileText className=\"w-3 h-3\" />\n                                {new Date(raffle.createdAt).toLocaleDateString('fa-IR')}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            {raffle.status === \"approved\" && (\n                              <div className=\"flex items-center gap-1 text-green-600 text-xs\">\n                                <CheckCircle className=\"w-3 h-3\" />\n                                سطح مورد نیاز: {raffle.levelRequired}\n                              </div>\n                            )}\n                            {raffle.status === \"rejected\" && (\n                              <div className=\"flex items-center gap-1 text-red-600 text-xs\">\n                                <XCircle className=\"w-3 h-3\" />\n                                رد شده\n                              </div>\n                            )}\n                            {raffle.status === \"pending\" && (\n                              <div className=\"flex items-center gap-1 text-yellow-600 text-xs\">\n                                <AlertCircle className=\"w-3 h-3\" />\n                                در انتظار بررسی\n                              </div>\n                            )}\n                          </div>\n                          \n                          {raffle.status === \"rejected\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleEditRaffle(raffle)}\n                              className=\"text-xs\"\n                            >\n                              <Edit className=\"w-3 h-3 mr-1\" />\n                              ویرایش و ارسال مجدد\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":35834},"elementor-integration-guide.md":{"content":"# راهنمای کامل ادغام با Elementor و سازگاری تم‌ها\n\n## 🎯 هدف: ایجاد ویجت‌های سازگار با Elementor\n\n## مرحله ۱: نصب و تنظیم Elementor\n\n### ۱.۱ نصب افزونه‌ها\n```bash\nافزونه‌های ضروری:\n✓ Elementor (رایگان) \n✓ Elementor Pro (برای ویجت‌های پیشرفته - اختیاری)\n✓ ElementorKit - برای ویجت‌های سفارشی ما\n```\n\n### ۱.۲ تنظیمات اولیه Elementor\n1. برو به: **Elementor > Settings**\n2. **General Tab:**\n   - Disable Default Colors: ☑️ فعال\n   - Disable Default Fonts: ☑️ فعال  \n   - CSS Print Method: Internal Embedding\n\n3. **Style Tab:**\n   - Default Colors را تغییر دهید:\n     ```css\n     Primary Color: #2196F3   (رنگ اصلی تلگرام)\n     Secondary Color: #FFC107  (رنگ هشدار)\n     Text Color: #212121      (رنگ متن اصلی)\n     Accent Color: #4CAF50    (رنگ موفقیت)\n     ```\n\n## مرحله ۲: ویجت‌های سفارشی مینی‌اپ\n\n### ۲.۱ ویجت قرعه‌کشی (Raffle Widget)\n```php\n// محل قرارگیری: wp-content/plugins/telegram-raffle-plugin/elementor-widgets/\n\nنام ویجت: \"Telegram Raffle Card\"\nدسته‌بندی: \"Telegram Widgets\"\nآیکون: fa-gift\n\nتنظیمات قابل تغییر در Elementor:\n- عنوان قرعه‌کشی\n- توضیحات\n- تصویر جایزه\n- رنگ پس‌زمینه\n- رنگ دکمه\n- فونت و اندازه متن\n- فاصله‌گذاری (padding/margin)\n- انیمیشن‌ها\n```\n\n### ۲.۲ ویجت آمار کاربر (User Stats Widget)  \n```php\nنام ویجت: \"User Statistics Dashboard\"\n\nنمایش‌دهنده:\n- سطح فعلی کاربر\n- امتیاز کل\n- تعداد شرکت در قرعه‌کشی\n- تعداد دعوت‌شدگان\n\nتنظیمات Elementor:\n- طرح‌بندی (Layout): شبکه‌ای، عمودی، افقی\n- نوع نمایش: کارت، لیست، جدول\n- انیمیشن ورود\n- رنگ‌ها و فونت‌ها\n```\n\n### ۲.۳ ویجت سیستم ارجاع (Referral Widget)\n```php\nنام ویجت: \"Referral System\"\n\nقابلیت‌ها:\n- نمایش لینک دعوت\n- کپی لینک با یک کلیک\n- نمایش آمار ارجاعات\n- نمایش پاداش‌های کسب شده\n\nتنظیمات:\n- استایل دکمه‌ها\n- متن‌های قابل تغییر\n- نحوه نمایش آمار\n```\n\n### ۲.۴ ویجت پنل مدیریت (Admin Panel Widget)\n```php\nنام ویجت: \"Telegram Admin Panel\"\n\nفقط برای مدیران نمایش داده می‌شود:\n- مدیریت قرعه‌کشی‌ها  \n- مدیریت کاربران\n- آمار کلی سیستم\n- ارسال پیام همگانی\n\nتنظیمات امنیتی:\n- تشخیص خودکار مدیر\n- محدودیت دسترسی\n- لاگ عملیات\n```\n\n## مرحله ۳: سازگاری با تم‌ها\n\n### ۳.۱ کدهای CSS سازگار\n```css\n/* فایل: wp-content/themes/your-theme/telegram-raffle-styles.css */\n\n/* استایل‌های پایه - سازگار با همه تم‌ها */\n.telegram-widget {\n    box-sizing: border-box;\n    font-family: inherit; /* فونت تم فعلی را ارث می‌برد */\n    color: inherit;\n}\n\n/* ریسپانسیو - مطابق Bootstrap Grid */\n.telegram-raffle-container {\n    max-width: 100%;\n    padding: 15px;\n}\n\n@media (max-width: 768px) {\n    .telegram-stats-grid {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n}\n\n@media (min-width: 769px) {\n    .telegram-stats-grid {\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 20px;\n    }\n}\n\n@media (min-width: 1200px) {\n    .telegram-stats-grid {\n        grid-template-columns: repeat(4, 1fr);\n    }\n}\n```\n\n### ۳.۲ متغیرهای CSS برای سازگاری تم\n```css\n/* استفاده از متغیرهای CSS تم فعلی */\n.telegram-card {\n    background: var(--theme-bg-color, #ffffff);\n    color: var(--theme-text-color, #333333);\n    border: 1px solid var(--theme-border-color, #dddddd);\n    border-radius: var(--theme-border-radius, 8px);\n}\n\n.telegram-button {\n    background: var(--theme-primary-color, #2196F3);\n    color: var(--theme-button-text, #ffffff);\n    padding: var(--theme-button-padding, 12px 20px);\n}\n```\n\n## مرحله ۴: ایجاد صفحات با Elementor\n\n### ۴.۱ صفحه اصلی (Homepage)\n```\nطرح‌بندی پیشنهادی:\n1. Header Section (ویجت Header)\n2. User Stats Section (ویجت آمار کاربر)  \n3. Active Raffles Section (ویجت قرعه‌کشی‌ها)\n4. Referral Section (ویجت سیستم ارجاع)\n5. Footer Section\n```\n\n### ۴.۲ صفحه مدیریت\n```\nفقط برای مدیران قابل مشاهده:\n1. Admin Dashboard Widget\n2. Raffle Management Widget  \n3. User Management Widget\n4. Statistics Widget\n```\n\n### ۴.۳ الگوهای آماده (Templates)\n```php\n// محل فایل‌ها: wp-content/plugins/telegram-raffle-plugin/elementor-templates/\n\nالگوهای آماده:\n- raffle-homepage-template.json\n- admin-panel-template.json  \n- user-profile-template.json\n- mobile-optimized-template.json\n```\n\n## مرحله ۵: تنظیمات ریسپانسیو\n\n### ۵.۱ Breakpoint های Elementor\n```javascript\n// تنظیمات ریسپانسیو سفارشی\nElementor Custom Breakpoints:\n- Mobile: 0px - 767px\n- Tablet: 768px - 1024px\n- Desktop: 1025px+\n\nتنظیمات هر ویجت برای هر سایز:\n✓ موبایل: Single column, larger buttons\n✓ تبلت: Two columns, medium buttons  \n✓ دسکتاپ: Multi-column, standard buttons\n```\n\n### ۵.۲ تست ریسپانسیو\n```bash\nابزارهای تست:\n- Elementor Preview Mode\n- Browser Developer Tools\n- Responsive Design Mode\n- Real Device Testing\n```\n\n## مرحله ۶: بهینه‌سازی عملکرد\n\n### ۶.۱ کش و بهینه‌سازی\n```php\n// wp-config.php اضافات\ndefine('WP_CACHE', true);\ndefine('COMPRESS_CSS', true);\ndefine('COMPRESS_SCRIPTS', true);\n\n// تنظیمات کش Elementor\nElementor > Settings > Advanced:\n- CSS Print Method: External File\n- Switch frontend minify CSS: Enable\n```\n\n### ۶.۲ بارگذاری تدریجی (Lazy Loading)\n```javascript\n// JavaScript بهینه‌سازی\ndocument.addEventListener('DOMContentLoaded', function() {\n    // بارگذاری ویجت‌ها به صورت تدریجی\n    lazyLoadTelegramWidgets();\n});\n```\n\n## 🎨 راهنمای تغییر تم\n\n### تغییر آسان تم وردپرس:\n1. **قبل از تغییر تم:**\n   - بک‌آپ از سایت بگیرید\n   - ویجت‌های Elementor را Export کنید\n\n2. **بعد از تغییر تم:**\n   - ویجت‌ها خودکار سازگار می‌شوند\n   - فقط رنگ‌ها ممکن است نیاز به تنظیم داشته باشند\n   - استایل‌های سفارشی در Elementor تنظیم کنید\n\n3. **عیب‌یابی:**\n   - اگر استایل‌ها به هم ریخت: Elementor > Tools > Regenerate CSS\n   - اگر ویجت‌ها نمایش داده نمی‌شوند: افزونه را غیرفعال/فعال کنید\n\n## ⚙️ تنظیمات پیشرفته\n\n### کد سفارشی CSS:\n```css\n/* Elementor > Custom CSS */\n.elementor-telegram-widget {\n    transition: all 0.3s ease;\n}\n\n.elementor-telegram-widget:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n}\n```\n\n### کد سفارشی JavaScript:\n```javascript  \n/* Custom JS for enhanced functionality */\njQuery(document).ready(function($) {\n    // Telegram widget interactions\n    $('.telegram-raffle-join').on('click', function() {\n        // Handle raffle join with animation\n    });\n});\n```\n\n---\n🎯 **نتیجه نهایی:** \n- ویجت‌های کاملاً سازگار با Elementor\n- قابلیت تغییر آسان تم بدون از دست دادن عملکرد\n- طراحی ریسپانسیو در همه دستگاه‌ها\n- سرعت بالا و بهینه‌سازی شده\n\n📱 **تست شده روی:**\n- تم‌های پرطرفدار وردپرس\n- دستگاه‌های مختلف (موبایل، تبلت، دسکتاپ)  \n- مرورگرهای مختلف","size_bytes":8236},"file-descriptions.md":{"content":"# راهنمای تفصیلی فایل‌ها و نحوه استفاده\n\n## 📂 فایل‌های ایجاد شده\n\n### ۱. فایل‌های راهنما:\n\n#### 📄 `wordpress-deployment-guide.md`\n**نقش:** راهنمای قدم‌به‌قدم انتقال کامل مینی‌اپ به وردپرس\n**محتویات:**\n- نصب وردپرس فارسی\n- تنظیم افزونه‌های مورد نیاز\n- ساختار پوشه‌ها و فایل‌ها\n- تنظیمات دیتابیس\n- تنظیمات wp-config.php\n- عیب‌یابی مشکلات رایج\n\n**چگونه استفاده کنید:**\n1. قبل از شروع، این فایل را از ابتدا تا انتها بخوانید\n2. مرحله‌به‌مرحله دستورات را اجرا کنید\n3. هر مرحله را تیک بزنید تا گم نشوید\n\n#### 📄 `elementor-integration-guide.md`\n**نقش:** راهنمای ادغام کامل با Elementor و ایجاد ویجت‌های سفارشی\n**محتویات:**\n- نصب و تنظیم Elementor\n- ایجاد ویجت‌های مینی‌اپ\n- تنظیمات ریسپانسیو\n- بهینه‌سازی عملکرد\n- الگوهای آماده\n\n**چگونه استفاده کنید:**\n1. بعد از نصب وردپرس، این راهنما را دنبال کنید\n2. ویجت‌های معرفی شده را پیاده‌سازی کنید\n3. تنظیمات ریسپانسیو را اعمال کنید\n\n#### 📄 `theme-compatibility-guide.md`\n**نقش:** راهنمای سازگاری با تم‌های مختلف و مدیریت فایل‌ها\n**محتویات:**\n- ساختار کامل فایل‌های پروژه\n- توضیح نقش هر فایل\n- راهنمای سازگاری تم‌ها\n- فرآیند به‌روزرسانی\n- عیب‌یابی پیشرفته\n\n**چگونه استفاده کنید:**\n1. هنگام تغییر تم از این راهنما استفاده کنید\n2. برای درک ساختار پروژه مطالعه کنید\n3. برای حل مشکلات پیچیده مراجعه کنید\n\n#### 📄 `file-descriptions.md` (همین فایل)\n**نقش:** راهنمای کلی همه فایل‌ها و نحوه استفاده\n\n---\n\n## 🎯 نحوه شروع کار\n\n### مرحله ۱: آماده‌سازی\n```bash\nمطالعه ضروری:\n1️⃣ ابتدا file-descriptions.md (همین فایل)\n2️⃣ سپس wordpress-deployment-guide.md\n3️⃣ در آخر elementor-integration-guide.md\n4️⃣ در صورت نیاز theme-compatibility-guide.md\n```\n\n### مرحله ۲: اجرای عملیات\n```bash\nترتیب اجرا:\n1. نصب وردپرس فارسی روی هاست\n2. دانلود و آماده‌سازی فایل‌های مینی‌اپ  \n3. پیروی از wordpress-deployment-guide.md\n4. پیاده‌سازی ویجت‌ها با elementor-integration-guide.md\n5. تست و عیب‌یابی\n```\n\n---\n\n## 🔧 فایل‌هایی که باید خودتان ایجاد کنید\n\n### ۱. قالب وردپرس (Theme)\n**مسیر:** `wp-content/themes/telegram-raffle-theme/`\n\n#### 📄 `style.css`\n```css\n/*\nTheme Name: قالب مینی‌اپ قرعه‌کشی تلگرام\nDescription: قالب سازگار با Elementor برای مینی‌اپ تلگرام\nVersion: 1.0\nAuthor: نام شما\n*/\n\n/* استایل‌های اصلی */\n:root {\n    --telegram-blue: #2196F3;\n    --telegram-secondary: #FFC107;\n    --telegram-success: #4CAF50;\n    --telegram-warning: #FF9800;\n    --telegram-danger: #F44336;\n    --telegram-dark: #212121;\n    --telegram-light: #FAFAFA;\n}\n\nbody {\n    font-family: 'Vazirmatn', 'Tahoma', sans-serif;\n    direction: rtl;\n    text-align: right;\n}\n\n/* ریسپانسیو */\n@media (max-width: 768px) {\n    .telegram-container {\n        padding: 15px;\n    }\n}\n\n@media (min-width: 769px) {\n    .telegram-container {\n        padding: 30px;\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n}\n\n/* سازگاری با تم‌های مختلف */\n.telegram-widget {\n    background: var(--theme-bg-color, white);\n    color: var(--theme-text-color, var(--telegram-dark));\n    border-radius: var(--theme-border-radius, 8px);\n    padding: 20px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    margin-bottom: 20px;\n}\n\n.telegram-button {\n    background: var(--theme-primary-color, var(--telegram-blue));\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: var(--theme-border-radius, 6px);\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.telegram-button:hover {\n    background: var(--theme-primary-hover, #1976D2);\n    transform: translateY(-2px);\n}\n\n/* انیمیشن‌ها */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.animate-fade-in-up {\n    animation: fadeInUp 0.6s ease-out;\n}\n```\n\n#### 📄 `functions.php`\n```php\n<?php\n// جلوگیری از دسترسی مستقیم\nif (!defined('ABSPATH')) exit;\n\n// بارگذاری استایل‌ها و اسکریپت‌ها\nfunction telegram_raffle_enqueue_assets() {\n    // CSS اصلی\n    wp_enqueue_style(\n        'telegram-raffle-style',\n        get_template_directory_uri() . '/style.css',\n        array(),\n        '1.0.0'\n    );\n    \n    // فونت فارسی\n    wp_enqueue_style(\n        'vazirmatn-font',\n        'https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;500;600;700&display=swap',\n        array(),\n        null\n    );\n    \n    // JavaScript اصلی\n    wp_enqueue_script(\n        'telegram-raffle-script',\n        get_template_directory_uri() . '/assets/js/main.js',\n        array('jquery'),\n        '1.0.0',\n        true\n    );\n    \n    // تنظیمات AJAX\n    wp_localize_script('telegram-raffle-script', 'telegram_ajax', array(\n        'ajax_url' => admin_url('admin-ajax.php'),\n        'nonce' => wp_create_nonce('telegram_nonce')\n    ));\n}\nadd_action('wp_enqueue_scripts', 'telegram_raffle_enqueue_assets');\n\n// پشتیبانی از Elementor\nfunction telegram_raffle_theme_support() {\n    // پشتیبانی از تصاویر شاخص\n    add_theme_support('post-thumbnails');\n    \n    // پشتیبانی از عنوان خودکار\n    add_theme_support('title-tag');\n    \n    // پشتیبانی از HTML5\n    add_theme_support('html5', array(\n        'search-form',\n        'comment-form', \n        'comment-list',\n        'gallery',\n        'caption'\n    ));\n    \n    // پشتیبانی از رنگ‌های سفارشی\n    add_theme_support('custom-background');\n    add_theme_support('custom-logo');\n    \n    // پشتیبانی از Elementor\n    add_theme_support('elementor');\n}\nadd_action('after_setup_theme', 'telegram_raffle_theme_support');\n\n// ثبت منوها\nfunction telegram_raffle_register_menus() {\n    register_nav_menus(array(\n        'main-menu' => 'منوی اصلی',\n        'footer-menu' => 'منوی فوتر'\n    ));\n}\nadd_action('init', 'telegram_raffle_register_menus');\n\n// ثبت sidebar ها\nfunction telegram_raffle_register_sidebars() {\n    register_sidebar(array(\n        'name' => 'نوار کناری اصلی',\n        'id' => 'main-sidebar',\n        'description' => 'نوار کناری صفحات اصلی',\n        'before_widget' => '<div class=\"widget %2$s\">',\n        'after_widget' => '</div>',\n        'before_title' => '<h3 class=\"widget-title\">',\n        'after_title' => '</h3>'\n    ));\n}\nadd_action('widgets_init', 'telegram_raffle_register_sidebars');\n\n// حذف نسخه وردپرس از header (امنیت)\nremove_action('wp_head', 'wp_generator');\n\n// فعال‌سازی کش\nfunction telegram_raffle_cache_headers() {\n    if (!is_admin()) {\n        header('Cache-Control: max-age=3600');\n    }\n}\nadd_action('send_headers', 'telegram_raffle_cache_headers');\n```\n\n#### 📄 `index.php`\n```php\n<?php get_header(); ?>\n\n<div class=\"telegram-container\">\n    <main class=\"main-content\">\n        \n        <?php if (have_posts()) : ?>\n            <div class=\"posts-container\">\n                <?php while (have_posts()) : the_post(); ?>\n                    <article class=\"telegram-widget animate-fade-in-up\">\n                        <h2><a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a></h2>\n                        <div class=\"post-meta\">\n                            <span>تاریخ: <?php echo get_the_date('j F Y'); ?></span>\n                            <span>نویسنده: <?php the_author(); ?></span>\n                        </div>\n                        \n                        <?php if (has_post_thumbnail()) : ?>\n                            <div class=\"post-thumbnail\">\n                                <?php the_post_thumbnail('medium'); ?>\n                            </div>\n                        <?php endif; ?>\n                        \n                        <div class=\"post-excerpt\">\n                            <?php the_excerpt(); ?>\n                        </div>\n                        \n                        <a href=\"<?php the_permalink(); ?>\" class=\"telegram-button\">\n                            ادامه مطلب\n                        </a>\n                    </article>\n                <?php endwhile; ?>\n            </div>\n            \n            <!-- صفحه‌بندی -->\n            <div class=\"pagination\">\n                <?php\n                echo paginate_links(array(\n                    'prev_text' => '← قبلی',\n                    'next_text' => 'بعدی →'\n                ));\n                ?>\n            </div>\n            \n        <?php else : ?>\n            <div class=\"telegram-widget\">\n                <h2>محتوایی یافت نشد</h2>\n                <p>متأسفانه محتوای مورد نظر پیدا نشد.</p>\n            </div>\n        <?php endif; ?>\n        \n    </main>\n    \n    <?php get_sidebar(); ?>\n</div>\n\n<?php get_footer(); ?>\n```\n\n### ۲. افزونه اصلی (Plugin)\n**مسیر:** `wp-content/plugins/telegram-raffle-plugin/`\n\n#### 📄 `telegram-raffle.php`\n```php\n<?php\n/**\n * Plugin Name: مینی‌اپ قرعه‌کشی تلگرام\n * Plugin URI: https://yourdomain.com\n * Description: سیستم کامل مدیریت قرعه‌کشی تلگرام برای وردپرس با پشتیبانی از Elementor\n * Version: 1.0.0\n * Author: نام شما\n * Author URI: https://yourdomain.com\n * Text Domain: telegram-raffle\n * Domain Path: /languages\n * Requires at least: 5.0\n * Tested up to: 6.4\n * Requires PHP: 7.4\n * License: GPL v2 or later\n * License URI: https://www.gnu.org/licenses/gpl-2.0.html\n */\n\n// امنیت - جلوگیری از دسترسی مستقیم\nif (!defined('ABSPATH')) {\n    exit('دسترسی مستقیم مجاز نیست.');\n}\n\n// تعریف ثوابت\ndefine('TELEGRAM_RAFFLE_VERSION', '1.0.0');\ndefine('TELEGRAM_RAFFLE_PLUGIN_URL', plugin_dir_url(__FILE__));\ndefine('TELEGRAM_RAFFLE_PLUGIN_PATH', plugin_dir_path(__FILE__));\n\n// بارگذاری کلاس اصلی\nrequire_once TELEGRAM_RAFFLE_PLUGIN_PATH . 'includes/class-telegram-raffle.php';\n\n// فعال‌سازی افزونه\nregister_activation_hook(__FILE__, array('TelegramRaffle', 'activate'));\n\n// غیرفعال‌سازی افزونه  \nregister_deactivation_hook(__FILE__, array('TelegramRaffle', 'deactivate'));\n\n// حذف افزونه\nregister_uninstall_hook(__FILE__, array('TelegramRaffle', 'uninstall'));\n\n// راه‌اندازی افزونه\nfunction telegram_raffle_init() {\n    new TelegramRaffle();\n}\nadd_action('plugins_loaded', 'telegram_raffle_init');\n\n// بارگذاری متن‌های ترجمه\nfunction telegram_raffle_load_textdomain() {\n    load_plugin_textdomain('telegram-raffle', false, dirname(plugin_basename(__FILE__)) . '/languages');\n}\nadd_action('plugins_loaded', 'telegram_raffle_load_textdomain');\n```\n\n---\n\n## 🚀 مراحل پیاده‌سازی\n\n### گام ۱: ایجاد ساختار پایه\n```bash\n1. ایجاد پوشه قالب: wp-content/themes/telegram-raffle-theme/\n2. ایجاد پوشه افزونه: wp-content/plugins/telegram-raffle-plugin/\n3. کپی فایل‌های موجود مینی‌اپ\n4. تبدیل React components به PHP templates\n5. تبدیل Express.js routes به WordPress REST API\n```\n\n### گام ۲: تنظیم دیتابیس\n```sql\n-- جداولی که باید ایجاد شوند:\nwp_telegram_users\nwp_telegram_raffles  \nwp_telegram_participants\nwp_telegram_messages\nwp_telegram_referrals\n```\n\n### گام ۳: پیاده‌سازی API\n```php\n// مسیرهای API که باید ایجاد شوند:\n/wp-json/telegram/v1/webhook          # Webhook تلگرام\n/wp-json/telegram/v1/raffles          # لیست قرعه‌کشی‌ها\n/wp-json/telegram/v1/raffles/{id}/join # شرکت در قرعه‌کشی\n/wp-json/telegram/v1/user/profile     # پروفایل کاربر  \n/wp-json/telegram/v1/user/stats       # آمار کاربر\n/wp-json/telegram/v1/admin/manage     # پنل مدیریت\n```\n\n### گام ۴: ایجاد ویجت‌های Elementor\n```php\n// ویجت‌هایی که باید ایجاد شوند:\n- Telegram_Raffle_Card_Widget         # کارت قرعه‌کشی\n- Telegram_User_Stats_Widget          # آمار کاربر\n- Telegram_Referral_Widget            # سیستم ارجاع  \n- Telegram_Admin_Panel_Widget         # پنل مدیریت\n```\n\n---\n\n## 📞 راهنمای پشتیبانی\n\n### مشکلات رایج و راه‌حل:\n\n#### ❌ خطا: \"افزونه فعال نمی‌شود\"\n**علت:** مشکل در کد PHP یا عدم سازگاری نسخه  \n**راه‌حل:** \n1. لاگ‌های خطا را بررسی کنید\n2. نسخه PHP را چک کنید (حداقل 7.4)\n3. کد PHP را از نظر syntax بررسی کنید\n\n#### ❌ خطا: \"API کار نمی‌کند\"  \n**علت:** تنظیمات Permalink یا .htaccess\n**راه‌حل:**\n1. Settings > Permalinks > Save Changes\n2. .htaccess را بررسی کنید\n3. مجوزهای فایل‌ها را چک کنید\n\n#### ❌ خطا: \"ویجت‌ها نمایش داده نمی‌شوند\"\n**علت:** تداخل CSS یا JavaScript\n**راه‌حل:**\n1. Elementor > Tools > Regenerate CSS\n2. کش مرورگر را پاک کنید\n3. تم را موقتاً تغییر دهید و دوباره فعال کنید\n\n---\n\n## ✅ چک‌لیست نهایی\n\n### قبل از انتشار:\n- [ ] تمام فایل‌های راهنما مطالعه شده\n- [ ] وردپرس نصب و تست شده  \n- [ ] افزونه‌های مورد نیاز نصب شده\n- [ ] قالب آپلود و فعال شده\n- [ ] افزونه اصلی آپلود و فعال شده\n- [ ] تنظیمات wp-config.php انجام شده\n- [ ] API endpoints تست شده\n- [ ] ویجت‌های Elementor کار می‌کنند\n- [ ] طراحی در موبایل و دسکتاپ تست شده\n- [ ] تغییر تم تست شده\n- [ ] بک‌آپ کامل گرفته شده\n\n### بعد از انتشار:\n- [ ] SSL نصب شده (https)\n- [ ] Webhook تلگرام تنظیم شده\n- [ ] کش فعال شده\n- [ ] آمار و مانیتورینگ راه‌اندازی شده\n- [ ] بک‌آپ‌گیری خودکار تنظیم شده\n\n---\n\n**📚 یادآوری:** این فایل‌ها راهنمای کاملی هستند. حتماً به ترتیب مطالعه کنید و هر مرحله را با دقت اجرا نمایید.\n\n**🎯 هدف نهایی:** داشتن یک مینی‌اپ کاملاً کاربردی در وردپرس که با هر تمی سازگار باشد و امکانات کامل تلگرام را داشته باشد.","size_bytes":15577},"theme-compatibility-guide.md":{"content":"# راهنمای جامع سازگاری تم و فایل‌ها\n\n## 📁 ساختار کامل فایل‌های پروژه\n\n### ساختار اصلی پس از انتقال:\n```\nWordPress Root/\n│\n├── wp-config.php                    # 🔧 تنظیمات اصلی - حاوی اطلاعات حیاتی\n├── .htaccess                        # ⚙️ قوانین سرور و امنیت\n│\n├── wp-content/\n│   ├── themes/\n│   │   └── telegram-raffle-theme/   # 🎨 قالب اصلی مینی‌اپ\n│   │       ├── style.css           # استایل اصلی\n│   │       ├── functions.php       # توابع قالب\n│   │       ├── index.php          # صفحه اصلی\n│   │       ├── header.php         # سربرگ\n│   │       ├── footer.php         # پاورقی  \n│   │       ├── assets/            # فایل‌های استاتیک\n│   │       │   ├── css/\n│   │       │   ├── js/\n│   │       │   └── images/\n│   │       └── elementor-widgets/  # ویجت‌های Elementor\n│   │\n│   ├── plugins/\n│   │   └── telegram-raffle-plugin/ # 🔌 افزونه اصلی مینی‌اپ\n│   │       ├── telegram-raffle.php        # فایل اصلی افزونه\n│   │       ├── includes/                  # کلاس‌ها و توابع\n│   │       │   ├── class-database.php     # مدیریت دیتابیس\n│   │       │   ├── class-api.php          # API endpoints\n│   │       │   ├── class-telegram.php     # ارتباط با تلگرام\n│   │       │   └── class-auth.php         # احراز هویت\n│   │       ├── admin/                     # پنل مدیریت وردپرس\n│   │       ├── public/                    # فایل‌های عمومی\n│   │       └── elementor-widgets/         # ویجت‌های Elementor\n│   │\n│   └── uploads/\n│       └── telegram-raffle/        # 📁 فایل‌های آپلود شده\n│           ├── raffles/            # تصاویر قرعه‌کشی‌ها\n│           ├── users/              # آواتار کاربران\n│           └── temp/               # فایل‌های موقت\n│\n└── راهنماها/                        # 📚 فایل‌های راهنما\n    ├── wordpress-deployment-guide.md\n    ├── elementor-integration-guide.md\n    ├── theme-compatibility-guide.md\n    └── file-descriptions.md        # توضیح هر فایل (همین فایل)\n```\n\n## 🔧 فایل‌های کلیدی و نقش هر کدام\n\n### 1️⃣ فایل wp-config.php\n```php\n<?php\n// 🚨 فایل حیاتی - شامل تمام تنظیمات مهم\n\n// اطلاعات دیتابیس - باید تغییر کند\ndefine('DB_NAME', 'نام_دیتابیس_جدید');\ndefine('DB_USER', 'نام_کاربری_دیتابیس');  \ndefine('DB_PASSWORD', 'رمز_دیتابیس');\ndefine('DB_HOST', 'localhost'); // یا آدرس سرور دیتابیس\n\n// 🤖 تنظیمات ربات تلگرام - حتماً تغییر دهید\ndefine('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE');\ndefine('TELEGRAM_WEBHOOK_URL', 'https://domain.com/wp-json/telegram/v1/webhook');\n\n// 👑 مدیران اصلی - آیدی عددی تلگرام\ndefine('BOT_ADMINS', '123456789,987654321'); \ndefine('CHANNEL_ADMINS', '111222333,444555666');\n\n// 🔐 کلیدهای امنیتی وردپرس - تولید خودکار\ndefine('AUTH_KEY',         'رشته تصادفی امنیتی...');\ndefine('SECURE_AUTH_KEY',  'رشته تصادفی امنیتی...');\ndefine('LOGGED_IN_KEY',    'رشته تصادفی امنیتی...');\ndefine('NONCE_KEY',        'رشته تصادفی امنیتی...');\n// ... سایر کلیدها\n\n// تنظیمات اضافی مینی‌اپ\ndefine('TELEGRAM_API_ENABLED', true);\ndefine('RAFFLE_AUTO_APPROVE', false); // قرعه‌کشی‌ها باید تایید شوند\ndefine('USER_REGISTRATION_ENABLED', true);\ndefine('REFERRAL_POINTS', 50); // امتیاز دعوت از دوستان\n\n// تنظیمات توسعه (در محیط تولید false کنید)\ndefine('WP_DEBUG', true);\ndefine('WP_DEBUG_LOG', true);\ndefine('WP_DEBUG_DISPLAY', false);\n\n// تنظیمات کش و بهینه‌سازی\ndefine('WP_CACHE', true);\ndefine('COMPRESS_CSS', true);\ndefine('COMPRESS_SCRIPTS', true);\n```\n\n### 2️⃣ فایل افزونه اصلی (telegram-raffle.php)\n```php\n<?php\n/**\n * Plugin Name: مینی‌اپ قرعه‌کشی تلگرام\n * Description: سیستم کامل مدیریت قرعه‌کشی تلگرام برای وردپرس\n * Version: 1.0.0\n * Author: نام شما\n */\n\n// 🚨 امنیت - جلوگیری از دسترسی مستقیم\nif (!defined('ABSPATH')) {\n    exit;\n}\n\n// بارگذاری کلاس‌های اصلی\nrequire_once plugin_dir_path(__FILE__) . 'includes/class-database.php';\nrequire_once plugin_dir_path(__FILE__) . 'includes/class-api.php';\nrequire_once plugin_dir_path(__FILE__) . 'includes/class-telegram.php';\nrequire_once plugin_dir_path(__FILE__) . 'includes/class-auth.php';\n\n// فعال‌سازی افزونه - ایجاد جداول دیتابیس\nregister_activation_hook(__FILE__, 'telegram_raffle_activate');\nfunction telegram_raffle_activate() {\n    $database = new TelegramRaffleDatabase();\n    $database->create_tables(); // ایجاد جداول مورد نیاز\n}\n\n// غیرفعال‌سازی افزونه\nregister_deactivation_hook(__FILE__, 'telegram_raffle_deactivate');\nfunction telegram_raffle_deactivate() {\n    // پاک‌سازی cache ها و تنظیمات موقت\n}\n```\n\n### 3️⃣ فایل مدیریت دیتابیس (class-database.php)\n```php\n<?php\nclass TelegramRaffleDatabase {\n    \n    // ایجاد جداول مورد نیاز\n    public function create_tables() {\n        global $wpdb;\n        \n        // جدول کاربران تلگرام\n        $table_users = $wpdb->prefix . 'telegram_users';\n        $sql_users = \"CREATE TABLE IF NOT EXISTS $table_users (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            telegram_id varchar(255) NOT NULL UNIQUE,\n            username varchar(255),\n            first_name varchar(255),\n            last_name varchar(255),\n            user_type enum('regular', 'channel_admin', 'bot_admin') DEFAULT 'regular',\n            level int(11) DEFAULT 1,\n            points int(11) DEFAULT 0,\n            referral_code varchar(100),\n            referrer_id int(11) NULL,\n            is_active tinyint(1) DEFAULT 1,\n            last_activity datetime,\n            created_at datetime DEFAULT CURRENT_TIMESTAMP,\n            PRIMARY KEY (id),\n            KEY telegram_id (telegram_id),\n            KEY user_type (user_type)\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n        \n        // جدول قرعه‌کشی‌ها\n        $table_raffles = $wpdb->prefix . 'telegram_raffles';\n        $sql_raffles = \"CREATE TABLE IF NOT EXISTS $table_raffles (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            title varchar(500) NOT NULL,\n            description text,\n            prize varchar(500),\n            image_url varchar(500),\n            status enum('pending', 'approved', 'rejected', 'completed', 'cancelled') DEFAULT 'pending',\n            level_required int(11) DEFAULT 1,\n            creator_id int(11),\n            winners_count int(11) DEFAULT 1,\n            max_participants int(11) DEFAULT 0,\n            start_date datetime,\n            end_date datetime,\n            created_at datetime DEFAULT CURRENT_TIMESTAMP,\n            approved_by int(11) NULL,\n            approved_at datetime NULL,\n            PRIMARY KEY (id),\n            KEY status (status),\n            KEY level_required (level_required),\n            KEY creator_id (creator_id)\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n        \n        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');\n        dbDelta($sql_users);\n        dbDelta($sql_raffles);\n    }\n    \n    // سایر متدها...\n}\n```\n\n### 4️⃣ فایل API (class-api.php)\n```php\n<?php\nclass TelegramRaffleAPI {\n    \n    public function __construct() {\n        // ثبت مسیرهای API\n        add_action('rest_api_init', array($this, 'register_routes'));\n    }\n    \n    public function register_routes() {\n        // مسیر اصلی API\n        register_rest_route('telegram/v1', '/webhook', array(\n            'methods' => 'POST',\n            'callback' => array($this, 'handle_webhook'),\n            'permission_callback' => array($this, 'verify_telegram_request')\n        ));\n        \n        // مسیر دریافت قرعه‌کشی‌ها\n        register_rest_route('telegram/v1', '/raffles', array(\n            'methods' => 'GET',\n            'callback' => array($this, 'get_raffles'),\n            'permission_callback' => '__return_true'\n        ));\n        \n        // مسیر شرکت در قرعه‌کشی\n        register_rest_route('telegram/v1', '/raffles/(?P<id>\\d+)/join', array(\n            'methods' => 'POST',\n            'callback' => array($this, 'join_raffle'),\n            'permission_callback' => array($this, 'verify_user_auth')\n        ));\n    }\n    \n    // پردازش webhook تلگرام\n    public function handle_webhook($request) {\n        $data = $request->get_json_params();\n        \n        if (isset($data['message'])) {\n            return $this->process_message($data['message']);\n        }\n        \n        if (isset($data['callback_query'])) {\n            return $this->process_callback_query($data['callback_query']);\n        }\n        \n        return new WP_REST_Response('OK', 200);\n    }\n}\n```\n\n## 🎨 راهنمای سازگاری تم\n\n### چگونه با هر تم وردپرس کار می‌کند:\n\n#### 1️⃣ تم‌های محبوب تست شده:\n```\n✅ Astra - کاملاً سازگار\n✅ GeneratePress - سازگار\n✅ OceanWP - سازگار  \n✅ Neve - سازگار\n✅ Twenty Twenty-Four - سازگار\n✅ Blocksy - سازگار\n✅ Kadence - سازگار\n```\n\n#### 2️⃣ نحوه عملکرد سازگاری:\n```css\n/* استایل‌های ما از متغیرهای تم استفاده می‌کنند */\n\n.telegram-widget {\n    /* از رنگ اصلی تم استفاده می‌کند */\n    background-color: var(--theme-primary-color, #2196F3);\n    \n    /* از فونت تم استفاده می‌کند */  \n    font-family: var(--theme-font-family, inherit);\n    \n    /* از border-radius تم استفاده می‌کند */\n    border-radius: var(--theme-border-radius, 8px);\n}\n```\n\n#### 3️⃣ تست تغییر تم:\n1. **قبل از تغییر:** بک‌آپ بگیرید\n2. **تغییر تم:** از بخش Appearance > Themes\n3. **بعد از تغییر:** \n   - رنگ‌ها خودکار تطبیق می‌یابند\n   - فونت‌ها خودکار تغییر می‌کنند\n   - Layout خودکار سازگار می‌شود\n\n## 🔄 فرآیند به‌روزرسانی\n\n### هنگام به‌روزرسانی افزونه:\n```php\n// فایل: includes/class-updater.php\n\nclass TelegramRaffleUpdater {\n    public function check_version() {\n        $current_version = get_option('telegram_raffle_version', '1.0.0');\n        $new_version = '1.1.0'; // نسخه جدید\n        \n        if (version_compare($current_version, $new_version, '<')) {\n            $this->run_updates($current_version, $new_version);\n        }\n    }\n    \n    private function run_updates($from, $to) {\n        // به‌روزرسانی دیتابیس\n        // به‌روزرسانی تنظیمات\n        // پاک‌سازی کش\n    }\n}\n```\n\n## 🚨 عیب‌یابی مشکلات رایج\n\n### مشکل 1: ویجت‌ها نمایش داده نمی‌شوند\n**علت:** تداخل با تم جدید  \n**راه‌حل:**\n1. برو به Elementor > Tools\n2. کلیک کن روی \"Regenerate CSS & Data\"\n3. کش مرورگر را پاک کن\n\n### مشکل 2: API کار نمی‌کند\n**علت:** تنظیمات Permalink  \n**راه‌حل:**\n1. برو به Settings > Permalinks\n2. روی \"Save Changes\" کلیک کن\n3. .htaccess را بررسی کن\n\n### مشکل 3: استایل‌ها به هم ریخته\n**علت:** تداخل CSS  \n**راه‌حل:**\n```css\n/* اضافه کردن این کد به Elementor > Custom CSS */\n.telegram-widget {\n    all: initial; /* ریست کردن همه استایل‌ها */\n    font-family: inherit;\n    direction: rtl;\n}\n```\n\n## 📋 چک‌لیست نگهداری\n\n### هفتگی:\n- [ ] بررسی لاگ‌های خطا\n- [ ] تست API endpoints  \n- [ ] بررسی عملکرد سایت\n- [ ] بک‌آپ از دیتابیس\n\n### ماهانه:\n- [ ] به‌روزرسانی افزونه‌ها\n- [ ] بررسی امنیت\n- [ ] پاک‌سازی فایل‌های موقت\n- [ ] بهینه‌سازی دیتابیس\n\n### بک‌آپ ضروری:\n```bash\nفایل‌های حیاتی برای بک‌آپ:\n✓ wp-config.php\n✓ پوشه wp-content/plugins/telegram-raffle-plugin/\n✓ پوشه wp-content/themes/telegram-raffle-theme/\n✓ دیتابیس کامل\n✓ فایل .htaccess\n```\n\n---\n\n## 📞 پشتیبانی و تماس\n\nاگر مشکلی پیش آمد:\n1. ابتدا این راهنما را مطالعه کنید\n2. بخش عیب‌یابی را بررسی کنید  \n3. در صورت عدم حل مشکل، با سازنده تماس بگیرید\n\n**📧 اطلاعات تماس:** [اطلاعات تماس شما]  \n**🌐 وب‌سایت:** [وب‌سایت شما]\n**📱 پشتیبانی:** [شماره پشتیبانی]\n\n---\n**📅 آخرین بروزرسانی:** $(date)  \n**📖 نسخه راهنما:** 1.0  \n**✍️ نویسنده:** سیستم هوشمند انتقال مینی‌اپ","size_bytes":13860},"wordpress-deployment-guide.md":{"content":"# راهنمای کامل انتقال مینی‌اپ تلگرام به وردپرس\n\n## مرحله ۱: آماده‌سازی هاست وردپرس\n\n### ۱.۱ نصب وردپرس فارسی\n1. وردپرس فارسی را از آدرس زیر دانلود کنید:\n   ```\n   https://fa.wordpress.org/\n   ```\n\n2. پایگاه داده MySQL ایجاد کنید:\n   - نام دیتابیس: `telegram_raffle_wp`\n   - کاربر: (نام کاربری دلخواه)\n   - رمز عبور: (رمز قوی)\n\n3. وردپرس را نصب و راه‌اندازی کنید\n\n### ۱.۲ نصب افزونه‌های ضروری\n```bash\nافزونه‌های مورد نیاز:\n- Elementor (رایگان)\n- Elementor Pro (اختیاری برای ویجت‌های پیشرفته)\n- Custom Post Type UI\n- Advanced Custom Fields (ACF)\n- WP REST API Controller\n```\n\n## مرحله ۲: آپلود فایل‌های مینی‌اپ\n\n### ۲.۱ ساختار پوشه‌های وردپرس\n```\nwp-content/\n├── themes/\n│   └── telegram-raffle-theme/     # قالب اصلی\n├── plugins/\n│   └── telegram-raffle-plugin/    # افزونه اصلی\n└── uploads/\n    └── raffle-assets/             # فایل‌های رسانه‌ای\n```\n\n### ۲.۲ فایل‌های قابل انتقال از مینی‌اپ فعلی\n```\nانتقال این فایل‌ها:\n✓ تمام تصاویر و آیکون‌ها → wp-content/uploads/raffle-assets/\n✓ کدهای CSS → قالب وردپرس\n✓ کدهای JavaScript → قالب وردپرس\n✓ منطق API → افزونه وردپرس\n✓ اطلاعات دیتابیس → جداول سفارشی وردپرس\n```\n\n## مرحله ۳: تنظیمات دیتابیس\n\n### ۳.۱ جداول مورد نیاز (اضافه شدن به وردپرس)\n```sql\n-- این کدها در افزونه به صورت خودکار اجرا می‌شوند\n\nCREATE TABLE IF NOT EXISTS wp_telegram_users (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    telegram_id varchar(255) NOT NULL,\n    username varchar(255),\n    first_name varchar(255),\n    last_name varchar(255),\n    user_type enum('regular', 'channel_admin', 'bot_admin') DEFAULT 'regular',\n    level int(11) DEFAULT 1,\n    points int(11) DEFAULT 0,\n    referral_code varchar(100),\n    created_at datetime DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    UNIQUE KEY telegram_id (telegram_id)\n);\n\nCREATE TABLE IF NOT EXISTS wp_telegram_raffles (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    title varchar(500) NOT NULL,\n    description text,\n    prize varchar(500),\n    status enum('pending', 'approved', 'rejected', 'completed') DEFAULT 'pending',\n    level_required int(11) DEFAULT 1,\n    creator_id int(11),\n    winners_count int(11) DEFAULT 1,\n    start_date datetime,\n    end_date datetime,\n    created_at datetime DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n);\n```\n\n## مرحله ۴: تنظیمات کانفیگ\n\n### ۴.۱ فایل wp-config.php (اضافه کردن این خطوط)\n```php\n// تنظیمات مینی‌اپ تلگرام\ndefine('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE');\ndefine('TELEGRAM_WEBHOOK_URL', 'https://yourdomain.com/wp-json/telegram/v1/webhook');\n\n// تنظیمات مدیران (آیدی عددی تلگرام)\ndefine('BOT_ADMINS', '123456789,987654321'); // آیدی‌های عددی مدیران اصلی\ndefine('CHANNEL_ADMINS', '111222333,444555666'); // آیدی‌های مدیران کانال\n\n// تنظیمات API\ndefine('TELEGRAM_API_ENABLED', true);\ndefine('WP_DEBUG', true); // برای مرحله توسعه\n```\n\n### ۴.۲ فایل .htaccess (اضافه کردن قوانین)\n```apache\n# قوانین مینی‌اپ تلگرام\nRewriteEngine On\n\n# امنیت API\n<Files \"wp-config.php\">\n    Order allow,deny\n    Deny from all\n</Files>\n\n# کش فایل‌های استاتیک\n<IfModule mod_expires.c>\n    ExpiresActive On\n    ExpiresByType text/css \"access plus 1 year\"\n    ExpiresByType application/javascript \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n</IfModule>\n```\n\n## مرحله ۵: تست و راه‌اندازی\n\n### ۵.۱ چک‌لیست نهایی\n```\n☐ وردپرس نصب شده و کار می‌کند\n☐ افزونه‌های مورد نیاز نصب شده‌اند\n☐ قالب آپلود و فعال شده\n☐ افزونه مینی‌اپ آپلود و فعال شده\n☐ تنظیمات wp-config.php انجام شده\n☐ دیتابیس متصل است\n☐ Webhook تلگرام تنظیم شده\n☐ صفحات اصلی ایجاد شده‌اند\n```\n\n### ۵.۲ تست عملکرد\n1. آدرس سایت را در مرورگر باز کنید\n2. بخش مدیریت وردپرس را بررسی کنید\n3. API endpoints را تست کنید:\n   ```\n   https://yourdomain.com/wp-json/telegram/v1/test\n   ```\n\n## ⚠️ نکات مهم امنیتی\n\n1. **حتماً رمز عبور قوی استفاده کنید**\n2. **توکن ربات تلگرام را محرمانه نگه دارید**\n3. **SSL certificate نصب کنید (https)**\n4. **بک‌آپ منظم از دیتابیس بگیرید**\n\n## 🚨 عیب‌یابی مشکلات رایج\n\n### مشکل: API کار نمی‌کند\n**راه‌حل:** \n- تنظیمات Permalink را بررسی کنید (Settings > Permalinks)\n- REST API وردپرس فعال باشد\n\n### مشکل: دیتابیس متصل نمی‌شود\n**راه‌حل:**\n- اطلاعات دیتابیس در wp-config.php را بررسی کنید\n- مجوزهای کاربر دیتابیس را چک کنید\n\n### مشکل: تلگرام webhook کار نمی‌کند  \n**راه‌حل:**\n- SSL certificate معتبر داشته باشید\n- آدرس webhook در تنظیمات ربات صحیح باشد\n\n---\n📅 **تاریخ آخرین بروزرسانی:** $(date)\n👨‍💻 **نسخه راهنما:** 1.0\n📧 **پشتیبانی:** برای مشکلات فنی با سازنده تماس بگیرید","size_bytes":6053},"client/src/components/raffle-submission-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, Star, Crown, Send, Plus } from \"lucide-react\";\n\n// Schema for raffle submission form\nconst raffleSubmissionSchema = z.object({\n  channelId: z.string().min(1, \"شناسه کانال الزامی است\"),\n  messageId: z.string().min(1, \"شناسه پیام الزامی است\"),\n  title: z.string().min(3, \"عنوان باید حداقل ۳ کاراکتر باشد\"),\n  prizeType: z.enum([\"stars\", \"premium\", \"mixed\"], {\n    required_error: \"نوع جایزه را انتخاب کنید\"\n  }),\n  prizeValue: z.number().min(1, \"مقدار جایزه باید مثبت باشد\").optional(),\n  requiredChannels: z.string().min(1, \"حداقل یک کانال الزامی است\"),\n  raffleDateTime: z.string().min(1, \"تاریخ و زمان الزامی است\"),\n});\n\ntype RaffleSubmissionData = z.infer<typeof raffleSubmissionSchema>;\n\ninterface RaffleSubmissionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function RaffleSubmissionDialog({ open, onOpenChange }: RaffleSubmissionDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RaffleSubmissionData>({\n    resolver: zodResolver(raffleSubmissionSchema),\n    defaultValues: {\n      channelId: \"\",\n      messageId: \"\",\n      title: \"\",\n      prizeType: \"stars\",\n      prizeValue: 0,\n      requiredChannels: \"\",\n      raffleDateTime: \"\",\n    }\n  });\n\n  // Submit raffle mutation\n  const submitRaffleMutation = useMutation({\n    mutationFn: async (data: RaffleSubmissionData) => {\n      const response = await fetch('/api/raffles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          submitterId: user?.id,\n          status: 'pending'\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'خطا در ارسال قرعه‌کشی');\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n      form.reset();\n      onOpenChange(false);\n      toast({\n        title: \"موفقیت\",\n        description: \"قرعه‌کشی شما با موفقیت ارسال شد و در انتظار بررسی مدیران است\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در ارسال قرعه‌کشی\"\n      });\n    }\n  });\n\n  const onSubmit = (data: RaffleSubmissionData) => {\n    submitRaffleMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Plus className=\"w-5 h-5 text-telegram-blue\" />\n            ثبت قرعه‌کشی جدید\n          </DialogTitle>\n          <DialogDescription>\n            لطفاً اطلاعات قرعه‌کشی خود را با دقت وارد کنید\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"channelId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>شناسه کانال</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"@channel_username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"messageId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>شناسه پیام</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"123456\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>عنوان قرعه‌کشی</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"عنوان جذاب برای قرعه‌کشی\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"prizeType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع جایزه</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"انتخاب نوع جایزه\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"stars\">\n                          <div className=\"flex items-center gap-2\">\n                            <Star className=\"w-4 h-4 star-icon\" />\n                            Telegram Stars\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"premium\">\n                          <div className=\"flex items-center gap-2\">\n                            <Crown className=\"w-4 h-4 text-telegram-warning\" />\n                            Telegram Premium\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"mixed\">\n                          <div className=\"flex items-center gap-2\">\n                            <Star className=\"w-4 h-4 star-icon\" />\n                            <Crown className=\"w-4 h-4 text-telegram-warning\" />\n                            ترکیبی\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"prizeValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>مقدار جایزه</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"مثال: 100 Stars\"\n                        onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n\n\n            <FormField\n              control={form.control}\n              name=\"requiredChannels\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>کانال‌های الزامی</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"@channel1, @channel2, @channel3\" \n                      rows={2}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"raffleDateTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>تاریخ و زمان قرعه‌کشی</FormLabel>\n                  <FormControl>\n                    <Input {...field} type=\"datetime-local\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter className=\"flex gap-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n              >\n                لغو\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={submitRaffleMutation.isPending}\n                className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n              >\n                {submitRaffleMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                ) : (\n                  <Send className=\"w-4 h-4 ml-2\" />\n                )}\n                ارسال برای بررسی\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10154},"client/src/components/referral-system.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Share2, Copy, Users, Award, TrendingUp, Star } from \"lucide-react\";\n\nexport function ReferralSystem() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [copied, setCopied] = useState(false);\n\n  // Get user referral data\n  const { data: referralData, isLoading } = useQuery({\n    queryKey: ['/api/referral', user?.id],\n    queryFn: async () => {\n      if (!user?.id) return null;\n      const response = await fetch(`/api/users/${user.id}/referral`);\n      if (!response.ok) throw new Error('Failed to fetch referral data');\n      return await response.json();\n    },\n    enabled: !!user?.id\n  });\n\n  // Generate referral link if doesn't exist\n  const generateReferralMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/users/${user?.id}/generate-referral`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to generate referral link');\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/referral'] });\n      toast({\n        title: \"موفقیت\",\n        description: \"لینک رفرال شما ایجاد شد\"\n      });\n    }\n  });\n\n  const copyReferralLink = () => {\n    if (referralData?.referralLink) {\n      navigator.clipboard.writeText(referralData.referralLink);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n      toast({\n        title: \"کپی شد\",\n        description: \"لینک رفرال کپی شد\"\n      });\n    }\n  };\n\n  const shareReferralLink = () => {\n    if (navigator.share && referralData?.referralLink) {\n      navigator.share({\n        title: 'دنیای قرعه‌کشی',\n        text: 'به من در دنیای قرعه‌کشی بپیوندید!',\n        url: referralData.referralLink\n      });\n    } else {\n      copyReferralLink();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"telegram-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center py-4\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-telegram-blue\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"telegram-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Share2 className=\"w-5 h-5 text-telegram-blue\" />\n          سیستم دعوت دوستان\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Referral Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-telegram-surface-variant rounded-telegram p-4 text-center\">\n            <Users className=\"w-6 h-6 text-telegram-blue mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-telegram\">{referralData?.referredCount || 0}</div>\n            <div className=\"text-sm text-telegram-text-secondary\">دوستان دعوت شده</div>\n          </div>\n          <div className=\"bg-telegram-surface-variant rounded-telegram p-4 text-center\">\n            <Award className=\"w-6 h-6 text-telegram-warning mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-telegram\">{referralData?.referralPoints || 0}</div>\n            <div className=\"text-sm text-telegram-text-secondary\">امتیاز دعوت</div>\n          </div>\n        </div>\n\n        {/* Referral Link Section */}\n        {referralData?.referralLink ? (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-telegram block mb-2\">\n                لینک دعوت شما\n              </label>\n              <div className=\"flex gap-2\">\n                <Input\n                  value={referralData.referralLink}\n                  readOnly\n                  className=\"flex-1\"\n                />\n                <Button\n                  onClick={copyReferralLink}\n                  variant=\"outline\"\n                  className=\"px-3\"\n                >\n                  {copied ? (\n                    <span className=\"text-telegram-success\">✓</span>\n                  ) : (\n                    <Copy className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={shareReferralLink}\n                className=\"flex-1 bg-telegram-blue hover:bg-telegram-blue-dark\"\n              >\n                <Share2 className=\"w-4 h-4 ml-2\" />\n                اشتراک‌گذاری\n              </Button>\n              <Button\n                onClick={copyReferralLink}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <Copy className=\"w-4 h-4 ml-2\" />\n                کپی لینک\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-6\">\n            <Users className=\"w-12 h-12 text-telegram-text-secondary mx-auto mb-4\" />\n            <p className=\"text-telegram-text-secondary mb-4\">\n              هنوز لینک رفرال شما ایجاد نشده است\n            </p>\n            <Button\n              onClick={() => generateReferralMutation.mutate()}\n              disabled={generateReferralMutation.isPending}\n              className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n            >\n              {generateReferralMutation.isPending ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n              ) : (\n                <Share2 className=\"w-4 h-4 ml-2\" />\n              )}\n              ایجاد لینک دعوت\n            </Button>\n          </div>\n        )}\n\n        {/* Referral Benefits */}\n        <div className=\"bg-telegram-surface-variant rounded-telegram p-4\">\n          <h4 className=\"font-medium text-telegram mb-3 flex items-center gap-2\">\n            <TrendingUp className=\"w-4 h-4 text-telegram-success\" />\n            مزایای دعوت دوستان\n          </h4>\n          <ul className=\"space-y-2 text-sm text-telegram-text-secondary\">\n            <li className=\"flex items-center gap-2\">\n              <Star className=\"w-3 h-3 star-icon\" />\n              ۵۰ امتیاز برای هر دعوت موفق\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <Award className=\"w-3 h-3 text-telegram-warning\" />\n              ارتقاء سطح دسترسی با جمع‌آوری امتیازات\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <Users className=\"w-3 h-3 text-telegram-blue\" />\n              دسترسی به قرعه‌کشی‌های ویژه\n            </li>\n          </ul>\n        </div>\n\n        {/* Referred Users List */}\n        {referralData?.referredUsers && referralData.referredUsers.length > 0 && (\n          <div>\n            <h4 className=\"font-medium text-telegram mb-3\">دوستان دعوت شده</h4>\n            <div className=\"space-y-2\">\n              {referralData.referredUsers.map((referredUser: any) => (\n                <div key={referredUser.id} className=\"flex items-center justify-between py-2 px-3 bg-telegram-surface-variant rounded-telegram\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-telegram-blue rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                      {referredUser.firstName?.[0] || 'U'}\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium text-telegram\">\n                        {referredUser.firstName} {referredUser.lastName}\n                      </div>\n                      <div className=\"text-xs text-telegram-text-secondary\">\n                        دعوت شده در {new Date(referredUser.createdAt).toLocaleDateString('fa-IR')}\n                      </div>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    +{referralData?.referralReward || 50} امتیاز\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8873},"client/src/pages/admin-panel-enhanced.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { z } from \"zod\";\nimport {\n  MessageCircle,\n  Star,\n  Users,\n  UserCheck,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Edit,\n  Trash2,\n  Shield,\n  Settings,\n  Calendar,\n  Gift,\n  AlertTriangle,\n  Eye,\n  TrendingUp,\n  Award,\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Crown,\n  GripVertical\n} from \"lucide-react\";\nimport {\n  DndContext, \n  DragEndEvent,\n  DragStartEvent,\n  PointerSensor,\n  MouseSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n  closestCenter,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  verticalListSortingStrategy,\n  useSortable\n} from '@dnd-kit/sortable';\nimport {\n  CSS,\n} from '@dnd-kit/utilities';\nimport { format } from \"date-fns\";\n\n// Schema for level approval\nconst levelApprovalSchema = z.object({\n  level: z.number().min(1).max(10),\n  reason: z.string().optional()\n});\n\n// Schema for rejection with restriction\nconst rejectionSchema = z.object({\n  reason: z.string().min(1, \"دلیل رد الزامی است\"),\n  restrictionType: z.enum([\"none\", \"temporary\", \"permanent\"]),\n  restrictionStart: z.string().optional(),\n  restrictionEnd: z.string().optional()\n});\n\n// Schema for sponsor channel\nconst sponsorChannelSchema = z.object({\n  channelId: z.string()\n    .min(1, \"شناسه کانال الزامی است\")\n    .refine((id) => {\n      // Channel ID must start with @ and contain only 0-9, a-z, @, _ with minimum 5 chars after @\n      if (!id.startsWith('@')) return false;\n      const usernamePartLength = id.length - 1; // exclude @\n      if (usernamePartLength < 5) return false;\n      return /^@[0-9a-z_]+$/.test(id);\n    }, \"شناسه کانال باید با @ شروع شود، فقط شامل 0-9، a-z، _ باشد و حداقل 5 کاراکتر بعد از @ داشته باشد\"),\n  channelName: z.string().min(1, \"نام کانال الزامی است\"),\n  channelUrl: z.string()\n    .min(1, \"آدرس کانال الزامی است\")\n    .refine((url) => {\n      return url.startsWith('https://') || url.startsWith('http://');\n    }, \"آدرس کانال باید با https:// یا http:// شروع شود\"),\n  description: z.string().optional(),\n  pointsReward: z.number().min(1, \"امتیاز باید حداقل 1 باشد\"),\n  isSpecial: z.boolean().default(false)\n});\n\n// Schema for admin creation\nconst adminSchema = z.object({\n  telegramId: z.string().min(1, \"شناسه تلگرام الزامی است\"),\n  adminLevel: z.enum([\"1\", \"2\"]).transform(val => parseInt(val))\n});\n\ntype LevelApprovalData = z.infer<typeof levelApprovalSchema>;\ntype RejectionData = z.infer<typeof rejectionSchema>;\ntype SponsorChannelData = z.infer<typeof sponsorChannelSchema>;\ntype AdminData = z.infer<typeof adminSchema>;\n\n// Sortable Channel Item Component\nfunction SortableChannelItem({ \n  channel, \n  onEdit, \n  onDelete, \n  isDeleting \n}: { \n  channel: any, \n  onEdit: (channel: any) => void,\n  onDelete: (id: string) => void,\n  isDeleting: boolean \n}) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ \n    id: channel.id.toString() // Ensure ID is string for @dnd-kit\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.7 : 1,\n    zIndex: isDragging ? 999 : 'auto',\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style}\n      className={`${isDragging ? 'shadow-lg' : ''}`}\n    >\n      <Card className={`telegram-card border border-telegram-border hover:border-telegram-blue transition-colors ${\n        isDragging ? 'border-telegram-blue scale-105' : ''\n      }`}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n            <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n              {/* Drag Handle - Fixed positioning and styling */}\n              <button \n                type=\"button\"\n                {...attributes} \n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing p-2 rounded-md hover:bg-telegram-bg-secondary transition-all flex-shrink-0 mt-1 touch-none select-none border border-telegram-border\"\n                style={{ touchAction: 'none' }}\n              >\n                <GripVertical className=\"w-4 h-4 text-telegram-text-secondary\" />\n              </button>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <h4 className=\"font-medium text-telegram truncate\">{channel.channelName}</h4>\n                  {channel.isSpecial && (\n                    <Badge variant=\"destructive\" className=\"text-xs flex-shrink-0\">\n                      ویژه\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-telegram-blue hover:underline break-all\">\n                  <a href={channel.channelUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {channel.channelUrl}\n                  </a>\n                </p>\n                {channel.description && (\n                  <p className=\"text-sm text-telegram-text-secondary mt-1 break-words\">{channel.description}</p>\n                )}\n                <div className=\"flex flex-wrap items-center gap-2 mt-2\">\n                  <Badge className=\"bg-telegram-warning text-white text-xs\">\n                    <Award className=\"w-3 h-3 ml-1\" />\n                    {channel.pointsReward} امتیاز\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    ترتیب: {channel.displayOrder}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2 flex-shrink-0\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onEdit(channel)}\n                className=\"text-xs\"\n              >\n                <Edit className=\"w-3 h-3 ml-1\" />\n                ویرایش\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => onDelete(channel.id)}\n                disabled={isDeleting}\n                className=\"text-xs\"\n              >\n                {isDeleting ? (\n                  <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\n                ) : (\n                  <>\n                    <Trash2 className=\"w-3 h-3 ml-1\" />\n                    حذف\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// RafflesList Component\nfunction RafflesList({ \n  status, \n  onApprove, \n  onReject,\n  onDeleteRaffle,\n  onBulkDelete,\n  adminLevel,\n  setSelectedRaffle,\n  setShowReviewDialog\n}: { \n  status: string,\n  onApprove?: (raffle: any) => void,\n  onReject?: (raffle: any) => void,\n  onDeleteRaffle?: (raffleId: string) => void,\n  onBulkDelete?: () => void,\n  adminLevel?: number | null,\n  setSelectedRaffle?: (raffle: any) => void,\n  setShowReviewDialog?: (show: boolean) => void\n}) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  // Check if user can delete (not level 2 admin)\n  const canDelete = adminLevel !== 2;\n  \n  // Check if any operations are available for current status\n  const hasOperations = status === 'pending' || (canDelete && (status === 'approved' || status === 'rejected'));\n  \n  // Get raffles by status\n  const { data: raffles = [], isLoading, refetch } = useQuery({\n    queryKey: ['/api/raffles', status],\n    queryFn: async () => {\n      const response = await fetch(`/api/raffles?status=${status}&userId=${user?.id}&userRole=bot_admin&_t=${Date.now()}`);\n      if (!response.ok) throw new Error('Failed to fetch raffles');\n      return await response.json();\n    },\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always consider data stale to ensure fresh fetches\n    gcTime: 0, // Don't cache the data (replaces cacheTime in v5)\n    refetchInterval: 3000, // Poll every 3 seconds for real-time updates\n    refetchIntervalInBackground: true\n  });\n  \n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge className=\"status-badge-pending\"><Clock className=\"w-3 h-3 ml-1\" />در انتظار</Badge>;\n      case 'approved':\n        return <Badge className=\"status-badge-approved\"><CheckCircle className=\"w-3 h-3 ml-1\" />تأیید شده</Badge>;\n      case 'rejected':\n        return <Badge className=\"status-badge-rejected\"><XCircle className=\"w-3 h-3 ml-1\" />رد شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-telegram-blue\"></div>\n      </div>\n    );\n  }\n\n  if (raffles.length === 0) {\n    const emptyMessages = {\n      pending: \"درخواست‌ی برای بررسی وجود ندارد\",\n      approved: \"آگهی تایید شده‌ای وجود ندارد\", \n      rejected: \"آگهی رد شده‌ای وجود ندارد\"\n    };\n    \n    return (\n      <div className=\"text-center py-8\">\n        <Gift className=\"w-12 h-12 text-telegram-text-secondary mx-auto mb-4\" />\n        <p className=\"text-telegram-text-secondary\">\n          {emptyMessages[status as keyof typeof emptyMessages] || \"آگهی‌ای وجود ندارد\"}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Bulk Delete Button for approved/rejected tabs - Only for admins who can delete */}\n      {canDelete && (status === 'approved' || status === 'rejected') && raffles.length > 0 && onBulkDelete && (\n        <div className=\"flex justify-end\">\n          <Button\n            onClick={onBulkDelete}\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"bg-red-600 hover:bg-red-700\"\n          >\n            <Trash2 className=\"w-4 h-4 ml-1\" />\n            حذف همه آگهی‌های {status === 'approved' ? 'تایید شده' : 'رد شده'}\n          </Button>\n        </div>\n      )}\n      \n      <div className=\"overflow-x-auto\">\n        <Table className=\"table-modern\">\n          <TableHeader>\n          <TableRow>\n            <TableHead>درخواست</TableHead>\n            <TableHead>ارسال‌کننده</TableHead>\n            <TableHead>سطح‌کاربر</TableHead>\n            <TableHead>وضعیت</TableHead>\n            {hasOperations && <TableHead>عملیات</TableHead>}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {raffles.map((raffle: any) => (\n            <TableRow key={raffle.id}>\n              <TableCell className=\"font-medium\">{raffle.requestNumber}</TableCell>\n              <TableCell>{raffle.submitter?.telegramId || 'نامشخص'}</TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-1\">\n                  <Award className=\"w-4 h-4 text-telegram-primary\" />\n                  <span>سطح {raffle.submitter?.level || 1}</span>\n                </div>\n              </TableCell>\n              <TableCell>{getStatusBadge(raffle.status)}</TableCell>\n              {hasOperations && (\n                <TableCell>\n                  <div className=\"flex gap-2\">\n                    {status === 'pending' && (\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n                        onClick={() => {\n                          setSelectedRaffle?.(raffle);\n                          setShowReviewDialog?.(true);\n                        }}\n                      >\n                        <Settings className=\"w-4 h-4 ml-1\" />\n                        بررسی\n                      </Button>\n                    )}\n                    {canDelete && (status === 'approved' || status === 'rejected') && onDeleteRaffle && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => onDeleteRaffle(raffle.id)}\n                      >\n                        <Trash2 className=\"w-4 h-4 ml-1\" />\n                        حذف\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              )}\n            </TableRow>\n          ))}\n        </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n\nexport default function AdminPanelEnhanced() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRaffle, setSelectedRaffle] = useState<any>(null);\n  const [showReviewDialog, setShowReviewDialog] = useState(false);\n  const [selectedAction, setSelectedAction] = useState<'approve' | 'reject' | null>(null);\n  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isBulkDeleteDialogOpen, setIsBulkDeleteDialogOpen] = useState(false);\n  const [deleteRaffleId, setDeleteRaffleId] = useState<string>(\"\");\n  const [bulkDeleteStatus, setBulkDeleteStatus] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState<string>(\"raffles\"); // Default tab only on initial load - mutations preserve current tab\n  const [raffleFilter, setRaffleFilter] = useState<string>(\"pending\");\n\n\n  // Forms\n  const levelApprovalForm = useForm<LevelApprovalData>({\n    resolver: zodResolver(levelApprovalSchema),\n    defaultValues: { level: 1 }\n  });\n\n  const rejectionForm = useForm<RejectionData>({\n    resolver: zodResolver(rejectionSchema),\n    defaultValues: { \n      restrictionType: \"none\"\n    }\n  });\n\n  const sponsorChannelForm = useForm<SponsorChannelData>({\n    resolver: zodResolver(sponsorChannelSchema),\n    defaultValues: {\n      isSpecial: false\n    }\n  });\n\n  const [editingChannel, setEditingChannel] = useState<any>(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n\n  const adminForm = useForm<AdminData>({\n    resolver: zodResolver(adminSchema),\n    defaultValues: {}\n  });\n\n  // Drag and drop sensors and handlers\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 5, // Require a minimum of 5px movement to start dragging\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 200, // Add delay for touch to prevent accidental drags\n        tolerance: 5,\n      },\n    })\n  );\n\n  // Handle drag start for debugging\n  const handleDragStart = (event: DragStartEvent) => {\n    console.log('Drag started:', event);\n  };\n\n  // Handle drag end for sponsor channels reordering\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    console.log('Drag ended:', { active: active?.id, over: over?.id });\n\n    if (!over || active.id === over.id) {\n      console.log('Drag cancelled or same position');\n      return;\n    }\n\n    // Convert IDs to strings for comparison\n    const activeId = active.id.toString();\n    const overId = over.id.toString();\n\n    const activeIndex = sponsorChannels.findIndex((item: any) => item.id.toString() === activeId);\n    const overIndex = sponsorChannels.findIndex((item: any) => item.id.toString() === overId);\n\n    console.log('Found indexes:', { activeIndex, overIndex, activeId, overId });\n\n    if (activeIndex !== -1 && overIndex !== -1) {\n      // Create reordered array\n      const reorderedChannels = arrayMove(sponsorChannels, activeIndex, overIndex);\n      \n      // Create new order mapping based on displayOrder DESC (higher numbers first)\n      const channelOrders = reorderedChannels.map((channel: any, index: number) => ({\n        id: channel.id,\n        displayOrder: reorderedChannels.length - index // Higher displayOrder for items at the top\n      }));\n\n      console.log('Applying reorder:', channelOrders);\n      // Apply the reordering\n      reorderSponsorChannelsMutation.mutate(channelOrders);\n    }\n  };\n\n  // Get pending raffles for review\n  const { data: pendingRaffles = [], isLoading: pendingLoading } = useQuery({\n    queryKey: ['/api/raffles', 'pending'],\n    queryFn: async () => {\n      const response = await fetch('/api/raffles?status=pending');\n      if (!response.ok) throw new Error('Failed to fetch pending raffles');\n      return await response.json();\n    }\n  });\n\n  // Get sponsor channels\n  const { data: sponsorChannels = [], isLoading: channelsLoading } = useQuery({\n    queryKey: ['/api/sponsor-channels'],\n    queryFn: async () => {\n      const response = await fetch('/api/sponsor-channels');\n      if (!response.ok) throw new Error('Failed to fetch sponsor channels');\n      return await response.json();\n    }\n  });\n\n  // Get admins list\n  const { data: admins = [], isLoading: adminsLoading } = useQuery({\n    queryKey: ['/api/admin/users', 'bot_admin'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/users?type=bot_admin&_t=' + Date.now(), {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch admins');\n      return await response.json();\n    },\n    enabled: user?.userType === \"bot_admin\" && (user?.adminLevel === 0 || user?.adminLevel === 1),\n    refetchInterval: false,\n    staleTime: Infinity // Don't refetch automatically\n  });\n\n  // Approve raffle mutation\n  const approveRaffleMutation = useMutation({\n    mutationFn: async (data: { raffleId: string; level: number; reason?: string }) => {\n      const response = await fetch(`/api/raffles/${data.raffleId}/approve`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          status: 'approved',\n          levelRequired: data.level,\n          adminUserId: user?.id,\n          reason: data.reason\n        })\n      });\n      if (!response.ok) throw new Error('Failed to approve raffle');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Force complete cache invalidation\n      queryClient.clear();\n      queryClient.invalidateQueries();\n      setShowReviewDialog(false);\n      setIsApprovalDialogOpen(false);\n      setSelectedRaffle(null);\n      setSelectedAction(null);\n      levelApprovalForm.reset();\n      toast({\n        title: \"موفقیت\",\n        description: \"قرعه‌کشی با موفقیت تأیید شد\"\n      });\n    }\n  });\n\n  // Reject raffle mutation\n  const rejectRaffleMutation = useMutation({\n    mutationFn: async (data: { raffleId: string } & RejectionData) => {\n      const restriction = data.restrictionType !== \"none\" ? {\n        type: data.restrictionType,\n        start: data.restrictionStart,\n        end: data.restrictionEnd\n      } : null;\n\n      const response = await fetch(`/api/raffles/${data.raffleId}/reject`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          status: 'rejected',\n          reason: data.reason,\n          restriction,\n          adminUserId: user?.id\n        })\n      });\n      if (!response.ok) throw new Error('Failed to reject raffle');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Force complete cache invalidation\n      queryClient.clear();\n      queryClient.invalidateQueries();\n      setShowReviewDialog(false);\n      setIsRejectDialogOpen(false);\n      setSelectedRaffle(null);\n      setSelectedAction(null);\n      rejectionForm.reset();\n      toast({\n        title: \"موفقیت\",\n        description: \"قرعه‌کشی رد شد و اطلاعات به کاربر ارسال شد\"\n      });\n    }\n  });\n\n  // Create sponsor channel mutation\n  const createSponsorChannelMutation = useMutation({\n    mutationFn: async (data: SponsorChannelData) => {\n      console.log(\"Sending sponsor channel data:\", data);\n      const response = await fetch('/api/sponsor-channels', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"Sponsor channel creation failed:\", errorData);\n        throw new Error(errorData.error || 'Failed to create sponsor channel');\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sponsor-channels'] });\n      sponsorChannelForm.reset();\n      toast({\n        title: \"موفقیت\",\n        description: \"کانال اسپانسری با موفقیت اضافه شد\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: `خطا در ایجاد کانال اسپانسری: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete sponsor channel mutation\n  const deleteSponsorChannelMutation = useMutation({\n    mutationFn: async (channelId: string) => {\n      const response = await fetch(`/api/sponsor-channels/${channelId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete sponsor channel');\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sponsor-channels'] });\n      toast({\n        title: \"موفقیت\",\n        description: \"کانال اسپانسری با موفقیت حذف شد\"\n      });\n    }\n  });\n\n  // Reorder sponsor channels mutation\n  const reorderSponsorChannelsMutation = useMutation({\n    mutationFn: async (channelOrders: { id: string; displayOrder: number }[]) => {\n      const response = await fetch('/api/sponsor-channels-reorder', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ channelOrders })\n      });\n      if (!response.ok) throw new Error('Failed to reorder sponsor channels');\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sponsor-channels'] });\n      toast({\n        title: \"موفقیت\",\n        description: \"ترتیب کانال‌های اسپانسری با موفقیت به‌روزرسانی شد\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: `خطا در تغییر ترتیب: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Create admin mutation\n  const createAdminMutation = useMutation({\n    mutationFn: async (data: AdminData) => {\n      const response = await fetch('/api/admins', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          telegramId: data.telegramId,\n          userType: 'bot_admin', // همه مدیران bot_admin هستند، تفاوت در adminLevel است\n          adminLevel: data.adminLevel\n        })\n      });\n      if (!response.ok) throw new Error('Failed to create admin');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Invalidate admin queries to refresh the list without page reload\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users', 'bot_admin'] });\n      adminForm.reset();\n      toast({\n        title: \"موفقیت\",\n        description: \"مدیر جدید با موفقیت اضافه شد\"\n      });\n    }\n  });\n\n  // Remove admin mutation\n  const removeAdminMutation = useMutation({\n    mutationFn: async (telegramId: string) => {\n      const response = await fetch(`/api/admins/${telegramId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to remove admin');\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Immediately invalidate and refetch admin list\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users', 'bot_admin'] });\n      toast({\n        title: \"موفقیت\",\n        description: \"مدیر با موفقیت برکنار شد و به کاربر عادی تبدیل شد\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطا\",\n        description: `خطا در برکناری مدیر: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete individual raffle mutation\n  const deleteRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete raffle');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Force complete cache invalidation and immediate refetch\n      queryClient.clear(); // Clear all cache\n      queryClient.invalidateQueries(); // Invalidate all queries\n      toast({\n        title: \"موفقیت\",\n        description: \"آگهی با موفقیت حذف شد\"\n      });\n    }\n  });\n\n  // Bulk delete mutation  \n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (status: string) => {\n      const response = await fetch(`/api/raffles/bulk-delete?status=${status}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to bulk delete raffles');\n      return await response.json();\n    },\n    onSuccess: (data, status) => {\n      // Force complete cache invalidation and immediate refetch\n      queryClient.clear(); // Clear all cache\n      queryClient.invalidateQueries(); // Invalidate all queries\n      toast({\n        title: \"موفقیت\", \n        description: `${data.deletedCount || 0} آگهی ${status === 'approved' ? 'تایید شده' : 'رد شده'} با موفقیت حذف شدند`\n      });\n    }\n  });\n\n  // Handler functions for buttons\n  const handleApproveRaffle = (raffle: any) => {\n    setSelectedRaffle(raffle);\n    setIsApprovalDialogOpen(true);\n  };\n\n  const handleRejectRaffle = (raffle: any) => {\n    setSelectedRaffle(raffle);\n    setIsRejectDialogOpen(true);\n  };\n\n  const onLevelApprovalSubmit = (data: LevelApprovalData) => {\n    if (!selectedRaffle) return;\n    approveRaffleMutation.mutate({\n      raffleId: selectedRaffle.id,\n      level: data.level,\n      reason: data.reason\n    });\n  };\n\n  const onRejectionSubmit = (data: RejectionData) => {\n    if (!selectedRaffle) return;\n    rejectRaffleMutation.mutate({\n      raffleId: selectedRaffle.id,\n      ...data\n    });\n  };\n\n  const onSponsorChannelSubmit = (data: SponsorChannelData) => {\n    createSponsorChannelMutation.mutate(data);\n  };\n\n  const onAdminSubmit = (data: AdminData) => {\n    createAdminMutation.mutate(data);\n  };\n\n  const handleDeleteRaffle = (raffleId: string) => {\n    setDeleteRaffleId(raffleId);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteRaffle = () => {\n    if (deleteRaffleId) {\n      deleteRaffleMutation.mutate(deleteRaffleId);\n      setIsDeleteDialogOpen(false);\n      setDeleteRaffleId(\"\");\n    }\n  };\n\n  const handleBulkDelete = (status: string) => {\n    setBulkDeleteStatus(status);\n    setIsBulkDeleteDialogOpen(true);\n  };\n\n  const confirmBulkDelete = () => {\n    if (bulkDeleteStatus) {\n      bulkDeleteMutation.mutate(bulkDeleteStatus);\n      setIsBulkDeleteDialogOpen(false);\n      setBulkDeleteStatus(\"\");\n    }\n  };\n\n  const handleEditChannel = (channel: any) => {\n    setEditingChannel(channel);\n    sponsorChannelForm.reset({\n      channelId: channel.channelId,\n      channelName: channel.channelName,\n      channelUrl: channel.channelUrl,\n      description: channel.description || \"\",\n      pointsReward: channel.pointsReward,\n      isSpecial: channel.isSpecial\n    });\n    setEditDialogOpen(true);\n  };\n\n  // Update channel mutation\n  const updateSponsorChannelMutation = useMutation({\n    mutationFn: async (data: { id: string, updates: any }) => {\n      const response = await fetch(`/api/sponsor-channels/${data.id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data.updates),\n      });\n      if (!response.ok) throw new Error(\"خطا در به‌روزرسانی کانال\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sponsor-channels\"] });\n      setEditDialogOpen(false);\n      setEditingChannel(null);\n      sponsorChannelForm.reset();\n      toast({\n        title: \"موفق\",\n        description: \"کانال اسپانسری با موفقیت به‌روزرسانی شد\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"خطا\",\n        description: \"خطا در به‌روزرسانی کانال اسپانسری\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onEditSubmit = (data: SponsorChannelData) => {\n    if (editingChannel) {\n      updateSponsorChannelMutation.mutate({\n        id: editingChannel.id,\n        updates: data\n      });\n    }\n  };\n\n\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge className=\"status-badge-pending\"><Clock className=\"w-3 h-3 ml-1\" />در انتظار</Badge>;\n      case 'approved':\n        return <Badge className=\"status-badge-approved\"><CheckCircle className=\"w-3 h-3 ml-1\" />تأیید شده</Badge>;\n      case 'rejected':\n        return <Badge className=\"status-badge-rejected\"><XCircle className=\"w-3 h-3 ml-1\" />رد شده</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Get admin level from user data\n  const adminLevel = user?.adminLevel ?? null;\n  const isKing = adminLevel === 0;\n  const isLevel1Admin = adminLevel === 1;\n  const isLevel2Admin = adminLevel === 2;\n\n  if (!user || user.userType !== \"bot_admin\") {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"p-6\">\n          <CardContent className=\"text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-telegram-warning mx-auto mb-4\" />\n            <p className=\"text-telegram-text-secondary\">شما دسترسی مدیریت ندارید</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-content p-4\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className={`grid w-full mb-6 ${\n            isKing ? 'grid-cols-4' : \n            isLevel1Admin ? 'grid-cols-3' : \n            'grid-cols-2'\n          }`}>\n            <TabsTrigger value=\"raffles\" className=\"flex items-center gap-2\">\n              <MessageCircle className=\"w-4 h-4\" />\n              آگهی‌ها\n            </TabsTrigger>\n            {(isKing || isLevel1Admin) && (\n              <TabsTrigger value=\"sponsors\" className=\"flex items-center gap-2\">\n                <Star className=\"w-4 h-4\" />\n                اسپانسری\n              </TabsTrigger>\n            )}\n            {isKing && (\n              <TabsTrigger value=\"admins\" className=\"flex items-center gap-2\">\n                <Crown className=\"w-4 h-4\" />\n                <Users className=\"w-4 h-4\" />\n                مدیران\n              </TabsTrigger>\n            )}\n            <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n              <UserCheck className=\"w-4 h-4\" />\n              پروفایل\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Raffles Management Tab */}\n          <TabsContent value=\"raffles\" className=\"space-y-6 animate-fade-in\">\n            <Card className=\"telegram-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"w-5 h-5 text-telegram-blue\" />\n                  مدیریت آگهی‌های قرعه‌کشی\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {/* Filter Tabs */}\n                <div className=\"mb-6\">\n                  <Tabs value={raffleFilter} onValueChange={setRaffleFilter} className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-3 bg-transparent rounded-lg p-2 gap-2\">\n                      <TabsTrigger value=\"pending\" className=\"raffle-tab raffle-tab-pending\">\n                        <Clock className=\"w-4 h-4 ml-1\" />\n                        در انتظار بررسی\n                      </TabsTrigger>\n                      <TabsTrigger value=\"rejected\" className=\"raffle-tab raffle-tab-rejected\">\n                        <XCircle className=\"w-4 h-4 ml-1\" />\n                        رد شده‌ها\n                      </TabsTrigger>\n                      <TabsTrigger value=\"approved\" className=\"raffle-tab raffle-tab-approved\">\n                        <CheckCircle className=\"w-4 h-4 ml-1\" />\n                        تایید شده‌ها\n                      </TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                </div>\n\n                {/* Raffles List Based on Filter */}\n                <RafflesList \n                  status={raffleFilter} \n                  onApprove={handleApproveRaffle}\n                  onReject={handleRejectRaffle}\n                  onDeleteRaffle={isLevel2Admin ? undefined : handleDeleteRaffle}\n                  onBulkDelete={isLevel2Admin ? undefined : () => handleBulkDelete(raffleFilter)}\n                  adminLevel={adminLevel}\n                  setSelectedRaffle={setSelectedRaffle}\n                  setShowReviewDialog={setShowReviewDialog}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sponsor Channels Tab - Only for King and Level 1 Admins */}\n          {(isKing || isLevel1Admin) && (\n            <TabsContent value=\"sponsors\" className=\"space-y-6 animate-fade-in\">\n            <Card className=\"telegram-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"w-5 h-5 text-telegram-warning\" />\n                  مدیریت کانال‌های اسپانسری\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <Form {...sponsorChannelForm}>\n                  <form onSubmit={sponsorChannelForm.handleSubmit(onSponsorChannelSubmit)} className=\"form-modern space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={sponsorChannelForm.control}\n                        name=\"channelId\"\n                        render={({ field }) => (\n                          <FormItem className=\"form-field\">\n                            <FormLabel className=\"form-label\">شناسه کانال</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"form-input\" placeholder=\"@channel_name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={sponsorChannelForm.control}\n                        name=\"channelName\"\n                        render={({ field }) => (\n                          <FormItem className=\"form-field\">\n                            <FormLabel className=\"form-label\">نام کانال</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"form-input\" placeholder=\"نام کانال\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={sponsorChannelForm.control}\n                        name=\"channelUrl\"\n                        render={({ field }) => (\n                          <FormItem className=\"form-field\">\n                            <FormLabel className=\"form-label\">آدرس کانال</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"form-input\" placeholder=\"https://t.me/channel_name یا http://...\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={sponsorChannelForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem className=\"form-field\">\n                          <FormLabel className=\"form-label\">توضیحات</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} className=\"form-input\" placeholder=\"توضیحات کانال\" rows={2} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={sponsorChannelForm.control}\n                      name=\"pointsReward\"\n                      render={({ field }) => (\n                        <FormItem className=\"form-field\">\n                          <FormLabel className=\"form-label\">امتیاز عضویت</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"number\"\n                              min=\"1\"\n                              onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                              className=\"form-input\"\n                              placeholder=\"امتیازی که کاربر دریافت می‌کند\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={sponsorChannelForm.control}\n                      name=\"isSpecial\"\n                      render={({ field }) => (\n                        <FormItem className=\"form-field flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"form-label\">کانال ویژه</FormLabel>\n                            <FormDescription>\n                              کانال‌های ویژه با برچسب قرمز نمایش داده می‌شوند\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={createSponsorChannelMutation.isPending}\n                      className=\"w-full bg-telegram-blue hover:bg-telegram-blue-dark\"\n                    >\n                      {createSponsorChannelMutation.isPending ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                      ) : (\n                        <Plus className=\"w-4 h-4 ml-2\" />\n                      )}\n                      افزودن کانال اسپانسری\n                    </Button>\n                  </form>\n                </Form>\n\n                {/* Existing Sponsor Channels with Drag and Drop */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-medium text-telegram\">کانال‌های اسپانسری موجود</h3>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <GripVertical className=\"w-3 h-3 ml-1\" />\n                      قابل مرتب‌سازی\n                    </Badge>\n                  </div>\n                  \n                  {channelsLoading ? (\n                    <div className=\"flex items-center justify-center py-4\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-telegram-blue\"></div>\n                    </div>\n                  ) : sponsorChannels.length === 0 ? (\n                    <p className=\"text-telegram-text-secondary text-center py-4\">کانال اسپانسری‌ای وجود ندارد</p>\n                  ) : (\n                    <DndContext \n                      sensors={sensors}\n                      collisionDetection={closestCenter}\n                      onDragStart={handleDragStart}\n                      onDragEnd={handleDragEnd}\n                    >\n                      <SortableContext \n                        items={sponsorChannels.map((channel: any) => channel.id.toString())}\n                        strategy={verticalListSortingStrategy}\n                      >\n                        <div className=\"space-y-3\">\n                          {sponsorChannels.map((channel: any) => (\n                            <SortableChannelItem\n                              key={channel.id}\n                              channel={channel}\n                              onEdit={handleEditChannel}\n                              onDelete={(id) => deleteSponsorChannelMutation.mutate(id)}\n                              isDeleting={deleteSponsorChannelMutation.isPending}\n                            />\n                          ))}\n                        </div>\n                      </SortableContext>\n                    </DndContext>\n                  )}\n                </div>\n\n                {/* Edit Channel Dialog */}\n                <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n                  <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>ویرایش کانال اسپانسری</DialogTitle>\n                      <DialogDescription>\n                        تغییرات مورد نظر را اعمال کنید\n                      </DialogDescription>\n                    </DialogHeader>\n                    \n                    <Form {...sponsorChannelForm}>\n                      <form onSubmit={sponsorChannelForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={sponsorChannelForm.control}\n                            name=\"channelId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>شناسه کانال</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"@channel_name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={sponsorChannelForm.control}\n                            name=\"channelName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>نام کانال</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"نام کانال\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={sponsorChannelForm.control}\n                            name=\"channelUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>آدرس کانال</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"https://t.me/channel_name یا http://...\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={sponsorChannelForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>توضیحات</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"توضیحات کانال\" rows={2} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={sponsorChannelForm.control}\n                          name=\"pointsReward\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>امتیاز عضویت</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"number\"\n                                  min=\"1\"\n                                  onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                                  placeholder=\"امتیاز\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={sponsorChannelForm.control}\n                          name=\"isSpecial\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel>کانال ویژه</FormLabel>\n                                <FormDescription>\n                                  کانال‌های ویژه با برچسب قرمز نمایش داده می‌شوند\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <DialogFooter>\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setEditDialogOpen(false)}\n                          >\n                            انصراف\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={updateSponsorChannelMutation.isPending}\n                            className=\"bg-telegram-blue hover:bg-telegram-blue-dark\"\n                          >\n                            {updateSponsorChannelMutation.isPending ? (\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                            ) : null}\n                            ذخیره تغییرات\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          )}\n\n          {/* Admins Management Tab - Only for King */}\n          {isKing && (\n            <TabsContent value=\"admins\" className=\"space-y-6 animate-fade-in\">\n            {isKing ? (\n              <Card className=\"telegram-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5 text-telegram-blue\" />\n                    مدیریت مدیران\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <Form {...adminForm}>\n                    <form onSubmit={adminForm.handleSubmit(onAdminSubmit)} className=\"form-modern space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={adminForm.control}\n                          name=\"telegramId\"\n                          render={({ field }) => (\n                            <FormItem className=\"form-field\">\n                              <FormLabel className=\"form-label\">شناسه تلگرام</FormLabel>\n                              <FormControl>\n                                <Input {...field} className=\"form-input\" placeholder=\"123456789\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={adminForm.control}\n                          name=\"adminLevel\"\n                          render={({ field }) => (\n                            <FormItem className=\"form-field\">\n                              <FormLabel className=\"form-label\">سطح دسترسی</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value?.toString()}>\n                                <FormControl>\n                                  <SelectTrigger className=\"form-input\">\n                                    <SelectValue placeholder=\"انتخاب سطح دسترسی\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"1\">Level 1 (مدیر اصلی)</SelectItem>\n                                  <SelectItem value=\"2\">Level 2 (مدیر محدود)</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        disabled={createAdminMutation.isPending}\n                        className=\"w-full bg-telegram-blue hover:bg-telegram-blue-dark\"\n                      >\n                        {createAdminMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                        ) : (\n                          <UserCheck className=\"w-4 h-4 ml-2\" />\n                        )}\n                        افزودن مدیر جدید\n                      </Button>\n                    </form>\n                  </Form>\n\n                  {/* Existing Admins List */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-medium text-telegram\">مدیران موجود</h3>\n                    {adminsLoading ? (\n                      <div className=\"flex items-center justify-center py-4\">\n                        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-telegram-blue\"></div>\n                      </div>\n                    ) : (\n                      <div className=\"overflow-x-auto\">\n                        <Table className=\"table-modern\">\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>نام</TableHead>\n                              <TableHead>شناسه تلگرام</TableHead>\n                              <TableHead>سطح دسترسی</TableHead>\n                              <TableHead>تاریخ ایجاد</TableHead>\n                              <TableHead>عملیات</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {admins.map((admin: any) => (\n                              <TableRow key={admin.id}>\n                                <TableCell className=\"font-medium\">\n                                  {admin.firstName} {admin.lastName}\n                                </TableCell>\n                                <TableCell>{admin.telegramId}</TableCell>\n                                <TableCell>\n                                  <Badge variant={admin.adminLevel === 0 ? \"destructive\" : admin.adminLevel === 1 ? \"default\" : \"secondary\"}>\n                                    {admin.adminLevel === 0 && <Crown className=\"w-3 h-3 ml-1\" />}\n                                    {admin.adminLevel === 0 ? \"👑 King\" : admin.adminLevel === 1 ? \"مدیر سطح 1\" : \"مدیر سطح 2\"}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell>\n                                  {admin.createdAt ? format(new Date(admin.createdAt), 'yyyy/MM/dd') : 'نامشخص'}\n                                </TableCell>\n                                <TableCell>\n                                  {admin.telegramId !== user.telegramId && (\n                                    <Button \n                                      size=\"sm\" \n                                      variant=\"destructive\" \n                                      onClick={() => removeAdminMutation.mutate(admin.telegramId)}\n                                      disabled={removeAdminMutation.isPending}\n                                    >\n                                      {removeAdminMutation.isPending ? (\n                                        <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\n                                      ) : (\n                                        <Trash2 className=\"w-4 h-4 ml-1\" />\n                                      )}\n                                      برکناری\n                                    </Button>\n                                  )}\n                                  {admin.telegramId === user.telegramId && (\n                                    <Badge variant=\"outline\">مدیر اصلی</Badge>\n                                  )}\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className=\"telegram-card\">\n                <CardContent className=\"text-center py-8\">\n                  <AlertTriangle className=\"w-12 h-12 text-telegram-warning mx-auto mb-4\" />\n                  <p className=\"text-telegram-text-secondary\">شما دسترسی مدیریت مدیران ندارید</p>\n                  <p className=\"text-sm text-telegram-text-secondary mt-2\">فقط مدیران سطح 1 می‌توانند مدیران جدید اضافه کنند</p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n          )}\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6 animate-fade-in\">\n            <Card className=\"telegram-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <UserCheck className=\"w-5 h-5 text-telegram-blue\" />\n                  پروفایل مدیر\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-telegram-text-secondary\">نام</Label>\n                    <p className=\"text-telegram font-medium\">{user.firstName} {user.lastName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-telegram-text-secondary\">شناسه تلگرام</Label>\n                    <p className=\"text-telegram font-medium\">{user.telegramId}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-telegram-text-secondary\">سطح دسترسی</Label>\n                    <Badge variant={isKing ? \"destructive\" : isLevel1Admin ? \"default\" : \"secondary\"}>\n                      {isKing && <Crown className=\"w-3 h-3 ml-1\" />}\n                      {isKing ? \"👑 King Admin\" : isLevel1Admin ? \"مدیر سطح 1\" : \"مدیر سطح 2\"}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-telegram-text-secondary\">تاریخ ایجاد</Label>\n                    <p className=\"text-telegram font-medium\">\n                      {user.createdAt ? format(new Date(user.createdAt), 'yyyy/MM/dd') : 'نامشخص'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Review Dialog - Combined Approval/Rejection */}\n        <Dialog open={showReviewDialog} onOpenChange={setShowReviewDialog}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>بررسی درخواست قرعه‌کشی</DialogTitle>\n              <DialogDescription>\n                <div className=\"space-y-1\">\n                  <div>درخواست شماره: {selectedRaffle?.requestNumber}</div>\n                  <div>ارسال‌کننده: {selectedRaffle?.submitter?.telegramId || 'نامشخص'}</div>\n                </div>\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedRaffle && (\n              <div className=\"space-y-6\">\n                {/* Raffle Information */}\n                <div className=\"bg-telegram-bg-secondary dark:bg-telegram-bg-dark border border-telegram-border dark:border-telegram-border-dark p-4 rounded-lg\">\n                  <h3 className=\"font-medium mb-2 text-telegram dark:text-telegram-dark\">اطلاعات درخواست:</h3>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    {selectedRaffle.prizeType === 'stars' && <Star className=\"w-4 h-4 star-icon\" />}\n                    {selectedRaffle.prizeType === 'premium' && <Crown className=\"w-4 h-4 text-telegram-warning\" />}\n                    {selectedRaffle.prizeType === 'mixed' && <Crown className=\"w-4 h-4 text-purple-500\" />}\n                    <span className=\"font-medium text-telegram dark:text-telegram-dark\">\n                      {selectedRaffle.prizeType === 'stars' && `${selectedRaffle.prizeValue} ستاره`}\n                      {selectedRaffle.prizeType === 'premium' && `${selectedRaffle.prizeValue} ماه پرمیوم`}\n                      {selectedRaffle.prizeType === 'mixed' && `${selectedRaffle.prizeValue} ستاره + پرمیوم`}\n                    </span>\n                  </div>\n\n                </div>\n\n                {/* Action Selection */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex gap-4\">\n                    <Button\n                      type=\"button\"\n                      className={`flex-1 ${selectedAction === 'approve' ? 'bg-green-600' : 'bg-green-500 hover:bg-green-600'} text-white`}\n                      onClick={() => setSelectedAction('approve')}\n                    >\n                      <CheckCircle className=\"w-4 h-4 ml-1\" />\n                      تأیید\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      className={`flex-1 ${selectedAction === 'reject' ? 'bg-red-600' : 'bg-red-500 hover:bg-red-600'} text-white`}\n                      onClick={() => setSelectedAction('reject')}\n                    >\n                      <XCircle className=\"w-4 h-4 ml-1\" />\n                      رد\n                    </Button>\n                  </div>\n\n                  {/* Approval Form */}\n                  {selectedAction === 'approve' && (\n                    <Form {...levelApprovalForm}>\n                      <div className=\"space-y-4 p-4 border rounded-lg\">\n                        <h3 className=\"font-medium text-green-700\">تنظیمات تأیید:</h3>\n                        <FormField\n                          control={levelApprovalForm.control}\n                          name=\"level\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>سطح مورد نیاز</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"انتخاب سطح\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {[...Array(10)].map((_, i) => (\n                                    <SelectItem key={i + 1} value={(i + 1).toString()}>\n                                      سطح {i + 1}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={levelApprovalForm.control}\n                          name=\"reason\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>دلیل انتخاب سطح (اختیاری)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"توضیحات...\" rows={3} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </Form>\n                  )}\n\n                  {/* Rejection Form */}\n                  {selectedAction === 'reject' && (\n                    <Form {...rejectionForm}>\n                      <div className=\"space-y-4 p-4 border rounded-lg\">\n                        <h3 className=\"font-medium text-red-700\">تنظیمات رد:</h3>\n                        <FormField\n                          control={rejectionForm.control}\n                          name=\"reason\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>دلیل رد (الزامی)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"دلیل رد قرعه‌کشی...\" rows={3} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={rejectionForm.control}\n                          name=\"restrictionType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>نوع محدودسازی</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"انتخاب نوع محدودسازی\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"none\">بدون محدودسازی</SelectItem>\n                                  <SelectItem value=\"temporary\">محدودسازی موقت</SelectItem>\n                                  <SelectItem value=\"permanent\">مسدودسازی دائم</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        {rejectionForm.watch(\"restrictionType\") === \"temporary\" && (\n                          <>\n                            <FormField\n                              control={rejectionForm.control}\n                              name=\"restrictionStart\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>تاریخ شروع محدودسازی</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} type=\"datetime-local\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={rejectionForm.control}\n                              name=\"restrictionEnd\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>تاریخ پایان محدودسازی</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} type=\"datetime-local\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </>\n                        )}\n                      </div>\n                    </Form>\n                  )}\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowReviewDialog(false);\n                      setSelectedAction(null);\n                    }}\n                    className=\"flex-1\"\n                  >\n                    لغو\n                  </Button>\n                  {selectedAction === 'approve' && (\n                    <Button\n                      onClick={levelApprovalForm.handleSubmit(onLevelApprovalSubmit)}\n                      disabled={approveRaffleMutation.isPending}\n                      className=\"flex-1 bg-green-500 hover:bg-green-600 text-white\"\n                    >\n                      {approveRaffleMutation.isPending ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                      ) : (\n                        <CheckCircle className=\"w-4 h-4 ml-2\" />\n                      )}\n                      تأیید نهایی\n                    </Button>\n                  )}\n                  {selectedAction === 'reject' && (\n                    <Button\n                      onClick={rejectionForm.handleSubmit(onRejectionSubmit)}\n                      disabled={rejectRaffleMutation.isPending}\n                      className=\"flex-1 bg-red-500 hover:bg-red-600 text-white\"\n                    >\n                      {rejectRaffleMutation.isPending ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                      ) : (\n                        <XCircle className=\"w-4 h-4 ml-2\" />\n                      )}\n                      رد نهایی\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Approval Dialog */}\n        <Dialog open={isApprovalDialogOpen} onOpenChange={setIsApprovalDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>تأیید قرعه‌کشی</DialogTitle>\n              <DialogDescription>\n                لطفاً سطح دسترسی مورد نیاز برای مشاهده این قرعه‌کشی را مشخص کنید\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...levelApprovalForm}>\n              <form onSubmit={levelApprovalForm.handleSubmit(onLevelApprovalSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={levelApprovalForm.control}\n                  name=\"level\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>سطح مورد نیاز</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"انتخاب سطح\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {[...Array(10)].map((_, i) => (\n                            <SelectItem key={i + 1} value={(i + 1).toString()}>\n                              سطح {i + 1}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={levelApprovalForm.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>دلیل انتخاب سطح (اختیاری)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"توضیحات...\" rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsApprovalDialogOpen(false)}>\n                    لغو\n                  </Button>\n                  <Button type=\"submit\" disabled={approveRaffleMutation.isPending}>\n                    {approveRaffleMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                    ) : (\n                      <CheckCircle className=\"w-4 h-4 ml-2\" />\n                    )}\n                    تأیید\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Rejection Dialog */}\n        <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>رد قرعه‌کشی</DialogTitle>\n              <DialogDescription>\n                لطفاً دلیل رد و نوع محدودسازی را مشخص کنید\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...rejectionForm}>\n              <form onSubmit={rejectionForm.handleSubmit(onRejectionSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={rejectionForm.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>دلیل رد (الزامی)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"دلیل رد قرعه‌کشی...\" rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={rejectionForm.control}\n                  name=\"restrictionType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>نوع محدودسازی</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"انتخاب نوع محدودسازی\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">بدون محدودسازی</SelectItem>\n                          <SelectItem value=\"temporary\">محدودسازی موقت</SelectItem>\n                          <SelectItem value=\"permanent\">مسدودسازی دائم</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                {rejectionForm.watch(\"restrictionType\") === \"temporary\" && (\n                  <>\n                    <FormField\n                      control={rejectionForm.control}\n                      name=\"restrictionStart\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>تاریخ شروع محدودسازی</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"datetime-local\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={rejectionForm.control}\n                      name=\"restrictionEnd\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>تاریخ پایان محدودسازی</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"datetime-local\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </>\n                )}\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsRejectDialogOpen(false)}>\n                    لغو\n                  </Button>\n                  <Button type=\"submit\" variant=\"destructive\" disabled={rejectRaffleMutation.isPending}>\n                    {rejectRaffleMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                    ) : (\n                      <XCircle className=\"w-4 h-4 ml-2\" />\n                    )}\n                    رد و ارسال\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <DialogContent className=\"telegram-card\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2 text-telegram\">\n                <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                تأیید حذف آگهی\n              </DialogTitle>\n              <DialogDescription className=\"text-telegram-text-secondary\">\n                آیا از حذف این آگهی اطمینان دارید؟ این عمل غیر قابل بازگشت است.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsDeleteDialogOpen(false)}\n                className=\"border-telegram-border text-telegram-text\"\n              >\n                لغو\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={confirmDeleteRaffle}\n                disabled={deleteRaffleMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                {deleteRaffleMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                ) : (\n                  <Trash2 className=\"w-4 h-4 ml-2\" />\n                )}\n                حذف آگهی\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Bulk Delete Confirmation Dialog */}\n        <Dialog open={isBulkDeleteDialogOpen} onOpenChange={setIsBulkDeleteDialogOpen}>\n          <DialogContent className=\"telegram-card\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2 text-telegram\">\n                <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                تأیید حذف دسته‌جمعی\n              </DialogTitle>\n              <DialogDescription className=\"text-telegram-text-secondary\">\n                آیا از حذف تمام آگهی‌های {bulkDeleteStatus === 'approved' ? 'تایید شده' : 'رد شده'} اطمینان دارید؟ \n                این عمل غیر قابل بازگشت است و تمام آگهی‌های این دسته پاک خواهند شد.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsBulkDeleteDialogOpen(false)}\n                className=\"border-telegram-border text-telegram-text\"\n              >\n                لغو\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={confirmBulkDelete}\n                disabled={bulkDeleteMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                {bulkDeleteMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                ) : (\n                  <Trash2 className=\"w-4 h-4 ml-2\" />\n                )}\n                حذف همه آگهی‌ها\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":81971},"client/src/pages/user-tabs-main.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { \n  User as UserIcon,\n  Star, \n  Crown, \n  Calendar, \n  Clock, \n  Users, \n  Eye, \n  Heart,\n  Filter,\n  Gift,\n  Trophy,\n  CheckCircle,\n  XCircle,\n  Plus,\n  Edit,\n  Send,\n  AlertCircle,\n  FileText,\n  Share2,\n  Link2,\n  TrendingUp,\n  Award,\n  Copy,\n  ExternalLink,\n  Target,\n  RefreshCw,\n  Calendar as CalendarIcon,\n  MapPin,\n  MessageCircle,\n  Settings\n} from \"lucide-react\";\nimport { MembershipPage } from \"./MembershipPage\";\nimport { format } from \"date-fns\";\n\n// Form schema for raffle submission\nconst raffleFormSchema = z.object({\n  title: z.string().min(3, \"عنوان باید حداقل ۳ کاراکتر باشد\"),\n  prizeType: z.enum([\"stars\", \"premium\", \"mixed\"], {\n    required_error: \"نوع جایزه را انتخاب کنید\"\n  }),\n  prizeValue: z.number().min(1, \"مقدار جایزه باید مثبت باشد\").optional(),\n  requiredChannels: z.string().min(1, \"حداقل یک کانال الزامی است\"),\n  raffleDateTime: z.string().min(1, \"تاریخ و زمان الزامی است\"),\n  channelId: z.string().min(1, \"شناسه کانال الزامی است\"),\n  messageId: z.string().min(1, \"شناسه پیام الزامی است\"),\n});\n\ntype RaffleFormData = z.infer<typeof raffleFormSchema>;\n\nexport default function UserTabsMainPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"participate\"); // Default to participate tab\n  const [submissionFilter, setSubmissionFilter] = useState<string>(\"all\"); // For submitted raffles status filter\n  const [activeFilter, setActiveFilter] = useState<string>(\"all\");\n\n  const form = useForm<RaffleFormData>({\n    resolver: zodResolver(raffleFormSchema),\n    defaultValues: {\n      title: \"\",\n      prizeType: \"stars\",\n      prizeValue: 0,\n      requiredChannels: \"\",\n      raffleDateTime: \"\",\n      channelId: \"\",\n      messageId: \"\",\n    },\n  });\n\n  // User statistics and data queries\n  const { data: userStats } = useQuery({\n    queryKey: ['/api/user/stats', user?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/users/${user?.id}/stats`);\n      if (!response.ok) throw new Error('Failed to fetch user stats');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: raffles = [], isLoading: rafflesLoading } = useQuery({\n    queryKey: ['/api/raffles', user?.id, activeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('userId', user.id);\n      if (activeFilter && activeFilter !== 'all') params.append('filter', activeFilter);\n      \n      const response = await fetch(`/api/raffles?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: seenRaffles = [] } = useQuery({\n    queryKey: ['/api/user/seen-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: joinedRaffles = [] } = useQuery({\n    queryKey: ['/api/user/joined-raffles', user?.id],\n    enabled: !!user?.id,\n  }) as { data: string[] };\n\n  const { data: sponsorChannels = [] } = useQuery({\n    queryKey: ['/api/sponsor-channels'],\n    enabled: !!user?.id,\n  }) as { data: any[] };\n\n  const { data: submittedRaffles = [] } = useQuery({\n    queryKey: ['/api/raffles/submitted', user?.id, submissionFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (user?.id) params.append('submitterId', user.id);\n      if (submissionFilter && submissionFilter !== 'all') params.append('status', submissionFilter);\n      \n      const response = await fetch(`/api/raffles/submitted?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch submitted raffles');\n      return await response.json();\n    },\n    enabled: !!user?.id && activeTab === 'submit',\n  });\n\n  // Generate unique referral link\n  const referralLink = user?.referralCode \n    ? `https://t.me/YourBotName?start=${user.referralCode}`\n    : \"\";\n\n  // Mutations\n  const joinRaffleMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to join raffle\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"با موفقیت در قرعه‌کشی شرکت کردید\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/joined-raffles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/raffles'] });\n    },\n    onError: () => {\n      toast({ title: \"خطا در شرکت در قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const markSeenMutation = useMutation({\n    mutationFn: async (raffleId: string) => {\n      const response = await fetch(`/api/raffles/${raffleId}/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to mark as seen\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/seen-raffles'] });\n    },\n  });\n\n  const submitRaffleMutation = useMutation({\n    mutationFn: async (data: RaffleFormData) => {\n      const requestData = {\n        ...data,\n        requiredChannels: data.requiredChannels.split(',').map(ch => ch.trim()),\n        submitterId: user?.id,\n        raffleDateTime: new Date(data.raffleDateTime).toISOString(),\n      };\n\n      const response = await fetch('/api/raffles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestData),\n      });\n\n      if (!response.ok) throw new Error('Failed to submit raffle');\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"قرعه‌کشی با موفقیت ارسال شد و در انتظار تایید است\" });\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"خطا در ارسال قرعه‌کشی\", variant: \"destructive\" });\n    },\n  });\n\n  const joinSponsorChannelMutation = useMutation({\n    mutationFn: async (channelId: string) => {\n      const response = await fetch(`/api/sponsor-channels/${channelId}/join`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: user?.id }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to join sponsor channel\");\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({ title: `${data.pointsEarned} امتیاز دریافت کردید!` });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/stats'] });\n    },\n    onError: () => {\n      toast({ title: \"خطا در عضویت در کانال\", variant: \"destructive\" });\n    },\n  });\n\n  // Helper functions\n  const getFilteredRaffles = () => {\n    const now = new Date();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    switch (activeFilter) {\n      case \"today\":\n        return raffles.filter((raffle: any) => {\n          const raffleDate = new Date(raffle.raffleDateTime);\n          return raffleDate >= today && raffleDate < tomorrow;\n        });\n      case \"seen\":\n        return raffles.filter((raffle: any) => seenRaffles?.includes?.(raffle.id));\n      case \"joined\":\n        return raffles.filter((raffle: any) => joinedRaffles?.includes?.(raffle.id));\n      case \"ended\":\n        return raffles.filter((raffle: any) => new Date(raffle.raffleDateTime) < now);\n      default:\n        return raffles;\n    }\n  };\n\n  const getPrizeIcon = (prizeType: string) => {\n    switch (prizeType) {\n      case \"stars\":\n        return <Star className=\"w-4 h-4 text-yellow-500\" />;\n      case \"premium\":\n        return <Crown className=\"w-4 h-4 text-orange-500\" />;\n      case \"mixed\":\n        return (\n          <div className=\"flex items-center gap-0.5\">\n            <Star className=\"w-3 h-3 text-yellow-500\" />\n            <Crown className=\"w-3 h-3 text-orange-500\" />\n          </div>\n        );\n      default:\n        return <Gift className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const handleJoinRaffle = (raffleId: string) => {\n    joinRaffleMutation.mutate(raffleId);\n  };\n\n  const handleMarkSeen = (raffleId: string) => {\n    if (!seenRaffles?.includes?.(raffleId)) {\n      markSeenMutation.mutate(raffleId);\n    }\n  };\n\n  const handleSubmitRaffle = (data: RaffleFormData) => {\n    submitRaffleMutation.mutate(data);\n  };\n\n  const copyReferralLink = () => {\n    if (referralLink) {\n      navigator.clipboard.writeText(referralLink);\n      toast({ title: \"لینک رفرال کپی شد\" });\n    }\n  };\n\n  const shareReferralLink = () => {\n    if (referralLink && navigator.share) {\n      navigator.share({\n        title: 'دعوت به دنیای قرعه‌کشی',\n        text: 'با استفاده از این لینک به ما بپیوندید!',\n        url: referralLink\n      });\n    } else {\n      copyReferralLink();\n    }\n  };\n\n  const filteredRaffles = getFilteredRaffles();\n  const levelProgress = ((user?.points || 0) / (userStats?.nextLevelPoints || 1)) * 100;\n\n  return (\n    <div className=\"p-4 h-full overflow-y-auto tab-content-enter\">\n        {/* Header */}\n        <div className=\"text-center space-y-4 mb-6\">\n          <h1 className=\"text-2xl font-bold text-telegram mb-2 animate-fade-in\">\n            دنیای قرعه‌کشی\n          </h1>\n          <p className=\"text-telegram-text-secondary text-sm\">\n            در قرعه‌کشی‌ها شرکت کنید، امتیاز کسب کنید و سطح خود را ارتقا دهید\n          </p>\n        </div>\n\n        {/* Main Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"tabs-list-responsive mb-6\">\n            <TabsTrigger value=\"profile\" className=\"tabs-trigger-responsive\">\n              <UserIcon size={16} />\n              <span>پروفایل</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"points\" className=\"tabs-trigger-responsive\">\n              <Star size={16} />\n              <span>امتیازات</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"participate\" className=\"tabs-trigger-responsive\">\n              <Trophy size={16} />\n              <span>شرکت</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"submit\" className=\"tabs-trigger-responsive\">\n              <Plus size={16} />\n              <span>ثبت جدید</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Tab 1: User Profile */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card className=\"shadow-telegram-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} />\n                    <AvatarFallback className=\"bg-telegram-blue text-white\">\n                      {user?.firstName?.charAt(0) || user?.username?.charAt(0) || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"font-bold text-lg\">\n                      {user?.firstName && user?.lastName \n                        ? `${user.firstName} ${user.lastName}` \n                        : user?.username || 'کاربر'}\n                    </h3>\n                    <p className=\"text-telegram-text-secondary text-sm\">\n                      سطح {user?.level} • {user?.points} امتیاز\n                    </p>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"responsive-grid\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">نام کامل</Label>\n                    <div className=\"p-3 bg-telegram-surface-variant rounded-lg\">\n                      {user?.firstName && user?.lastName \n                        ? `${user.firstName} ${user.lastName}` \n                        : 'تعریف نشده'}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">شناسه تلگرام</Label>\n                    <div className=\"p-3 bg-telegram-surface-variant rounded-lg\">\n                      {user?.telegramId || 'تعریف نشده'}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">سطح کاربر</Label>\n                    <div className=\"p-3 bg-telegram-surface-variant rounded-lg flex items-center gap-2\">\n                      <Award className=\"w-4 h-4 text-telegram-blue\" />\n                      سطح {user?.level}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">تاریخ عضویت</Label>\n                    <div className=\"p-3 bg-telegram-surface-variant rounded-lg flex items-center gap-2\">\n                      <CalendarIcon className=\"w-4 h-4 text-telegram-text-secondary\" />\n                      {user?.createdAt \n                        ? format(new Date(user.createdAt), \"yyyy/MM/dd\")\n                        : 'نامشخص'}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tab 2: Points and Level System */}\n          <TabsContent value=\"points\" className=\"space-y-6 tab-content-enter\">\n            {/* Level Progress */}\n            <Card className=\"shadow-telegram-lg bg-gradient-to-r from-telegram-blue/10 to-telegram-surface border border-telegram-blue/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-full bg-telegram-blue/20 mb-4\">\n                    <Award className=\"w-10 h-10 text-telegram-blue\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-telegram-blue\">سطح {user?.level}</h3>\n                  <p className=\"text-telegram-text-secondary\">{user?.points} از {userStats?.nextLevelPoints || 0} امتیاز</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>پیشرفت تا سطح بعد</span>\n                    <span>{Math.round(levelProgress)}%</span>\n                  </div>\n                  <Progress value={levelProgress} className=\"h-3\" />\n                  <p className=\"text-xs text-telegram-text-secondary text-center\">\n                    {(userStats?.nextLevelPoints || 0) - (user?.points || 0)} امتیاز تا سطح بعد\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Stats Cards */}\n            <div className=\"responsive-grid\">\n              <Card className=\"shadow-telegram card-hover-transition\">\n                <CardContent className=\"p-4 text-center\">\n                  <Star className=\"mx-auto mb-2 text-telegram-warning\" size={24} />\n                  <div className=\"text-xl font-bold text-telegram-warning\">{user?.points}</div>\n                  <div className=\"text-xs text-telegram-text-secondary\">امتیاز کل</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"shadow-telegram card-hover-transition\">\n                <CardContent className=\"p-4 text-center\">\n                  <Users className=\"mx-auto mb-2 text-telegram-success\" size={24} />\n                  <div className=\"text-xl font-bold text-telegram-success\">{joinedRaffles?.length || 0}</div>\n                  <div className=\"text-xs text-telegram-text-secondary\">شرکت در قرعه‌کشی</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"shadow-telegram card-hover-transition\">\n                <CardContent className=\"p-4 text-center\">\n                  <Share2 className=\"mx-auto mb-2 text-telegram-blue\" size={24} />\n                  <div className=\"text-xl font-bold text-telegram-blue\">{userStats?.referralCount || 0}</div>\n                  <div className=\"text-xs text-telegram-text-secondary\">دعوت شده</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Referral System */}\n            <Card className=\"shadow-telegram-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Share2 size={20} />\n                  سیستم دعوت از دوستان\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-telegram-surface-variant rounded-lg\">\n                  <p className=\"text-sm text-telegram-text-secondary mb-2\">لینک دعوت شما:</p>\n                  <div className=\"flex gap-2\">\n                    <Input \n                      value={referralLink || \"\"} \n                      readOnly \n                      className=\"text-xs\"\n                    />\n                    <Button size=\"sm\" onClick={copyReferralLink} className=\"btn-press\">\n                      <Copy size={14} />\n                    </Button>\n                    <Button size=\"sm\" onClick={shareReferralLink} className=\"btn-press\">\n                      <Share2 size={14} />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"text-sm text-telegram-text-secondary\">\n                  • با دعوت هر دوست {user?.referralReward || 50} امتیاز دریافت کنید<br/>\n                  • تعداد افراد دعوت شده: {userStats?.referralCount || 0} نفر<br/>\n                  • امتیاز کسب شده از دعوت: {(userStats?.referralCount || 0) * (user?.referralReward || 50)} امتیاز\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Sponsor Channels */}\n            {sponsorChannels.length > 0 && (\n              <Card className=\"shadow-telegram-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ExternalLink size={20} />\n                    کانال‌های اسپانسری\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {sponsorChannels.map((channel: any) => (\n                      <div key={channel.id} className=\"flex items-center justify-between p-3 border border-telegram rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">{channel.channelName}</h4>\n                          <p className=\"text-xs text-telegram-text-secondary\">{channel.description}</p>\n                          <div className=\"flex items-center gap-1 mt-1\">\n                            <Star className=\"w-3 h-3 text-telegram-warning\" />\n                            <span className=\"text-xs font-medium text-telegram-warning\">\n                              {channel.pointsReward} امتیاز\n                            </span>\n                          </div>\n                        </div>\n                        <Button \n                          size=\"sm\"\n                          onClick={() => joinSponsorChannelMutation.mutate(channel.id)}\n                          disabled={joinSponsorChannelMutation.isPending}\n                        >\n                          عضویت\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n\n\n          {/* Tab 3: Participate in Raffles */}\n          <TabsContent value=\"participate\" className=\"space-y-6 tab-content-enter\">\n            {/* Filter Tabs */}\n            <Tabs value={activeFilter} onValueChange={setActiveFilter} className=\"w-full\">\n              <TabsList className=\"filter-tabs-responsive mb-4\">\n                <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n                <TabsTrigger value=\"today\" className=\"text-xs\">امروز</TabsTrigger>\n                <TabsTrigger value=\"seen\" className=\"text-xs\">دیده شده</TabsTrigger>\n                <TabsTrigger value=\"joined\" className=\"text-xs\">شرکت کرده</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={activeFilter} className=\"space-y-4\">\n                {/* Filter Description */}\n                <Card className=\"shadow-telegram\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 text-sm text-telegram-text-secondary\">\n                      <Filter className=\"w-4 h-4\" />\n                      {activeFilter === \"all\" && \"تمام قرعه‌کشی‌های مناسب سطح شما\"}\n                      {activeFilter === \"today\" && \"قرعه‌کشی‌های امروز\"}\n                      {activeFilter === \"seen\" && \"قرعه‌کشی‌هایی که مشاهده کرده‌اید\"}\n                      {activeFilter === \"joined\" && \"قرعه‌کشی‌هایی که در آن شرکت کرده‌اید\"}\n                      <Badge variant=\"outline\" className=\"ml-auto\">\n                        {filteredRaffles.length} مورد\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Raffles Grid */}\n                <div className=\"space-y-4\">\n                  {filteredRaffles.map((raffle: any, index: number) => (\n                    <Card \n                      key={raffle.id} \n                      className=\"shadow-telegram-lg hover:shadow-telegram-xl transition-all duration-300 animate-fade-in\"\n                      style={{ animationDelay: `${index * 0.1}s` }}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-bold text-telegram mb-1\">{raffle.title}</h3>\n                            \n                            <div className=\"flex items-center gap-3 text-xs text-telegram-text-secondary mb-2\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar size={12} />\n                                {format(new Date(raffle.raffleDateTime), \"MM/dd\")}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock size={12} />\n                                {format(new Date(raffle.raffleDateTime), \"HH:mm\")}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Users size={12} />\n                                {raffle.participantCount}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-2 mb-3\">\n                              {getPrizeIcon(raffle.prizeType)}\n                              <span className=\"font-medium text-telegram text-sm\">\n                                {raffle.prizeType === \"stars\" ? `${raffle.prizeValue} ستاره` : \n                                 raffle.prizeType === \"premium\" ? `${raffle.prizeValue} ماه پریمیوم` : \n                                 raffle.prizeType === \"mixed\" ? `${Math.floor(raffle.prizeValue / 2)} ستاره + ${Math.floor(raffle.prizeValue / 2)} ماه پریمیوم` :\n                                 `${raffle.prizeValue} واحد`}\n                              </span>\n                            </div>\n                          </div>\n                          \n                          <Badge className={`${raffle.levelRequired <= (user?.level || 1) ? 'bg-telegram-success' : 'bg-telegram-warning'}`}>\n                            سطح {raffle.levelRequired}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex gap-2\">\n                            {!joinedRaffles?.includes?.(raffle.id) && \n                             new Date(raffle.raffleDateTime) > new Date() && \n                             raffle.levelRequired <= (user?.level || 1) && (\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleJoinRaffle(raffle.id)}\n                                disabled={joinRaffleMutation.isPending}\n                                className=\"bg-telegram-success hover:bg-telegram-success/90 btn-press\"\n                              >\n                                <Gift size={12} className=\"ml-1\" />\n                                شرکت\n                              </Button>\n                            )}\n                            \n                            {joinedRaffles?.includes?.(raffle.id) && (\n                              <Badge className=\"status-badge-approved text-xs\">شرکت کرده</Badge>\n                            )}\n                            \n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleMarkSeen(raffle.id)}\n                              className=\"btn-press\"\n                            >\n                              <Eye size={12} className=\"ml-1\" />\n                              {seenRaffles?.includes?.(raffle.id) ? \"مشاهده شده\" : \"مشاهده\"}\n                            </Button>\n                          </div>\n                          \n                          <Button size=\"sm\" variant=\"ghost\" className=\"btn-press\">\n                            <Heart size={12} />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {filteredRaffles.length === 0 && !rafflesLoading && (\n                  <Card className=\"shadow-telegram\">\n                    <CardContent className=\"p-8 text-center\">\n                      <AlertCircle className=\"mx-auto mb-4 text-telegram-text-secondary\" size={48} />\n                      <h3 className=\"font-medium text-telegram mb-2\">قرعه‌کشی موجود نیست</h3>\n                      <p className=\"text-telegram-text-secondary\">در این دسته‌بندی قرعه‌کشی یافت نشد</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n            </Tabs>\n          </TabsContent>\n\n          {/* Tab 4: Submit New Raffle */}\n          <TabsContent value=\"submit\" className=\"space-y-6 tab-content-enter\">\n            {/* Submission Filter Tabs */}\n            <Tabs value={submissionFilter} onValueChange={setSubmissionFilter} className=\"w-full\">\n              <TabsList className=\"filter-tabs-responsive mb-4\">\n                <TabsTrigger value=\"all\" className=\"text-xs\">همه</TabsTrigger>\n                <TabsTrigger value=\"pending\" className=\"text-xs\">در انتظار</TabsTrigger>\n                <TabsTrigger value=\"approved\" className=\"text-xs\">تایید شده</TabsTrigger>\n                <TabsTrigger value=\"rejected\" className=\"text-xs\">رد شده</TabsTrigger>\n              </TabsList>\n\n              {/* Show form only when \"all\" filter is selected */}\n              {submissionFilter === \"all\" && (\n                <Card className=\"shadow-telegram-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText size={20} />\n                      ثبت قرعه‌کشی جدید\n                    </CardTitle>\n                  </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleSubmitRaffle)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>عنوان قرعه‌کشی</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"عنوان قرعه‌کشی را وارد کنید\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n\n\n                    <div className=\"responsive-grid\">\n                      <FormField\n                        control={form.control}\n                        name=\"prizeType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>نوع جایزه</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"نوع جایزه را انتخاب کنید\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"stars\">ستاره</SelectItem>\n                                <SelectItem value=\"premium\">پریمیوم</SelectItem>\n                                <SelectItem value=\"mixed\">ترکیبی</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"prizeValue\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>مقدار جایزه</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"100\" \n                                {...field}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"requiredChannels\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>کانال‌های مورد نیاز</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"@channel1, @channel2\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"responsive-grid\">\n                      <FormField\n                        control={form.control}\n                        name=\"channelId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>شناسه کانال</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"-1001234567890\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"messageId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>شناسه پیام</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"123\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"raffleDateTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>تاریخ و زمان قرعه‌کشی</FormLabel>\n                          <FormControl>\n                            <Input type=\"datetime-local\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full btn-press\"\n                      disabled={submitRaffleMutation.isPending}\n                    >\n                      {submitRaffleMutation.isPending && <RefreshCw className=\"w-4 h-4 ml-2 animate-spin\" />}\n                      ارسال قرعه‌کشی\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n              )}\n\n              {/* Show submitted raffles list for other filters */}\n              {submissionFilter !== \"all\" && (\n                <div className=\"space-y-4\">\n                  <Card className=\"shadow-telegram\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 text-sm text-telegram-text-secondary\">\n                        <Filter className=\"w-4 h-4\" />\n                        {submissionFilter === \"pending\" && \"قرعه‌کشی‌های در انتظار تایید\"}\n                        {submissionFilter === \"approved\" && \"قرعه‌کشی‌های تایید شده\"}\n                        {submissionFilter === \"rejected\" && \"قرعه‌کشی‌های رد شده\"}\n                        <Badge variant=\"outline\" className=\"ml-auto\">\n                          {submittedRaffles.length} مورد\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Submitted Raffles List */}\n                  <div className=\"space-y-4\">\n                    {submittedRaffles.map((raffle: any, index: number) => (\n                      <Card \n                        key={raffle.id} \n                        className=\"shadow-telegram-lg hover:shadow-telegram-xl transition-all duration-300 animate-fade-in\"\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-bold text-telegram mb-1\">{raffle.title}</h3>\n                              \n                              <div className=\"flex items-center gap-3 text-xs text-telegram-text-secondary mb-2\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar size={12} />\n                                  {format(new Date(raffle.createdAt || Date.now()), \"MM/dd\")}\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Clock size={12} />\n                                  {format(new Date(raffle.raffleDateTime), \"HH:mm\")}\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex items-center gap-2 mb-3\">\n                                {getPrizeIcon(raffle.prizeType)}\n                                <span className=\"font-medium text-telegram text-sm\">\n                                  {raffle.prizeType === \"stars\" ? `${raffle.prizeValue} ستاره` : \n                                   raffle.prizeType === \"premium\" ? `${raffle.prizeValue} ماه پریمیوم` : \n                                   raffle.prizeType === \"mixed\" ? `${Math.floor(raffle.prizeValue / 2)} ستاره + ${Math.floor(raffle.prizeValue / 2)} ماه پریمیوم` :\n                                   `${raffle.prizeValue} واحد`}\n                                </span>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col items-end gap-2\">\n                              <Badge \n                                className={`${\n                                  raffle.status === 'approved' ? 'status-badge-approved' :\n                                  raffle.status === 'rejected' ? 'status-badge-rejected' :\n                                  'status-badge-pending'\n                                }`}\n                              >\n                                {raffle.status === 'approved' ? 'تایید شده' :\n                                 raffle.status === 'rejected' ? 'رد شده' :\n                                 'در انتظار'}\n                              </Badge>\n                              {raffle.levelRequired && (\n                                <Badge variant=\"outline\">\n                                  سطح {raffle.levelRequired}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex gap-2\">\n                              {raffle.status === 'rejected' && raffle.rejectionReason && (\n                                <Button size=\"sm\" variant=\"destructive\">\n                                  <AlertCircle size={12} className=\"ml-1\" />\n                                  دلیل رد\n                                </Button>\n                              )}\n                              {raffle.status === 'approved' && (\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <ExternalLink size={12} className=\"ml-1\" />\n                                  مشاهده\n                                </Button>\n                              )}\n                            </div>\n                            \n                            <div className=\"text-xs text-telegram-text-secondary\">\n                              {raffle.status === 'pending' && 'منتظر بررسی ادمین'}\n                              {raffle.status === 'approved' && `${raffle.participantCount || 0} شرکت‌کننده`}\n                            </div>\n                          </div>\n                          \n                          {raffle.rejectionReason && raffle.status === 'rejected' && (\n                            <div className=\"mt-3 p-3 bg-telegram-error/10 border border-telegram-error/20 rounded-lg\">\n                              <p className=\"text-sm text-telegram-error\">\n                                <strong>دلیل رد:</strong> {raffle.rejectionReason}\n                              </p>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {submittedRaffles.length === 0 && (\n                    <Card className=\"shadow-telegram\">\n                      <CardContent className=\"p-8 text-center\">\n                        <AlertCircle className=\"mx-auto mb-4 text-telegram-text-secondary\" size={48} />\n                        <h3 className=\"font-medium text-telegram mb-2\">قرعه‌کشی موجود نیست</h3>\n                        <p className=\"text-telegram-text-secondary\">\n                          {submissionFilter === \"pending\" && \"هیچ قرعه‌کشی در انتظار تایید ندارید\"}\n                          {submissionFilter === \"approved\" && \"هیچ قرعه‌کشی تایید شده ندارید\"}\n                          {submissionFilter === \"rejected\" && \"هیچ قرعه‌کشی رد شده ندارید\"}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              )}\n            </Tabs>\n          </TabsContent>\n        </Tabs>\n        \n        {/* Enhanced Floating Support Button - only for non-admin users */}\n        {user?.userType !== \"bot_admin\" && (\n          <div \n            className=\"fixed bottom-20 left-4 z-50 animate-slideUp\"\n            style={{ opacity: 1, transform: \"translateY(0)\" }}\n          >\n            <button\n              onClick={() => window.open(\"https://t.me/support_channel\", \"_blank\")}\n              className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 active:scale-95\"\n              title=\"پشتیبانی\"\n              aria-label=\"دکمه پشتیبانی\"\n            >\n              <MessageCircle size={20} className=\"text-white\" />\n              <span className=\"text-sm font-medium whitespace-nowrap text-white\">پشتیبانی</span>\n            </button>\n          </div>\n        )}\n    </div>\n  );\n}","size_bytes":43903},"client/src/hooks/usePageTransition.ts":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\n\nexport function usePageTransition() {\n  const [location] = useLocation();\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [transitionClass, setTransitionClass] = useState('page-transition');\n\n  useEffect(() => {\n    // Start transition\n    setIsTransitioning(true);\n    \n    // Set appropriate transition class based on route\n    if (location === '/') {\n      setTransitionClass('page-transition-fade');\n    } else if (location === '/profile') {\n      setTransitionClass('page-transition-up');\n    } else if (location === '/history') {\n      setTransitionClass('page-transition-scale');\n    } else {\n      setTransitionClass('page-transition');\n    }\n\n    // End transition after animation duration\n    const timer = setTimeout(() => {\n      setIsTransitioning(false);\n    }, 400); // Match longest animation duration\n\n    return () => clearTimeout(timer);\n  }, [location]);\n\n  return {\n    isTransitioning,\n    transitionClass,\n    location\n  };\n}","size_bytes":1057},"client/src/components/floating-support-button.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { HelpCircle, MessageCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface FloatingSupportButtonProps {\n  userRole?: string;\n}\n\nexport function FloatingSupportButton({ userRole = \"regular\" }: FloatingSupportButtonProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Only show for regular users\n  if (userRole !== \"regular\") {\n    return null;\n  }\n\n  // Fetch bot config to get support link\n  const { data: botConfig } = useQuery({\n    queryKey: [\"/api/bot/config\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSupportClick = () => {\n    if (botConfig?.supportLink) {\n      // Open support link in new tab\n      window.open(botConfig.supportLink, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  // Don't show if no support link is configured\n  if (!botConfig?.supportLink) {\n    return null;\n  }\n\n  return (\n    <div className={`floating-support-button ${isVisible ? 'visible' : ''}`}>\n      <button\n        onClick={handleSupportClick}\n        className=\"support-button btn-press\"\n        title=\"پشتیبانی\"\n        aria-label=\"دکمه پشتیبانی\"\n      >\n        <MessageCircle size={24} />\n        <span className=\"support-text\">پشتیبانی</span>\n      </button>\n    </div>\n  );\n}","size_bytes":1481},"KING_ADMIN_CHANGE_GUIDE.md":{"content":"# 👑 King Admin شناسه تغییر راهنمای\n\n## 🔍 موقعیت فعلی King Admin \n**شناسه تلگرام فعلی**: `128787773`\n\n## 📝 نحوه تغییر King Admin\n\n### 1️⃣ تغییر در کد (اولویت اول)\nفایل: `shared/schema.ts`\n```typescript\n// 👑 KING ADMIN CONFIGURATION - Change this ID to transfer King Admin privileges\nexport const KING_ADMIN_TELEGRAM_ID = \"YOUR_NEW_TELEGRAM_ID_HERE\";\n```\n\n### 2️⃣ مکان‌های استفاده از King Admin ID\n\n✅ **خودکار** (از helper functions استفاده می‌کنند):\n- `server/storage.ts` - تمام security checks با isKingAdmin() و getKingAdminId()\n- `server/routes.ts` - authentication logic با isKingAdmin()\n- Database trigger - با getKingAdminId() خودکار بروزرسانی می‌شود\n- Frontend components - وقتی از isKingAdmin() استفاده کنند\n\n### 3️⃣ مراحل کامل تغییر King Admin\n\n1. **تغییر constant در کد**:\n   ```typescript\n   // در shared/schema.ts\n   export const KING_ADMIN_TELEGRAM_ID = \"NEW_TELEGRAM_ID\";\n   ```\n\n2. **بروزرسانی database trigger** (اختیاری):\n   ```typescript\n   // اجرای این method بعد از تغییر constant\n   await storage.updateDatabaseTriggerForKingAdmin();\n   ```\n   **نکته**: Database trigger خودکار بروزرسانی می‌شود چون از helper functions استفاده می‌کند\n\n3. **تست امنیت**:\n   - ورود با شناسه جدید باید adminLevel: 0 برگرداند\n   - شناسه قدیمی باید دیگر دسترسی King نداشته باشد\n\n### 4️⃣ لایه‌های امنیتی محافظت شده\n\n✅ **Application Layer**: همه security checks از `KING_ADMIN_TELEGRAM_ID` استفاده می‌کنند\n✅ **Database Layer**: Trigger بعد از بروزرسانی محافظت می‌کند  \n✅ **API Layer**: Authentication logic از constant استفاده می‌کند\n✅ **Hardcoded Protection**: همه جا جایگزین شده با constant\n\n### 5️⃣ تست نهایی\n\n```bash\n# تست ورود با شناسه جدید\ncurl -X POST http://localhost:5000/api/auth/telegram \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"telegramId\":\"NEW_TELEGRAM_ID\",\"firstName\":\"New King\"}' \\\n  | grep '\"adminLevel\":0'\n```\n\n### ⚠️ نکات مهم\n\n1. **تنها راه تغییر**: فقط از طریق تغییر `KING_ADMIN_TELEGRAM_ID` در `shared/schema.ts`\n2. **امنیت چندلایه**: متغیرهای محیطی، دیتابیس manual و API نمی‌توانند bypass کنند\n3. **Helper Functions**: در کد جدید حتماً از `isKingAdmin()` و `getKingAdminId()` استفاده کنید\n4. **Database Protection**: Triggers مانع ایجاد King Admin دوم می‌شوند\n5. **Environment Variables DISABLED**: متغیر `ADMIN_TELEGRAM_IDS` دیگر اثری ندارد\n6. **Test**: همیشه تست کنید که سیستم کار می‌کند\n\n### 🚫 روش‌های غیرممکن (محافظت شده)\n\n❌ **تغییر از طریق environment variables** (دیگر کار نمی‌کند)\n❌ **تغییر مستقیم در دیتابیس** (trigger جلوگیری می‌کند)\n❌ **ایجاد King Admin دوم** (security exception می‌دهد)\n❌ **API endpoint bypass** (همه از helper functions استفاده می‌کنند)\n\n### 🎯 قوانین کدنویسی آینده\n\n**✅ درست:**\n```typescript\n// استفاده از helper functions\nif (isKingAdmin(userTelegramId)) { ... }\nconst kingId = getKingAdminId();\n```\n\n**❌ غلط:**\n```typescript\n// hardcoding شناسه\nif (userTelegramId === \"128787773\") { ... }\nif (userTelegramId === KING_ADMIN_TELEGRAM_ID) { ... }\n```\n\n### 🔧 Debug Commands\n\n```sql\n-- بررسی King Admin فعلی در دیتابیس\nSELECT telegram_id, user_type, admin_level \nFROM users \nWHERE admin_level = 0;\n\n-- تست database trigger\nUPDATE users SET admin_level = 99 \nWHERE telegram_id = 'CURRENT_KING_ID';\n```\n\nاین راهنما اطمینان می‌دهد که بتوانید با امنیت کامل King Admin را تغییر دهید.","size_bytes":4175},"client/src/pages/MembershipPage.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { MembershipCard } from \"@/components/MembershipCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Users, Star, Shield, RefreshCw } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface MembershipPageProps {\n  userId: string;\n}\n\nexport function MembershipPage({ userId }: MembershipPageProps) {\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  const { data: channels, isLoading, error, refetch } = useQuery({\n    queryKey: [`/api/user/${userId}/available-channels`, refreshKey],\n    enabled: !!userId,\n  });\n\n  const { data: memberships } = useQuery({\n    queryKey: [`/api/user/${userId}/sponsor-memberships`, refreshKey],\n    enabled: !!userId,\n  });\n\n  const handleRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n    refetch();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-red-600\">خطا در بارگذاری</CardTitle>\n            <CardDescription>\n              خطا در دریافت اطلاعات کانال‌های اسپانسری\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={handleRefresh} className=\"w-full\">\n              تلاش مجدد\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const channelsData = Array.isArray(channels) ? channels : [];\n  const memberChannels = channelsData.filter((c: any) => c.isMember);\n  const nonMemberChannels = channelsData.filter((c: any) => !c.isMember);\n  const membershipData = Array.isArray(memberships) ? memberships : [];\n  const totalPoints = membershipData.reduce((sum: number, m: any) => sum + (m.pointsEarned || 0), 0);\n  const accessibleChannels = channelsData.filter((c: any) => c.botHasAccess);\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">کانال‌های اسپانسری</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            با عضویت در کانال‌های اسپانسری امتیاز کسب کنید\n          </p>\n        </div>\n        <Button onClick={handleRefresh} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          بروزرسانی\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">کل کانال‌ها</p>\n                <p className=\"text-2xl font-bold\">{channelsData.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">عضو هستم</p>\n                <p className=\"text-2xl font-bold\">{memberChannels.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"w-5 h-5 text-yellow-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">امتیاز کل</p>\n                <p className=\"text-2xl font-bold\">{totalPoints}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <RefreshCw className=\"w-5 h-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">قابل بررسی</p>\n                <p className=\"text-2xl font-bold\">{accessibleChannels.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Non-Member Channels */}\n      {nonMemberChannels.length > 0 && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <h2 className=\"text-xl font-semibold\">کانال‌های جدید</h2>\n            <Badge variant=\"secondary\">\n              {nonMemberChannels.length} کانال\n            </Badge>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {nonMemberChannels.map((channel: any) => (\n              <MembershipCard\n                key={channel.id}\n                channel={channel}\n                userId={userId}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Member Channels */}\n      {memberChannels && memberChannels.length > 0 && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <h2 className=\"text-xl font-semibold\">عضویت‌های من</h2>\n            <Badge variant=\"default\">\n              {memberChannels.length} کانال\n            </Badge>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {memberChannels.map((channel: any) => (\n              <MembershipCard\n                key={channel.id}\n                channel={channel}\n                userId={userId}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* No Channels Message */}\n      {channelsData.length === 0 && (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">هیچ کانال اسپانسری موجود نیست</h3>\n            <p className=\"text-muted-foreground\">\n              در حال حاضر کانال اسپانسری برای عضویت وجود ندارد\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6696}}}